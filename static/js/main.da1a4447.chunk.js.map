{"version":3,"sources":["lib/react-query.ts","styles/Theme.tsx","stores/Global.tsx","components/Footer/Footer.tsx","components/Layout/MainLayout.tsx","components/Layout/AdviseLayout.tsx","providers/app.tsx","components/Elements/TabPanel/TabPanel.tsx","assets/thoth-logo.png","components/Elements/SearchBar/SearchBar.tsx","config/index.ts","features/home/api/postAdvise.ts","features/home/api/getPackageExists.ts","features/home/api/postImageAnalyze.ts","features/home/api/getContainerImages.ts","features/home/components/PackageSearch.tsx","features/home/components/ComboBox/ComboBox.tsx","features/home/components/AdviseCreation.tsx","utils/timeSince.ts","routes/NotFound.tsx","features/home/components/ImageTable.tsx","features/home/components/ImageSearch.tsx","features/home/routes/index.tsx","components/Elements/InfoCard/InfoCard.tsx","components/Elements/IconText/IconText.tsx","features/advise/components/AdviseHeader/CustomAlert/CustomAlert.tsx","utils/calcTime.ts","features/advise/components/AdviseHeader/AdviseHeader.tsx","features/advise/components/CustomCardAction/CustomCardAction.tsx","features/advise/components/AdviseTableView/utils.ts","features/advise/components/AdviseTableView/EnhancedTableHead/EnhancedTableHead.tsx","features/advise/routes/AdviseDetails.tsx","features/advise/components/AdviseTableView/AdviseTableView.tsx","features/advise/components/LockfileView/LockfileView.tsx","features/advise/components/Popup/Popup.tsx","features/advise/components/NetworkGraphView/NetworkGraphView.tsx","features/advise/components/SelectedPackage/SelectedPackage.tsx","components/Elements/ProgressBar/ProgressBar.tsx","components/Metrics/DependenciesMetric/DependenciesMetric.tsx","components/Metrics/LicenseMetric/LicenseGroup/LicenseGroup.tsx","components/Metrics/LicenseMetric/LicenseMetric.tsx","components/Metrics/AdviseMetric/AdviseMetric.tsx","features/advise/routes/AdviseSummary.tsx","features/advise/api/getAdviseDocument.ts","features/advise/api/getAdviseLogs.ts","utils/formatLockfile.ts","lib/interfaces/Graph.ts","features/advise/utils/discoverPackageChanges.ts","hooks/metrics/useDependencyMetric.ts","hooks/metrics/useLicenseMetric.ts","features/advise/hooks/useMetrics.ts","hooks/metrics/useAdviseMetric.ts","hooks/useInterval.ts","api/getPackageMetadata.ts","lib/interfaces/Node.ts","hooks/useGraph.ts","features/advise/routes/AdviseNotFound.tsx","components/Layout/NavigationLayout.tsx","features/advise/routes/index.tsx","features/advise/hooks/useMergeGraphs.ts","features/package/components/ParamDropdown/ParamDropdown.tsx","features/package/components/PackageHeader/PackageHeader.tsx","features/package/components/PackageDependencies/VersionDropdown.tsx","features/package/components/PackageDependencies/PackageDependencies.tsx","features/package/routes/PackageNotFound.tsx","features/package/api/getPackageVersions.ts","features/package/api/getPackageEnvironments.ts","features/package/hooks/useAllVersions.ts","routes/ErrorPage.tsx","features/package/routes/PackageOverview.tsx","features/package/hooks/useSimpleGraph.ts","features/package/routes/index.tsx","features/image/components/ImageHeader/ImageHeader.tsx","features/image/components/DebInfo/DebInfo.tsx","features/image/components/PythonInfo/PythonInfo.tsx","features/image/components/ImageInfo/ImageInfo.tsx","features/image/components/RPMInfo/RPMInfo.tsx","features/image/routes/ImageSummary.tsx","features/image/api/getImageDocument.ts","features/image/api/getImageLogs.ts","features/image/api/getImageMetadata.ts","features/image/routes/ImageNotFound.tsx","features/image/routes/index.tsx","features/image/hooks/useMetrics.ts","features/image/utils/formatImagePackages.ts","routes/RouterConfig.tsx","App.tsx","index.tsx"],"names":["queryClient","QueryClient","defaultOptions","queries","useErrorBoundary","refetchOnWindowFocus","refetchOnMount","retry","themeLight","createTheme","palette","background","default","primary","light","main","dark","secondary","text","typography","fontFamily","h4","fontWeight","fontSize","color","lineHeight","h5","h6","body1","body2","subtitle1","subtitle2","Theme","children","ThemeProvider","theme","CssBaseline","StateContext","React","undefined","reducer","state","action","type","DispatchContext","initState","Global","dispatch","Provider","value","Footer","Box","pb","pt","sx","backgroundColor","textAlign","MainLayout","Stack","direction","justifyContent","style","minHeight","padding","AdviseLayout","header","location","useLocation","currentTab","useMemo","ending","pathname","split","at","Tabs","indicatorColor","textColor","Tab","label","component","RouterLink","to","ErrorFallback","Button","onClick","window","assign","origin","AppProvider","FallbackComponent","client","TabPanel","index","props","role","hidden","id","SearchBar","onEnter","helpertext","boxprops","error","lefticon","righticon","Typography","variant","Paper","p","display","alignItems","borderColor","paddingLeft","paddingRight","InputBase","ml","flex","placeholder","onChange","onKeyPress","ev","key","preventDefault","THOTH_URL","options","manipulation","enabled","interaction","hover","hoverConnectedEdges","selectConnectedEdges","selectable","edges","chosen","smooth","arrowStrikethrough","arrows","from","nodes","border","shape","size","borderWidth","labelHighlightBold","font","strokeWidth","physics","hierarchicalRepulsion","damping","springLength","solver","minVelocity","postAdvise","pipfile","pipfileLock","runtime_environment","data","application_stack","requirements","requirements_format","requirements_lock","axios","post","params","recommendation_type","limit","headers","accept","getPackageExists","name","a","get","per_page","then","res","versions","length","catch","postImageAnalyze","image","getContainerImages","page","PackageSearch","navigate","useNavigate","useState","searchQuery","setSearchQuery","searchError","setSearchError","handleAnalyze","Grid","container","alignSelf","item","xs","spacing","md","e","target","handleChange","mr","minWidth","filter","createFilterOptions","ComboBox","suggestions","help","required","setValue","suggestions_mapped","map","suggestion","title","Autocomplete","event","newValue","inputValue","filterOptions","filtered","push","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","freeSolo","renderInput","TextField","fullWidth","helperText","loading","payload","param","Error","lookupType","operating_system_name","operating_system_version","python_version","cuda_version","cudnn_version","mkl_version","openblas_version","openmpi_version","base_image","AdviseCreation","useReducer","isValid","valid","operating_system","version","Object","keys","forEach","response","analysis_id","status","includes","Collapse","in","marginRight","mt","mb","marginBottom","multiline","rows","sm","LoadingButton","timeSince","date","startTime","Date","seconds","Math","floor","valueOf","interval","num","NotFound","headCells","descendingComparator","b","orderBy","getComparator","order","EnhancedTableHead","onRequestSort","TableHead","TableRow","headCell","TableCell","sortDirection","TableSortLabel","active","property","ImageTable","config","setOrder","setOrderBy","setPage","rowsPerPage","setRowsPerPage","images","useQuery","queryKey","queryFn","container_images","datetime","emptyRows","max","isError","width","TableContainer","Table","rowCount","TableBody","slice","sort","row","labelId","tabIndex","scope","environment_name","align","os_name","os_version","IconButton","package_extract_document_id","image_name","height","colSpan","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","className","CircularProgress","ImageSearch","Home","mode","setMode","useTheme","matches","useMediaQuery","breakpoints","up","maxWidth","marginLeft","marginTop","alt","src","logo","ToggleButtonGroup","exclusive","newMode","ToggleButton","Divider","InfoCard","cardMeta","cardBody","cardAction","Card","CardHeader","subheader","subTitle","CardContent","IconText","icon","link","Link","underline","href","CustomAlert","info","Alert","severity","message","calcTime","finished_at","started_at","AdviseHeader","adviseDocument","logs","expandAlerts","setExpandAlerts","showLogs","setShowLogs","selectedLine","setSelectedLine","result","report","ERROR","toUpperCase","statusText","statusColor","alerts","stack_info","alert","toLowerCase","metadata","document_id","parameters","Chip","line","i","noWrap","error_msg","timeout","unmountOnExit","CustomCardAction","stableSort","array","comparator","stabilizedThis","el","numeric","visuallyHidden","SelectedPackageContext","createContext","AdviseDetails","mergedGraph","search","setSearch","selected","setSelected","AdviseTableView","filteredGraph","setRows","useContext","console","log","useEffect","newRows","node","depth","warnings","license","License","dependencies","adjacents","change","summary","Summary","iconColor","Fragment","paddingBottom","paddingTop","Popup","gutterBottom","latestVersion","justifications","NetworkGraph","visJsRef","useRef","selectedNode","findAllNodesOnAllPaths","app_node","set","convertedNodes","DataSet","popup","document","createElement","ReactDOM","render","add","visData","visEdges","network","current","Network","networkCanvas","getElementById","getElementsByTagName","changeCursor","newCursorStyle","cursor","on","flexFlow","ref","SelectedPackage","selectedPackage","dependents","deps","removed","added","unchanged","parents","nodeObj","justs","thoth","just","showError","reasons","reason","package","entries","NetworkGraphView","ProgressBar","total","LinearProgress","root","borderRadius","colorPrimary","bar","DependenciesMetric","metric","totalDependencies","all","direct","indirect","roots","List","TransitionGroup","t","ListItem","ListItemText","Skeleton","LicenseGroup","packages","totalLicenses","open","setOpen","isOsiApproved","my","k","v","margin","LicenseMetric","more","setMore","licenses","reduce","sum","val","AdviseMetric","justTotal","values","justification","build","AdviseSummary","metrics","setPipfile","handlePipfile","newPipfile","Masonry","columns","advise","useAdviseDocument","getAdviseDocument","getAdviseLogs","formatLockfile","lockfile","requirements_locked","replace","Graph","this","Map","Node","source","destination","sourceNode","destinationNode","addAdjacent","first","visited","Set","visitList","pop","shift","has","getAdjacents","adj","path","newPath","Array","nextPath","findPath","destinationKey","parent","paths","findAllPaths","discoverPackageChanges","justifiedPackages","package_name","start","reasonNodes","find","pkg","oldVersion","whyRemoved","useDependencyMetric","graph","setMetric","base","rootObj","bfs","graphSearch","useLicenseMetric","packageLicenses","Classifier","classifier","parsed","generalLicense","specificLicense","specific","useMetrics","oldGraph","newGraph","adviseMetric","os_release","python","implementation_name","major","minor","micro","analyzer","analyzer_version","products","useAdviseMetric","oldDependencyMetric","newDependencyMetric","oldLicenseMetric","newLicenseMetric","getPackageMetadata","usePackagesMetadata","useQueries","useGraph","knownRoots","allMetadata","isLoading","some","query","tempGraph","notRoot","addVertex","isSuccess","package_version","importlib_metadata","currentNode","dep","adjacentNode","addEdge","app","adjs","min","AdviseNotFound","NavigationLayout","goHome","AdviseRoutes","useParams","refetchInterval","useAdviseLogs","initGraphData","project","adviseGraphData","initGraph","adviseGraph","setGraph","combinedNode","Version","success","adjMap","visGraphEdges","useMergeGraphs","element","ParamDropdown","disabled","SpecContext","specs","defaultSpecs","Select","displayEmpty","encodeURIComponent","index_url","renderValue","MenuItem","PackageHeader","allVersions","allEnvironments","showEnvParams","setShowEnvParams","versionOptions","dups","indexUrlOptions","env","osNameOptions","osVersionOptions","pythonVersionOptions","Name","VersionDropdown","anchorEl","setAnchorEl","distribution","noDup","currentKey","buckets","ceil","fixedOptions","currentTarget","endIcon","specifier","Menu","onClose","PaperProps","maxHeight","alignContent","divider","PackageDependencies","visitedOrder","extra","rowSpacing","join","PackageNotFound","getPackageVersions","getPackageEnvironments","useAllVersions","useInfiniteQuery","input","pageParam","getNextPageParam","lastPage","setAllVersions","hasNextPage","isFetchingNextPage","fetchNextPage","merged","pages","reverse","ErrorPage","PackageOverview","setDefaultSpecs","decodeURIComponent","d","environments","usePackageMetadata","useSimpleGraph","url","JSON","stringify","PackageRoutes","ImageHeader","imageDocument","field","headerName","DebInfo","disableSelectionOnClick","disableColumnSelector","hideFooterSelectedRowCount","getRowId","package_identifier","density","pageSize","PythonInfo","files","file","filepath","interpreters","interpreter","prev","cur","lg","xl","ImageInfo","imageMetadata","architecture","Architecture","created","Created","digest","Digest","docker_version","DockerVersion","labels","Labels","layers","Layers","os","Os","repo_tags","RepoTags","description","vendor","maintainer","toLocaleDateString","usage","valueGetter","sortable","RPMInfo","ImageSummary","deb","getImageDocument","getImageLogs","getImageMetadata","ImageNotFound","ImageRoutes","useImageDocument","arguments","useImageLogs","dependencyMetric","licenseMetric","version_id","image_packages","formatImagePackages","RouterConfig","basename","App","StrictMode"],"mappings":"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","file":"static/js/main.da1a4447.chunk.js","sourcesContent":["import { QueryClient } from \"react-query\";\n\nconst queryConfig = {\n    queries: {\n        useErrorBoundary: true,\n        refetchOnWindowFocus: false,\n        refetchOnMount: false,\n        retry: false,\n    },\n};\n\nexport const queryClient = new QueryClient({ defaultOptions: queryConfig });\n","import React from \"react\";\n\n// material ui\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { createTheme } from \"@mui/material/styles\";\n\nconst themeLight = createTheme({\n    palette: {\n        background: {\n            default: \"#f9f9f9\",\n        },\n        primary: {\n            light: \"#f5a733\",\n            main: \"#f39200\",\n            dark: \"#aa6600\",\n        },\n        secondary: {\n            light: \"#72cdee\",\n            main: \"#4fc1ea\",\n            dark: \"#3787a3\",\n        },\n        text: {\n            primary: \"#363636\",\n            secondary: \"#999\",\n        },\n    },\n    typography: {\n        fontFamily: \"open sans, sans-serif\",\n        h4: {\n            fontWeight: 700,\n            fontSize: \"3rem\",\n            color: \"#363636\",\n            lineHeight: 1.125,\n        },\n        h5: {\n            fontWeight: 600,\n            fontSize: \"2rem\",\n            lineHeight: 1.125,\n            color: \"#363636\",\n        },\n        h6: {\n            fontWeight: 600,\n            fontSize: \"1.2rem\",\n            color: \"#444f60\",\n            lineHeight: 1.5,\n        },\n\n        body1: {\n            fontWeight: 400,\n            fontSize: \"1.25rem\",\n            lineHeight: 1.25,\n            color: \"#000\",\n        },\n\n        body2: {\n            fontWeight: 400,\n            fontSize: \"1rem\",\n            lineHeight: 1.5,\n            color: \"#000\",\n        },\n        subtitle1: {\n            fontWeight: 400,\n            fontSize: \"1.25rem\",\n            lineHeight: 1.25,\n            color: \"#999\",\n        },\n\n        subtitle2: {\n            fontWeight: 400,\n            fontSize: \"1rem\",\n            lineHeight: 1.5,\n            color: \"#999\",\n        },\n    },\n});\n\ninterface ITheme {\n    children?: JSX.Element;\n}\n\nfunction Theme({ children }: ITheme) {\n    return (\n        <ThemeProvider theme={themeLight}>\n            <CssBaseline />\n            {children}\n        </ThemeProvider>\n    );\n}\n\nexport default Theme;\n","import * as React from \"react\";\n\ninterface IGlobal {\n    children?: JSX.Element;\n}\n\nexport interface GlobalState {\n    notifications?: string[];\n}\n\nexport interface GlobalAction {\n    type: string;\n    payload: never;\n}\n\nexport const StateContext = React.createContext<GlobalState | undefined>(\n    undefined,\n);\n\nfunction reducer(state: GlobalState, action: GlobalAction) {\n    switch (action.type) {\n        default:\n            return state;\n    }\n}\n\nexport const DispatchContext = React.createContext<\n    React.Dispatch<GlobalAction> | undefined\n>(undefined);\n\nconst initState: GlobalState = {};\n\nexport default function Global({ children }: IGlobal) {\n    // for state control\n    const [state, dispatch] = React.useReducer(reducer, initState);\n    return (\n        <StateContext.Provider value={state}>\n            <DispatchContext.Provider value={dispatch}>\n                {children}\n            </DispatchContext.Provider>\n        </StateContext.Provider>\n    );\n}\n","import React from \"react\";\n\nimport { Box } from \"@mui/material\";\n\nexport const Footer = () => {\n    return (\n        <Box\n            pb={3}\n            pt={6}\n            sx={{\n                backgroundColor: \"#444f60\",\n                textAlign: \"center\",\n                color: \"white\",\n            }}\n        >\n            This is a footer\n        </Box>\n    );\n};\n","import * as React from \"react\";\nimport { Footer } from \"../Footer\";\nimport { Stack } from \"@mui/material\";\n\ninterface IProps {\n    children: React.ReactNode;\n}\n\n/**\n * Main layout adds margins and spacing to the whole app.\n */\nexport const MainLayout = ({ children }: IProps) => {\n    return (\n        <Stack direction=\"column\" justifyContent=\"flex-start\">\n            <div\n                style={{ minHeight: \"100vh\", padding: \"1.5rem 4rem 9rem 4rem\" }}\n            >\n                {children}\n            </div>\n            <Footer />\n        </Stack>\n    );\n};\n","import * as React from \"react\";\nimport { Tab, Tabs } from \"@mui/material\";\nimport { Link as RouterLink, useLocation } from \"react-router-dom\";\nimport { useMemo } from \"react\";\n\ninterface IProps {\n    children: React.ReactNode;\n    header: React.ReactNode;\n}\n\n/**\n * A layout used for the advise feature tabs. It formats the tabs as router links.\n */\nexport const AdviseLayout = ({ children, header }: IProps) => {\n    const location = useLocation();\n\n    const currentTab = useMemo(() => {\n        const ending = location.pathname.split(\"/\").at(-1);\n        if (ending === \"summary\" || ending === \"details\") {\n            return ending;\n        } else {\n            return \"summary\";\n        }\n    }, [location.pathname]);\n\n    return (\n        <>\n            <div>\n                {header}\n                <Tabs\n                    value={currentTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                >\n                    <Tab\n                        label=\"Summary\"\n                        value={\"summary\"}\n                        component={RouterLink}\n                        to=\"summary\"\n                    />\n                    <Tab\n                        label=\"Advise Results\"\n                        value={\"details\"}\n                        component={RouterLink}\n                        to=\"details\"\n                    />\n                </Tabs>\n            </div>\n            <div>{children}</div>\n        </>\n    );\n};\n","import * as React from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { QueryClientProvider } from \"react-query\";\nimport { queryClient } from \"lib/react-query\";\nimport { Button } from \"@mui/material\";\nimport Theme from \"styles/Theme\";\nimport Global from \"stores/Global\";\nimport { MainLayout } from \"components/Layout\";\n\ninterface IAppProvider {\n    children?: JSX.Element;\n}\n\nconst ErrorFallback = () => {\n    return (\n        <div>\n            <h2>Oops, something went wrong :( </h2>\n            <Button\n                onClick={() => window.location.assign(window.location.origin)}\n            >\n                Refresh\n            </Button>\n        </div>\n    );\n};\n\nexport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n    return (\n        <Theme>\n            <Global>\n                <ErrorBoundary FallbackComponent={ErrorFallback}>\n                    <QueryClientProvider client={queryClient}>\n                        <MainLayout>{children}</MainLayout>\n                    </QueryClientProvider>\n                </ErrorBoundary>\n            </Global>\n        </Theme>\n    );\n};\n","import React from \"react\";\n\ninterface IProps extends React.ComponentPropsWithoutRef<\"div\"> {\n    children: React.ReactNode;\n    /** The unique identifier of the tab. */\n    index: string | number;\n    /** The state variable passed in from the parent which is compared to the index */\n    value: string | number;\n}\n\n/**\n * A tab panel used to encapsulate different tab content.\n */\nconst TabPanel = ({ children, value, index, ...props }: IProps) => {\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...props}\n        >\n            {value === index && children}\n        </div>\n    );\n};\n\nexport default TabPanel;\n","export default __webpack_public_path__ + \"static/media/thoth-logo.1a28a729.png\";","import React from \"react\";\n\n// material ui\nimport {\n    Typography,\n    Box,\n    Paper,\n    InputBase,\n    InputBaseProps,\n} from \"@mui/material\";\nimport { SxProps } from \"@mui/system\";\n\ninterface IProps extends InputBaseProps {\n    /** The error text or default label text */\n    label?: string;\n    /** callback function when textbox ENTER is pressed */\n    onEnter?: () => void;\n    /** helper text for the search bar */\n    helpertext?: string;\n    /** if there is an error or not */\n    error?: boolean;\n    /** icon displayed on the left of the text box */\n    lefticon?: React.ReactNode;\n    /** icon displayed on the right of the text box */\n    righticon?: React.ReactNode;\n    /** Props added to the text box */\n    boxprops?: SxProps;\n}\n\n/**\n *\n */\nconst SearchBar = ({\n    onEnter,\n    label,\n    helpertext,\n    boxprops,\n    error = false,\n    lefticon,\n    righticon,\n    ...props\n}: IProps) => {\n    return (\n        <Box>\n            <Typography\n                variant={\"body1\"}\n                sx={{ color: error ? \"error.main\" : \"text.secondary\" }}\n            >\n                {label}\n            </Typography>\n            <Paper\n                component=\"form\"\n                variant=\"outlined\"\n                sx={{\n                    p: \"8px 4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    borderColor: error ? \"red\" : undefined,\n                    paddingLeft: 2,\n                    paddingRight: 2,\n                    ...boxprops,\n                }}\n            >\n                {lefticon}\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder={helpertext}\n                    error={error}\n                    onChange={props.onChange}\n                    onKeyPress={ev => {\n                        if (onEnter && ev.key === \"Enter\") {\n                            onEnter();\n                            ev.preventDefault();\n                        }\n                    }}\n                    {...props}\n                />\n                {righticon}\n            </Paper>\n        </Box>\n    );\n};\n\nexport default SearchBar;\n","const useProd = true;\nexport const THOTH_URL =\n    !useProd &&\n    (process.env.REACT_APP_DEPLOYMENT === \"STAGE\" ||\n        process.env.NODE_ENV === \"development\")\n        ? \"https://stage.thoth-station.ninja/api/v1\"\n        : \"https://khemenu.thoth-station.ninja/api/v1\";\n\n/**\n * used for vis-js graph render engine\n */\nexport const options = {\n    manipulation: {\n        enabled: false,\n    },\n    interaction: {\n        hover: true,\n        hoverConnectedEdges: false,\n        selectConnectedEdges: false,\n        selectable: true,\n    },\n    edges: {\n        chosen: false,\n        smooth: false,\n        color: {\n            color: \"#5c6470\",\n        },\n        arrowStrikethrough: false,\n        arrows: {\n            from: {\n                enabled: true,\n                type: \"triangle\",\n            },\n        },\n    },\n\n    nodes: {\n        chosen: false,\n        color: {\n            background: \"#5c6470\",\n            border: \"#fff\",\n            hover: {\n                background: \"#f39200\",\n                border: \"#fff\",\n            },\n        },\n        shape: \"dot\",\n        size: 10,\n        borderWidth: 2,\n        labelHighlightBold: false,\n        font: {\n            color: \"#393e46\",\n            strokeWidth: 2,\n            size: 15,\n        },\n    },\n    physics: {\n        hierarchicalRepulsion: {\n            damping: 0.1,\n            springLength: 200,\n        },\n        solver: \"hierarchicalRepulsion\",\n        minVelocity: 0.15,\n    },\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/advise/python\"][\"post\"];\ntype requestBody = path[\"requestBody\"][\"content\"][\"application/json\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\n\nexport const postAdvise = (\n    pipfile: requestBody[\"application_stack\"][\"requirements\"],\n    pipfileLock: requestBody[\"application_stack\"][\"requirements_lock\"],\n    runtime_environment: requestBody[\"runtime_environment\"],\n) => {\n    const data = {\n        application_stack: {\n            requirements: pipfile,\n            requirements_format: \"pipenv\",\n            requirements_lock: pipfileLock,\n        },\n        runtime_environment: runtime_environment,\n    };\n\n    return axios.post<requestResponseSuccess>(\n        THOTH_URL + \"/advise/python\",\n        data,\n        {\n            params: {\n                recommendation_type: \"stable\",\n                limit: 500,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/versions\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport const getPackageExists = async (name: requestParams[\"name\"]) => {\n    return axios\n        .get<requestResponseSuccess>(THOTH_URL + \"/python/package/versions\", {\n            params: {\n                name: name,\n                per_page: 1,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        })\n        .then(res => {\n            return res.data.versions.length > 0;\n        })\n        .catch(() => false);\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"../../../lib/schema\";\n\ntype path = paths[\"/analyze\"][\"post\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\n\nexport const postImageAnalyze = (image: requestParams[\"image\"]) => {\n    return axios.post<requestResponseSuccess>(\n        THOTH_URL + \"/analyze\",\n        {},\n        {\n            params: {\n                image: image,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useInfiniteQuery, useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/container-images\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"];\n\nexport const getContainerImages = async (\n    page: requestParams[\"page\"] = 0,\n    per_page: requestParams[\"per_page\"] = 100,\n) => {\n    return axios.get<requestResponseSuccess>(THOTH_URL + \"/container-images\", {\n        params: {\n            page: page,\n            per_page: per_page,\n        },\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const useContainerImages = (config: { [key: string]: unknown }) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"container-images\"],\n        queryFn: () => getContainerImages(),\n    });\n};\n\nexport const useInfiniteContainerImages = (config: {\n    [key: string]: unknown;\n}) => {\n    return useInfiniteQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"container-images\"],\n        queryFn: input => {\n            return getContainerImages(input.pageParam);\n        },\n        getNextPageParam: (lastPage: AxiosResponse<requestResponseSuccess>) => {\n            return lastPage.data.container_images.length === 0\n                ? undefined\n                : lastPage.data.parameters.page + 1;\n        },\n    });\n};\n","import { Button, Grid, Typography } from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getPackageExists } from \"../api\";\n\nexport const PackageSearch = () => {\n    const navigate = useNavigate();\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [searchError, setSearchError] = useState(\"\");\n\n    const handleAnalyze = async () => {\n        // if no query\n        if (searchQuery === \"\") {\n            return;\n        }\n\n        const exists = await getPackageExists(searchQuery);\n\n        if (exists) {\n            navigate(\"/package/\" + searchQuery);\n        } else {\n            setSearchError(\"Thoth does not know about that package\");\n        }\n    };\n\n    const handleChange = (\n        e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n        setSearchQuery(e.target.value);\n        if (searchError !== \"\") {\n            setSearchError(\"\");\n        }\n    };\n\n    return (\n        <Grid container justifyContent=\"center\">\n            <Grid alignSelf=\"flex-start\" item xs={12}>\n                <Typography\n                    color=\"error\"\n                    variant=\"body1\"\n                    sx={{ minHeight: 30 }}\n                >\n                    {searchError ?? \"\"}\n                </Typography>\n            </Grid>\n            <Grid container spacing={2} item xs={12}>\n                <Grid item xs={12} md={10}>\n                    <SearchBar\n                        error={searchError !== \"\"}\n                        onChange={e => handleChange(e)}\n                        helpertext={\"Search for a Python package\"}\n                        type=\"search\"\n                        boxprops={{ mr: 2 }}\n                        lefticon={<SearchRoundedIcon />}\n                        onEnter={handleAnalyze}\n                    />\n                </Grid>\n                <Grid item xs={12} md={2}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => handleAnalyze()}\n                        sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                    >\n                        <b>Analyze</b>\n                    </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { useMemo } from \"react\";\n\ninterface IComboBox {\n    suggestions: string[];\n    label: string;\n    help: string;\n    required: boolean;\n    error: boolean;\n    value: string | { title: string; inputValue?: string };\n    setValue: (e: { title: string; inputValue?: string } | null) => void;\n}\n\nconst filter = createFilterOptions<{ title: string; inputValue?: string }>();\n\nexport default function ComboBox({\n    suggestions,\n    label,\n    help,\n    required,\n    error,\n    value,\n    setValue,\n}: IComboBox) {\n    const suggestions_mapped = useMemo<\n        { title: string; inputValue?: string }[]\n    >(() => {\n        return suggestions.map(suggestion => {\n            return {\n                title: suggestion,\n            };\n        });\n    }, [suggestions]);\n\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(event, newValue) => {\n                if (typeof newValue === \"string\") {\n                    setValue({ title: newValue });\n                } else if (newValue && newValue.inputValue) {\n                    // Create a new value from the user input\n                    setValue({ title: newValue.inputValue });\n                } else {\n                    setValue(newValue);\n                }\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n\n                if (params.inputValue !== \"\") {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        title: `Add \"${params.inputValue}\"`,\n                    });\n                }\n\n                return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            id=\"free-solo-with-text-demo\"\n            options={suggestions_mapped ?? []}\n            getOptionLabel={option => {\n                // Value selected with enter, right from the input\n                if (typeof option === \"string\") {\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    return option.inputValue;\n                }\n                // Regular option\n                return option.title;\n            }}\n            renderOption={(props, option) => <li {...props}>{option.title}</li>}\n            freeSolo\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    fullWidth\n                    label={label}\n                    required={required}\n                    error={error}\n                    helperText={help}\n                />\n            )}\n        />\n    );\n}\n","import {\n    Button,\n    Collapse,\n    Grid,\n    Paper,\n    TextField,\n    Typography,\n} from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport React, { useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { postAdvise } from \"../api\";\nimport ComboBox from \"./ComboBox/ComboBox\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport { components } from \"lib/schema\";\n\ninterface IAdviseState {\n    error: { [key: string]: string | undefined };\n    id?: string;\n    pipfile?: string;\n    pipfileLock?: string;\n    loading: boolean;\n    lookupType: string;\n    operating_system_name: string;\n    operating_system_version: string;\n    python_version: string;\n    cuda_version: string;\n    cudnn_version: string;\n    mkl_version: string;\n    name: string;\n    openblas_version: string;\n    openmpi_version: string;\n    base_image: string;\n}\n\nfunction reducer(state: IAdviseState, action: { [key: string]: any }) {\n    switch (action.type) {\n        case \"loading\":\n            return { ...state, loading: action.payload };\n        case \"error\":\n            return {\n                ...state,\n                error: { ...state.error, [action.param]: action.payload },\n            };\n        case \"clear-error\":\n            state.error = {};\n            return state;\n        case \"input\":\n            return {\n                ...state,\n                [action.param]: action.payload,\n                error: { ...state.error, [action.param]: undefined },\n            };\n        default:\n            throw new Error(\"Advise state dispatch error\");\n    }\n}\n\nexport const initState: IAdviseState = {\n    error: {},\n    loading: false,\n    lookupType: \"id\",\n    operating_system_name: \"ubi\",\n    operating_system_version: \"8\",\n    python_version: \"3.8\",\n    cuda_version: \"\",\n    cudnn_version: \"\",\n    mkl_version: \"\",\n    name: \"\",\n    openblas_version: \"\",\n    openmpi_version: \"\",\n    base_image: \"\",\n};\n\nexport const AdviseCreation = () => {\n    const navigate = useNavigate();\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    const isValid = () => {\n        if (state.lookupType === \"id\") {\n            if (!state.id || state.id === \"\") {\n                dispatch({\n                    type: \"error\",\n                    param: \"id\",\n                    payload: \"Field cant be empty\",\n                });\n                return false;\n            }\n        } else {\n            let valid = true;\n            if (!state.pipfile) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfile\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n            if (!state.pipfileLock) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfileLock\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n            if (!state.name) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"name\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n\n            return valid;\n        }\n\n        return true;\n    };\n\n    const handleAnalyze = async () => {\n        if (state.loading || !isValid()) {\n            return;\n        }\n\n        if (state.lookupType === \"id\") {\n            navigate(\"/advise/\" + state.id);\n        } else {\n            dispatch({ type: \"loading\", payload: true });\n            const runtime_environment: components[\"schemas\"][\"RuntimeEnvironment\"] =\n                {\n                    operating_system: {\n                        name: state.operating_system_name,\n                        version: state.operating_system_version,\n                    },\n                    python_version: state.python_version,\n                    base_image: state.base_image,\n                    cuda_version: state.cuda_version,\n                    cudnn_version: state.cudnn_version,\n                    mkl_version: state.mkl_version,\n                    name: state.name,\n                    openblas_version: state.openblas_version,\n                    openmpi_version: state.openmpi_version,\n                };\n\n            (\n                Object.keys(runtime_environment) as Array<\n                    keyof typeof runtime_environment\n                >\n            ).forEach(key => {\n                if (runtime_environment[key] === \"\") {\n                    delete runtime_environment[key];\n                }\n            });\n            if (\n                runtime_environment?.[\"operating_system\"]?.[\"name\"] === \"\" ||\n                runtime_environment?.[\"operating_system\"]?.[\"version\"] === \"\"\n            ) {\n                delete runtime_environment[\"operating_system\"];\n            }\n\n            if (!state.pipfile) {\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfile\",\n                    payload: \"Pipfile is required\",\n                });\n            } else if (!state.pipfileLock) {\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfileLock\",\n                    payload: \"Pipfile.lock is required\",\n                });\n            } else {\n                postAdvise(\n                    state.pipfile,\n                    state.pipfileLock,\n                    runtime_environment,\n                )\n                    .then(response => {\n                        dispatch({ type: \"loading\", payload: false });\n                        navigate(\n                            \"/advise/\" + response.data.analysis_id + \"/summary\",\n                        );\n                    })\n                    .catch(error => {\n                        dispatch({ type: \"loading\", payload: false });\n                        if (error?.response?.status === 400) {\n                            if (\n                                error?.response?.data?.error?.includes(\n                                    \"Pipfile.lock\",\n                                )\n                            ) {\n                                dispatch({\n                                    type: \"error\",\n                                    param: \"pipfileLock\",\n                                    payload: error?.response?.data?.error,\n                                });\n                            } else if (\n                                error?.response?.data?.error?.includes(\n                                    \"Pipfile\",\n                                )\n                            ) {\n                                dispatch({\n                                    type: \"error\",\n                                    param: \"pipfile\",\n                                    payload: error?.response?.data?.error,\n                                });\n                            }\n                        }\n                    });\n            }\n        }\n    };\n\n    return (\n        <>\n            <Collapse in={state.lookupType === \"id\"}>\n                <>\n                    <Grid container justifyContent=\"center\">\n                        <Grid item xs={12}>\n                            <Typography\n                                color=\"error\"\n                                variant=\"body1\"\n                                sx={{ minHeight: 30 }}\n                            >\n                                {state.error?.id}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing={2}>\n                            <Grid item xs={12} md={10}>\n                                <SearchBar\n                                    error={state.error?.id !== undefined}\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"id\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    helpertext={\"Analysis ID\"}\n                                    type=\"search\"\n                                    boxprops={{ marginRight: 2 }}\n                                    lefticon={<SearchRoundedIcon />}\n                                    onEnter={handleAnalyze}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={2}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => handleAnalyze()}\n                                    sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                                >\n                                    <b>Analyze</b>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"manual\",\n                            })\n                        }\n                    >\n                        New Advise\n                    </Button>\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"manual\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Advise Parameters\n                    </Typography>\n                    <Paper\n                        sx={{\n                            backgroundColor: \"white\",\n                            padding: 3,\n                            marginBottom: 5,\n                        }}\n                        variant=\"outlined\"\n                    >\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <SearchBar\n                                    label={\n                                        state.error?.pipfile\n                                            ? state.error?.pipfile\n                                            : \"Pipfile contents\"\n                                    }\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"pipfile\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    error={state.error?.pipfile !== undefined}\n                                    multiline\n                                    rows={8}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <SearchBar\n                                    label={\n                                        state.error?.pipfileLock\n                                            ? state.error?.pipfileLock\n                                            : \"Pipfile.lock contents\"\n                                    }\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"pipfileLock\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    error={\n                                        state.error?.pipfileLock !== undefined\n                                    }\n                                    multiline\n                                    rows={8}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Grid container mt={4} spacing={2}>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"base_image\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.base_image}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Base Image\"\n                                    required={false}\n                                    helperText=\"A base container image used to run the application.\"\n                                    error={\n                                        state.error?.base_image !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"cuda_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.cuda_version}\n                                    suggestions={[\"9.0\"]}\n                                    label=\"CUDA Version\"\n                                    required={false}\n                                    help=\"Nvidia CUDA version which the application uses.\"\n                                    error={\n                                        state.error?.cuda_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"cudnn_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.cudnn_version}\n                                    suggestions={[\"8\"]}\n                                    label=\"cuDNN Version\"\n                                    required={false}\n                                    help=\"NVIDIA cuDNN version used, if any.\"\n                                    error={\n                                        state.error?.cudnn_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"mkl_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.mkl_version}\n                                    suggestions={[\"2021.1.1\"]}\n                                    label=\"MKL Version\"\n                                    required={false}\n                                    help=\"Intel® Math Kernel Library version used, if any.\"\n                                    error={\n                                        state.error?.mkl_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"name\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.name}\n                                    suggestions={[\"ubi:8-prod\"]}\n                                    label=\"Name\"\n                                    required={true}\n                                    help=\"User defined name of the runtime environment.\"\n                                    error={state.error?.name !== undefined}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"openblas_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.openblas_version}\n                                    suggestions={[\"0.3.13\"]}\n                                    label=\"OpenBLAS Version\"\n                                    required={false}\n                                    help=\"OpenBLAS version used, if any.\"\n                                    error={\n                                        state.error?.openblas_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"openmpi_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.openmpi_version}\n                                    suggestions={[\"4.1\"]}\n                                    label=\"Open MPI Version\"\n                                    required={false}\n                                    help=\"Open MPI version used, if any.\"\n                                    error={\n                                        state.error?.openmpi_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"operating_system_name\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.operating_system_name}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Operating System Name\"\n                                    required={false}\n                                    helperText=\"Operating system name used.\"\n                                    error={\n                                        state.error?.operating_system_name !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"operating_system_version\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.operating_system_version}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Operating System Version\"\n                                    required={false}\n                                    helperText=\"Operating system version used.\"\n                                    error={\n                                        state.error\n                                            ?.operating_system_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"python_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.python_version}\n                                    suggestions={[\n                                        \"2.7\",\n                                        \"3.6\",\n                                        \"3.7\",\n                                        \"3.8\",\n                                        \"3.9\",\n                                    ]}\n                                    label=\"Python Version\"\n                                    required={false}\n                                    help=\"Python version on which the application runs on.\"\n                                    error={\n                                        state.error?.python_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid container item xs={12} spacing={2}>\n                                <Grid item xs={6} md={6}>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        onClick={() =>\n                                            dispatch({\n                                                type: \"input\",\n                                                param: \"lookupType\",\n                                                payload: \"id\",\n                                            })\n                                        }\n                                        sx={{\n                                            minHeight: \"100%\",\n                                            minWidth: \"100%\",\n                                        }}\n                                    >\n                                        <b>Cancel</b>\n                                    </Button>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <LoadingButton\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => handleAnalyze()}\n                                        loading={state.loading}\n                                        sx={{\n                                            minHeight: \"100%\",\n                                            minWidth: \"100%\",\n                                        }}\n                                    >\n                                        <b>Analyze</b>\n                                    </LoadingButton>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </>\n            </Collapse>\n        </>\n    );\n};\n","/**\n * Get the time between now and a date in a string format.\n *\n * @param date\n */\nexport default function timeSince(date: Date) {\n    const startTime = new Date();\n    const seconds = Math.floor((startTime.valueOf() - date.valueOf()) / 1000);\n\n    let interval = seconds / 3.154e7;\n\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" year\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 2.628e6;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" month\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 86400;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" day\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 3600;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" hour\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 60;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" minute\" + (num !== 1 ? \"s\" : \"\");\n    }\n    const num = Math.floor(seconds);\n\n    return num + \" second\" + (num !== 1 ? \"s\" : \"\");\n}\n","import React from \"react\";\n\nexport const NotFound = () => {\n    return <div>404</div>;\n};\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\nimport Paper from \"@mui/material/Paper\";\nimport timeSince from \"utils/timeSince\";\nimport ArrowForwardRoundedIcon from \"@mui/icons-material/ArrowForwardRounded\";\nimport { IconButton } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useContainerImages } from \"../api\";\nimport { useMemo } from \"react\";\nimport { CircularProgress } from \"@mui/material\";\nimport { NotFound } from \"routes/NotFound\";\n\nconst headCells = [\n    {\n        id: \"environment_name\",\n        label: \"Image Name\",\n    },\n    {\n        id: \"os_name\",\n        label: \"OS Name\",\n    },\n    {\n        id: \"os_version\",\n        label: \"OS Version\",\n    },\n    {\n        id: \"python_version\",\n        label: \"Python Version\",\n    },\n    {\n        id: \"datetime\",\n        label: \"Last Updated\",\n    },\n];\n\nfunction descendingComparator(\n    a: { [key: string]: any },\n    b: { [key: string]: any },\n    orderBy: string,\n) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order: \"desc\" | \"asc\", orderBy: string) {\n    return order === \"desc\"\n        ? (a: { [key: string]: any }, b: { [key: string]: any }) =>\n              descendingComparator(a, b, orderBy)\n        : (a: { [key: string]: any }, b: { [key: string]: any }) =>\n              -descendingComparator(a, b, orderBy);\n}\n\ninterface IEnhancedTableHead {\n    order: \"asc\" | \"desc\";\n    orderBy: typeof headCells[number][\"id\"];\n    onRequestSort: (property: typeof headCells[number][\"id\"]) => void;\n    rowCount: number;\n}\n\nfunction EnhancedTableHead(props: IEnhancedTableHead) {\n    const { order, orderBy, onRequestSort } = props;\n    const createSortHandler = (property: typeof headCells[number][\"id\"]) => {\n        onRequestSort(property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={() => createSortHandler(headCell.id)}\n                        >\n                            <b>{headCell.label}</b>\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                <TableCell />\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default function ImageTable() {\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] =\n        React.useState<typeof headCells[number][\"id\"]>(\"datetime\");\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const navigate = useNavigate();\n\n    const images = useContainerImages({ useErrorBoundary: false });\n\n    const rows = useMemo(() => {\n        if (images?.data?.data?.container_images) {\n            return images?.data?.data?.container_images.map(image => {\n                return {\n                    ...image,\n                    date: timeSince(new Date(image.datetime)) + \" ago\",\n                };\n            });\n        } else {\n            return [];\n        }\n    }, [images?.data]);\n\n    const handleRequestSort = (property: typeof headCells[number][\"id\"]) => {\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n        setOrderBy(property);\n    };\n\n    const handleChangePage = (\n        event: any,\n        newPage: React.SetStateAction<number>,\n    ) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: { target: { value: string } }) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows =\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    const handleAnalyze = (\n        package_extract_document_id: string,\n        environment_name: string | null,\n    ) => {\n        navigate(\"/image/\" + package_extract_document_id, {\n            state: { image_name: environment_name },\n        });\n    };\n\n    if (images.isError) {\n        return <NotFound />;\n    }\n\n    if (!rows) {\n        return (\n            <div className=\"w-full h-48 flex justify-center items-center\">\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    return (\n        <Box sx={{ width: \"100%\" }}>\n            <Paper sx={{ width: \"100%\", mb: 2 }}>\n                <TableContainer>\n                    <Table sx={{ minWidth: 750 }} size=\"medium\">\n                        <EnhancedTableHead\n                            order={order as IEnhancedTableHead[\"order\"]}\n                            orderBy={orderBy}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {rows\n                                .slice()\n                                .sort(\n                                    getComparator(\n                                        order as IEnhancedTableHead[\"order\"],\n                                        orderBy,\n                                    ),\n                                )\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage,\n                                )\n                                .map((row, index) => {\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            tabIndex={-1}\n                                            key={\n                                                (row?.environment_name ?? \"\") +\n                                                index\n                                            }\n                                        >\n                                            <TableCell\n                                                component=\"th\"\n                                                id={labelId}\n                                                scope=\"row\"\n                                            >\n                                                {row.environment_name}\n                                            </TableCell>\n                                            <TableCell align=\"left\">\n                                                {row.os_name}\n                                            </TableCell>\n                                            <TableCell align=\"left\">\n                                                {row.os_version}\n                                            </TableCell>\n                                            <TableCell align=\"left\">\n                                                {row.python_version}\n                                            </TableCell>\n                                            <TableCell align=\"left\">\n                                                {row.date}\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <IconButton\n                                                    onClick={() =>\n                                                        handleAnalyze(\n                                                            row.package_extract_document_id,\n                                                            row.environment_name,\n                                                        )\n                                                    }\n                                                >\n                                                    <ArrowForwardRoundedIcon />\n                                                </IconButton>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow\n                                    style={{\n                                        height: 53 * emptyRows,\n                                    }}\n                                >\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 50]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </Box>\n    );\n}\n","import { Button, Collapse, Grid, Typography } from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport React, { useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { postImageAnalyze } from \"../api\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport ImageTable from \"./ImageTable\";\n\ninterface ImageSearchState {\n    error: { [key: string]: string | undefined };\n    loading: boolean;\n    lookupType: string;\n    id: string;\n}\n\nfunction reducer(state: ImageSearchState, action: { [key: string]: any }) {\n    switch (action.type) {\n        case \"loading\":\n            return { ...state, loading: action.payload };\n        case \"error\":\n            return {\n                ...state,\n                error: { ...state.error, [action.param]: action.payload },\n            };\n        case \"clear-error\":\n            state.error = {};\n            return state;\n        case \"input\":\n            return {\n                ...state,\n                [action.param]: action.payload,\n                error: { ...state.error, [action.param]: undefined },\n            };\n        default:\n            throw new Error(\"Image state dispatch error\");\n    }\n}\n\nconst initState: ImageSearchState = {\n    error: {},\n    loading: false,\n    lookupType: \"id\",\n    id: \"\",\n};\n\nexport const ImageSearch = () => {\n    const navigate = useNavigate();\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    const handleAnalyze = async () => {\n        if (state.loading) {\n            return;\n        }\n\n        if (state.id.includes(\"package-extract\")) {\n            navigate(\"/image/\" + state.id);\n            return;\n        }\n\n        dispatch({ type: \"loading\", payload: true });\n\n        postImageAnalyze(state.id)\n            .then(response => {\n                dispatch({ type: \"loading\", payload: false });\n                navigate(\"/image/\" + response.data.analysis_id, {\n                    state: { image_name: state.id },\n                });\n            })\n            .catch(error => {\n                dispatch({ type: \"loading\", payload: false });\n                if (error?.response?.status === 400) {\n                    dispatch({\n                        type: \"error\",\n                        param: \"id\",\n                        payload:\n                            error?.response?.data?.error ??\n                            \"An unknown error occurred\",\n                    });\n                }\n            });\n    };\n\n    return (\n        <>\n            <Collapse in={state.lookupType === \"id\"}>\n                <>\n                    <Grid container justifyContent=\"center\">\n                        <Grid item xs={12}>\n                            <Typography\n                                color=\"error\"\n                                variant=\"body1\"\n                                sx={{ minHeight: 30 }}\n                            >\n                                {state.error?.id}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing={2}>\n                            <Grid item xs={12} md={10}>\n                                <SearchBar\n                                    error={state.error?.id != undefined}\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"id\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    helpertext={\"Analysis ID or image name\"}\n                                    type=\"search\"\n                                    boxprops={{ mr: 2 }}\n                                    lefticon={<SearchRoundedIcon />}\n                                    onEnter={handleAnalyze}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={2}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={handleAnalyze}\n                                    sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                                >\n                                    <b>Analyze</b>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"lookup\",\n                            })\n                        }\n                    >\n                        Lookup Thoth Images\n                    </Button>\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"lookup\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Available Thoth Container Images\n                    </Typography>\n                    <ImageTable />\n                </>\n            </Collapse>\n        </>\n    );\n};\n","// react\nimport React, { useState } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Grid,\n    Divider,\n    ToggleButtonGroup,\n    ToggleButton,\n    Box,\n} from \"@mui/material\";\n\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\n// local\nimport TabPanel from \"components/Elements/TabPanel\";\nimport logo from \"assets/thoth-logo.png\";\n\nimport { PackageSearch, AdviseCreation, ImageSearch } from \"../components\";\n\nexport const Home = () => {\n    // utility states\n    const [mode, setMode] = useState<string>(\"package\");\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n\n    // change mode view\n    const handleMode = (event: any, newMode: string) => {\n        if (newMode) {\n            setMode(newMode);\n        }\n    };\n\n    return (\n        <div\n            style={{\n                maxWidth: \"1000px\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n            }}\n        >\n            <Grid container justifyContent=\"center\">\n                <Grid item>\n                    <Box sx={{ marginTop: 10 }}>\n                        <img\n                            alt=\"Thoth Logo\"\n                            src={logo}\n                            height={!matches ? \"auto\" : 300}\n                            width={\"100%\"}\n                        />\n                    </Box>\n                </Grid>\n                <Grid container item justifyContent=\"center\" mt={5} spacing={0}>\n                    <Grid item xs={12} alignItems=\"left\" mb={3}>\n                        <Typography variant=\"h4\">\n                            <b>Thoth Search</b>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} alignItems=\"left\">\n                        <Typography variant=\"subtitle1\">\n                            Thoth Search is a tool that runs analysis on a\n                            Python application. It utilizes package metadata and\n                            Thoth Adviser to analyse and recommend a software\n                            stack. You can run analysis on an entire Python\n                            application using a properly formatted Pipfile and\n                            Pipfile.lock. Alternatively, you can analyse a\n                            single Python package to see what Thoth knows about\n                            the package.\n                        </Typography>\n                    </Grid>\n                    <Grid item textAlign=\"center\" xs={12} mt={3} mb={4}>\n                        <ToggleButtonGroup\n                            value={mode}\n                            exclusive\n                            onChange={handleMode}\n                            size={!matches ? \"small\" : \"large\"}\n                        >\n                            <ToggleButton value=\"package\">\n                                <b>package</b>\n                            </ToggleButton>\n                            <ToggleButton value=\"environment\">\n                                <b>environment</b>\n                            </ToggleButton>\n                            <ToggleButton value=\"image\">\n                                <b>image</b>\n                            </ToggleButton>\n                        </ToggleButtonGroup>\n                    </Grid>\n\n                    <Grid item xs={12} sx={{ marginBottom: 3 }}>\n                        <Divider />\n                        <TabPanel value={mode} index=\"package\">\n                            <PackageSearch />\n                        </TabPanel>\n                        <TabPanel value={mode} index=\"environment\">\n                            <AdviseCreation />\n                        </TabPanel>\n                        <TabPanel value={mode} index=\"image\">\n                            <ImageSearch />\n                        </TabPanel>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n","// react\nimport React from \"react\";\n\ninterface IProps {\n    /** card header info */\n    cardMeta: {\n        /** card title */\n        title: string;\n        /** optional subtitle */\n        subTitle?: string;\n    };\n    /** optional card action component (usually some button) */\n    cardAction?: React.ReactNode;\n    /** Card body content */\n    cardBody: React.ReactNode;\n}\nimport { Card, CardContent, CardHeader, Typography } from \"@mui/material\";\n\n/** Card template for metric cards. */\nconst InfoCard = ({ cardMeta, cardBody, cardAction }: IProps) => {\n    return (\n        <Card>\n            <CardHeader\n                action={cardAction}\n                title={<Typography variant=\"h5\">{cardMeta.title}</Typography>}\n                subheader={cardMeta.subTitle}\n            />\n            <CardContent>{cardBody}</CardContent>\n        </Card>\n    );\n};\n\nexport default InfoCard;\n","import React from \"react\";\n\n// material-ui\nimport { Link, Stack, BoxProps } from \"@mui/material\";\n\ninterface IIconText extends BoxProps {\n    /** The text shown */\n    text: string;\n    /** The icon component to be displayed */\n    icon: React.ReactNode;\n    /** Optional link if text is selected */\n    link?: string;\n}\n\n/**\n * Text with an icon to the right of it.\n */\nconst IconText = ({ text, icon, link, ...props }: IIconText) => {\n    return (\n        <Stack {...props} direction=\"row\" spacing={1} alignItems=\"center\">\n            {icon}\n            <Link\n                underline=\"none\"\n                href={link ? link : undefined}\n                variant=\"body2\"\n                align=\"center\"\n            >\n                {text}\n            </Link>\n        </Stack>\n    );\n};\n\nexport default IconText;\n\nIconText.propTypes = {};\n","import React from \"react\";\nimport { Button, Alert, AlertColor } from \"@mui/material\";\n\ninterface ICustomAlert {\n    /** The alert content. */\n    info: {\n        /** Link to navigate to if alert is actioned on. */\n        link: string;\n        /** Text displayed in the alert. */\n        message: string;\n        /** Severity (color) of alert: `[\"ERROR\", \"WARNING\", \"INFO\", \"SUCCESS\"]`. */\n        type: AlertColor;\n    };\n}\n\n/**\n * A custom alert card.\n */\nconst CustomAlert = ({ info, ...props }: ICustomAlert) => {\n    return (\n        <Alert\n            action={\n                <Button color=\"inherit\" size=\"small\" href={info?.link}>\n                    DETAILS\n                </Button>\n            }\n            severity={info.type}\n            {...props}\n        >\n            {info?.message}\n        </Alert>\n    );\n};\n\nexport default CustomAlert;\n","import timeSince from \"utils/timeSince\";\n\n/**\n * Given either a date and time, calculated time since that date.\n * This is used to calculate how long ago an Advisor document was generated or has been generating.\n * It is specific to the document formatting\n *\n * @param finished_at - for when the advise document is completed\n * @param started_at - the time at which the document was started (is preceded by finished at)\n * @param datetime - fallback to datetime\n * @returns {string} - English version of date\n */\nexport const calcTime = (\n    finished_at?: string | null,\n    started_at?: string | null,\n    datetime?: string | null,\n) => {\n    // if status says finished\n    if (finished_at) {\n        return \"Advise finished \" + timeSince(new Date(finished_at)) + \" ago.\";\n    }\n    // if status is pending\n    else if (started_at) {\n        return \"Advise started \" + timeSince(new Date(started_at)) + \" ago.\";\n    }\n    // if status is nulled so use metadata end date\n    else if (datetime) {\n        return (\n            \"Advise finished \" + timeSince(new Date(datetime + \"Z\")) + \" ago.\"\n        );\n    } else {\n        return \"Time started/finished not available\";\n    }\n};\n","// React\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Chip,\n    Button,\n    Collapse,\n    ChipProps,\n    AlertColor,\n    Stack,\n} from \"@mui/material\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport FeedRoundedIcon from \"@mui/icons-material/FeedRounded\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport CustomAlert from \"./CustomAlert\";\n\n// utils\nimport { calcTime } from \"utils/calcTime\";\nimport {\n    AdviseDocumentRequestParams,\n    AdviseDocumentRequestResponseSuccess,\n} from \"../../api\";\n\ninterface IAdviseHeader {\n    /** the Advise document id*/\n    adviseDocument?: AdviseDocumentRequestResponseSuccess;\n    /** the Advise document logs*/\n    logs?: string | null;\n}\n\n/**\n * Displays basic Advise document information and\n * displays any errors, info, or warnings that came up\n * in the document generation.\n */\nexport const AdviseHeader = ({ adviseDocument, logs }: IAdviseHeader) => {\n    const [expandAlerts, setExpandAlerts] = React.useState<boolean>(false);\n    const [showLogs, setShowLogs] = React.useState<boolean>(false);\n    const [selectedLine, setSelectedLine] = React.useState<number>();\n\n    // get status of the report\n    const [statusText, statusColor] = useMemo<\n        [string, ChipProps[\"color\"]]\n    >(() => {\n        // if report is done\n        if (adviseDocument?.result?.report) {\n            if (adviseDocument.result.report.ERROR) {\n                return [\"ERROR\", \"error\"];\n            } else {\n                return [\"COMPLETE\", \"success\"];\n            }\n        } else if (adviseDocument?.result?.error) {\n            return [\"ERROR\", \"error\"];\n        }\n        // if report is not done\n        else if (adviseDocument?.status?.state) {\n            return [adviseDocument.status.state.toUpperCase(), \"info\"];\n        } else {\n            return [\"UNKNOWN\", undefined];\n        }\n    }, [adviseDocument]);\n\n    // get alerts from report\n    const alerts = useMemo(() => {\n        if (adviseDocument?.result?.report?.stack_info) {\n            return adviseDocument?.result?.report.stack_info\n                .filter(alert => alert.type === \"ERROR\")\n                .map(alert => {\n                    return {\n                        ...alert,\n                        type: alert.type.toLowerCase() as AlertColor,\n                    };\n                });\n        } else {\n            return [];\n        }\n    }, [adviseDocument]);\n\n    return (\n        <div>\n            <Typography variant=\"h4\" mb={1}>\n                <b>\n                    {adviseDocument?.metadata?.document_id ??\n                        (\n                            adviseDocument?.parameters as AdviseDocumentRequestParams\n                        )?.analysis_id}\n                </b>\n            </Typography>\n            <Stack direction=\"row\" spacing={2} alignItems=\"center\" mb={3}>\n                <Chip label={statusText} color={statusColor} />\n                <IconText\n                    text={calcTime(\n                        adviseDocument?.status?.finished_at,\n                        adviseDocument?.status?.started_at,\n                        adviseDocument?.metadata?.datetime,\n                    )}\n                    icon={<AccessTimeIcon />}\n                />\n                <Button\n                    sx={{ marginLeft: 2 }}\n                    onClick={() => setShowLogs(!showLogs)}\n                >\n                    <IconText text=\"Logs\" icon={<FeedRoundedIcon />} />\n                </Button>\n            </Stack>\n            <Collapse in={showLogs}>\n                {logs?.split(\"\\n\").map((line, i) => {\n                    return (\n                        <Typography\n                            key={i}\n                            noWrap={selectedLine !== i}\n                            onClick={() =>\n                                setSelectedLine(\n                                    selectedLine === i ? undefined : i,\n                                )\n                            }\n                            variant=\"body2\"\n                            sx={{\n                                backgroundColor:\n                                    selectedLine === i\n                                        ? \"lightyellow\"\n                                        : i % 2 === 0\n                                        ? \"lightgray\"\n                                        : \"unset\",\n                            }}\n                        >\n                            {line}\n                        </Typography>\n                    );\n                }) ?? \"Advisor log is not available.\"}\n            </Collapse>\n            <Typography variant={\"subtitle2\"} mb={2}>\n                {adviseDocument?.result?.report?.ERROR ??\n                    adviseDocument?.result?.error_msg}\n            </Typography>\n            {alerts?.length > 0 ? (\n                <Stack direction=\"column\" spacing={1}>\n                    <CustomAlert info={alerts[0]} />\n                    <Collapse in={expandAlerts} timeout=\"auto\" unmountOnExit>\n                        <Stack direction=\"column\" spacing={1}>\n                            {alerts?.slice(1).map((info, i) => {\n                                return <CustomAlert key={i} info={info} />;\n                            })}\n                        </Stack>\n                    </Collapse>\n\n                    <Button\n                        color=\"inherit\"\n                        size=\"small\"\n                        sx={{ alignSelf: \"flex-start\" }}\n                        onClick={() => setExpandAlerts(!expandAlerts)}\n                    >\n                        {alerts?.length > 1\n                            ? expandAlerts\n                                ? \"LESS\"\n                                : \"MORE\"\n                            : null}\n                    </Button>\n                </Stack>\n            ) : null}\n\n            {statusText === \"COMPLETE\" ? (\n                <Typography variant=\"body1\" sx={{ color: \"text.secondary\" }}>\n                    Thoth has added and removed packages from the original\n                    Pipfile.lock, resulting in a <i>new</i> Pipfile.lock. Switch\n                    between the new and old Python environments to see the\n                    differences.\n                </Typography>\n            ) : null}\n        </div>\n    );\n};\n","import React from \"react\";\n\nimport { ToggleButtonGroup, ToggleButton } from \"@mui/material\";\n\ninterface ICustomCardAction {\n    /** The state variable the buttons use to control the active value */\n    value: string;\n    /** The callback function that runs when a button is changed */\n    onChange: (event: React.MouseEvent<HTMLElement>, value: any) => void;\n}\n/**\n * A button group for toggling between old and new dependency graphs.\n * It takes two parameters, a callback function and a state variable.\n */\nexport const CustomCardAction = ({ value, onChange }: ICustomCardAction) => {\n    return (\n        <ToggleButtonGroup\n            value={value}\n            exclusive\n            size=\"small\"\n            onChange={onChange}\n        >\n            <ToggleButton value=\"oldGraph\">Old</ToggleButton>\n            <ToggleButton value=\"newGraph\">New</ToggleButton>\n        </ToggleButtonGroup>\n    );\n};\n","function descendingComparator(\n    a: { [x: string]: number },\n    b: { [x: string]: number },\n    orderBy: string | number,\n) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nexport function getComparator(order: string, orderBy: string) {\n    return order === \"desc\"\n        ? (a: { [x: string]: number }, b: { [x: string]: number }) =>\n              descendingComparator(a, b, orderBy)\n        : (a: { [x: string]: number }, b: { [x: string]: number }) =>\n              -descendingComparator(a, b, orderBy);\n}\n\nexport function stableSort(\n    array: any[],\n    comparator: {\n        (a: { [x: string]: number }, b: { [x: string]: number }): number;\n        (arg0: any, arg1: any): any;\n    },\n) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n","import React from \"react\";\n\nimport {\n    TableHead,\n    TableRow,\n    TableSortLabel,\n    Box,\n    TableCell,\n} from \"@mui/material\";\n\nimport { visuallyHidden } from \"@mui/utils\";\n\nconst headCells = [\n    {\n        id: \"name\",\n        numeric: false,\n        label: \"Package\",\n    },\n    {\n        id: \"depth\",\n        numeric: true,\n        label: \"Depth\",\n    },\n    {\n        id: \"license\",\n        numeric: false,\n        label: \"License\",\n    },\n    {\n        id: \"dependencies\",\n        numeric: true,\n        label: \"Direct Dependencies\",\n    },\n];\n\ninterface IEnhancedTableHead {\n    /** the function used to sort an individual column */\n    onRequestSort: (c: string) => void;\n    /** the order in which the column is sorted on*/\n    order: \"asc\" | \"desc\";\n    /** The column in which to order the table by */\n    orderBy: string;\n}\n\n/**\n * A specific custom table header for packages.\n * It handles sorting individual columns.\n */\nfunction EnhancedTableHead({\n    order,\n    orderBy,\n    onRequestSort,\n}: IEnhancedTableHead) {\n    const createSortHandler = (property: string) => {\n        onRequestSort(property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding=\"normal\"\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={() => createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <Box component=\"span\" sx={visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </Box>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default EnhancedTableHead;\n","import React, { useState } from \"react\";\nimport { Grid, Paper, Typography } from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport { AdviseTableView, SelectedPackage } from \"../components\";\nimport { MergedGraph } from \"lib/interfaces/Graph\";\n\ntype SelectedPackage = {\n    selected: string;\n    setSelected: (c: string) => void;\n};\n\nexport const SelectedPackageContext = React.createContext<SelectedPackage>(\n    {} as SelectedPackage,\n);\n\ninterface IAdviseDetails {\n    mergedGraph?: MergedGraph;\n}\n\nexport const AdviseDetails = ({ mergedGraph }: IAdviseDetails) => {\n    const [search, setSearch] = useState<string>(\"\");\n    const [selected, setSelected] = useState<string>(\"\");\n\n    const handleSearch = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n        setSearch(event.target.value);\n    };\n\n    if (!mergedGraph) {\n        return null;\n    }\n\n    return (\n        <SelectedPackageContext.Provider value={{ selected, setSelected }}>\n            <Grid\n                container\n                spacing={2}\n                justifyContent=\"center\"\n                alignItems=\"flex-start\"\n                mt={2}\n            >\n                <Grid item sm={12} md={6}>\n                    <Paper sx={{ padding: 2 }}>\n                        <SearchBar\n                            onChange={handleSearch}\n                            lefticon={<SearchRoundedIcon />}\n                        />\n                        <AdviseTableView\n                            search={search}\n                            filteredGraph={mergedGraph}\n                        />\n                    </Paper>\n                </Grid>\n                <Grid item sm={12} md={6}>\n                    {!selected ? (\n                        <Typography variant=\"body1\" align=\"center\">\n                            No package selected\n                        </Typography>\n                    ) : (\n                        <SelectedPackage mergedGraph={mergedGraph} />\n                    )}\n                </Grid>\n            </Grid>\n        </SelectedPackageContext.Provider>\n    );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\n\nimport {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TablePagination,\n    TableRow,\n    Typography,\n} from \"@mui/material\";\n\nimport AddRoundedIcon from \"@mui/icons-material/AddRounded\";\nimport RemoveRoundedIcon from \"@mui/icons-material/RemoveRounded\";\nimport CircleOutlinedIcon from \"@mui/icons-material/CircleOutlined\";\n\n// utils\nimport { getComparator, stableSort } from \"./utils\";\n\n// local\nimport EnhancedTableHead from \"./EnhancedTableHead\";\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageMergedNodeValue } from \"lib/interfaces/PackageMergedNodeValue\";\n\ninterface IAdviseTableView {\n    /** the text value used to filter the cells in the table */\n    search: string;\n    filteredGraph: Graph<Node<PackageMergedNodeValue>>;\n}\n\ntype Row = {\n    name: string;\n    key: string;\n    warnings: [];\n    depth: number;\n    license: string;\n    dependencies: number;\n    change: string;\n    summary: string;\n};\n\n/**\n * The table cells and total structure specific to\n * python packages.\n */\nexport function AdviseTableView({\n    search = \"\",\n    filteredGraph,\n}: IAdviseTableView) {\n    const [order, setOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n    const [orderBy, setOrderBy] = React.useState<string>(\"name\");\n    const [page, setPage] = React.useState<number>(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState<number>(25);\n    const [rows, setRows] = React.useState<Row[]>([]);\n\n    const { selected, setSelected } = useContext(SelectedPackageContext) ?? {\n        setSelected: () => console.log(\"missing callback\"),\n    };\n\n    // format data\n    useEffect(() => {\n        if (!filteredGraph) {\n            return;\n        }\n\n        setPage(0);\n\n        const newRows: Row[] = [];\n        filteredGraph.nodes.forEach(node => {\n            if (node.value.depth === -1) {\n                return;\n            }\n            newRows.push({\n                name: node.value.label ?? node.key,\n                key: node.key,\n                warnings: [],\n                depth: node.value?.depth ?? -1,\n                license: node?.value?.metadata?.License ?? \"\",\n                dependencies: node.adjacents.size,\n                change: node.value?.change,\n                summary: node?.value?.metadata?.Summary ?? \"\",\n            });\n        });\n        setRows(newRows);\n    }, [filteredGraph]);\n\n    const handleRequestSort = (property: string) => {\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n        setOrderBy(property);\n    };\n\n    const handleChangePage = (\n        event: React.MouseEvent<HTMLButtonElement> | null,\n        newPage: React.SetStateAction<number>,\n    ) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows =\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <Box sx={{ width: \"100%\" }}>\n            <TableContainer>\n                <Table sx={{ minWidth: 750 }} size=\"medium\">\n                    <EnhancedTableHead\n                        order={order}\n                        orderBy={orderBy}\n                        onRequestSort={handleRequestSort}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .filter((row: { name: string }) =>\n                                row.name.includes(search),\n                            )\n                            .slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage,\n                            )\n                            .map((row: Row, index: number) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                const iconColor =\n                                    row.change === \"removed\"\n                                        ? \"error\"\n                                        : row.change === \"added\"\n                                        ? \"success\"\n                                        : undefined;\n                                return (\n                                    <React.Fragment key={row.name}>\n                                        <TableRow\n                                            hover\n                                            onClick={() => setSelected(row.key)}\n                                            tabIndex={-1}\n                                            selected={selected === row.key}\n                                        >\n                                            <TableCell\n                                                component=\"th\"\n                                                id={labelId}\n                                                scope=\"row\"\n                                            >\n                                                <Box display=\"flex\">\n                                                    {row.change ===\n                                                    \"removed\" ? (\n                                                        <RemoveRoundedIcon\n                                                            color={iconColor}\n                                                        />\n                                                    ) : row.change ===\n                                                      \"added\" ? (\n                                                        <AddRoundedIcon\n                                                            color={iconColor}\n                                                        />\n                                                    ) : (\n                                                        <CircleOutlinedIcon />\n                                                    )}\n                                                    <Typography ml={2}>\n                                                        {row.name}\n                                                    </Typography>\n                                                </Box>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                {row.depth}\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                {row.license}\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                {row.dependencies}\n                                            </TableCell>\n                                        </TableRow>\n\n                                        <TableRow>\n                                            <TableCell\n                                                style={{\n                                                    paddingBottom: 0,\n                                                    paddingTop: 0,\n                                                }}\n                                                colSpan={6}\n                                            />\n                                        </TableRow>\n                                    </React.Fragment>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows,\n                                }}\n                            >\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </Box>\n    );\n}\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { Typography } from \"@mui/material\";\n\ninterface ILockfileView {\n    /** The Pipfile.lock json object */\n    file: { default: { [key: string]: unknown } };\n}\n\n/**\n * Renders out a Pipfile.lock file and attaches\n * `<a>` tags to package names, which is used to\n *  scroll to certain spot in the lock file\n */\nexport const LockfileView = ({ file }: ILockfileView) => {\n    return (\n        <Typography variant=\"caption\">\n            <pre>\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: JSON.stringify(file, undefined, 4)?.replaceAll(\n                            new RegExp(\n                                '(\"' +\n                                    Object.keys(file?.default)?.join('\"|\"') +\n                                    '\")',\n                                \"g\",\n                            ),\n                            (match: string) => {\n                                return `<a id=\"${match.slice(\n                                    1,\n                                    -1,\n                                )}\">${match}</a>`;\n                            },\n                        ),\n                    }}\n                />\n            </pre>\n        </Typography>\n    );\n};\n","// react\nimport React from \"react\";\n\nimport { Typography, Grid } from \"@mui/material\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\nimport BookmarkIcon from \"@mui/icons-material/Bookmark\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport { PackageMergedNodeValue } from \"lib/interfaces/PackageMergedNodeValue\";\nimport { Node } from \"lib/interfaces/Node\";\n\ninterface IPopup {\n    node: Node<PackageMergedNodeValue>;\n}\n\n/**\n * Graph hover model appears when you hover over a node on the graph.\n */\nconst Popup = ({ node }: IPopup) => {\n    return (\n        <div>\n            <Grid container alignItems=\"center\">\n                <Grid item xs={6}>\n                    <Typography variant=\"h6\">\n                        <b>{node.value.id}</b>\n                    </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <Typography ml={2} variant=\"body1\">\n                        v{node.value.version ?? \"NaN\"}\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Typography gutterBottom variant=\"body2\">\n                {node.value?.metadata?.Summary ?? \"NaN\"}\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid item>\n                    <IconText\n                        text={node.value?.metadata?.License ?? \"NaN\"}\n                        icon={<GavelIcon />}\n                    />\n                </Grid>\n                <Grid item>\n                    <IconText\n                        ml={2}\n                        text={\n                            node.value?.latestVersion\n                                ? \"Latest version is installed\"\n                                : \"Installed version is NOT the latest.\"\n                        }\n                        icon={<BookmarkIcon />}\n                    />\n                </Grid>\n            </Grid>\n            <Typography variant=\"body2\" mt={2}>\n                {node.value?.justifications?.header}\n            </Typography>\n        </div>\n    );\n};\n\nexport default Popup;\n","// react\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// utils and configs\nimport { options } from \"config\";\n\n// vis-network\nimport { Network, DataSet, Data } from \"vis-network/standalone\";\n\n// local\nimport Popup from \"../Popup\";\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { MergedGraph } from \"lib/interfaces/Graph\";\nimport { PackageMergedNodeValue } from \"../../../../lib/interfaces/PackageMergedNodeValue\";\n\ninterface INetworkGraph {\n    mergedGraph: MergedGraph;\n}\n\n/**\n * Renders a network graph visualization using `vis-network`.\n */\nconst NetworkGraph = ({ mergedGraph, ...props }: INetworkGraph) => {\n    const visJsRef = useRef<HTMLDivElement>(null);\n    const { selected } = useContext(SelectedPackageContext);\n\n    // create the graph\n    useEffect(() => {\n        if (!selected || !mergedGraph) {\n            return;\n        }\n\n        const selectedNode = mergedGraph.nodes.get(selected);\n\n        if (selectedNode) {\n            const nodes = mergedGraph.findAllNodesOnAllPaths(\n                selectedNode,\n                \"*App\",\n            );\n\n            const app_node = mergedGraph.nodes.get(\"*App\");\n            if (app_node) {\n                nodes.set(\"*App\", app_node);\n            }\n\n            // convert to vis graph format\n            const convertedNodes = new DataSet<PackageMergedNodeValue>();\n            nodes.forEach(value => {\n                // popup element\n                const popup = document.createElement(\"div\");\n                ReactDOM.render(<Popup node={value} />, popup);\n\n                // default colors\n                let color = value.value.color ?? options.nodes.color.background;\n                let font = undefined;\n\n                // if node is root\n                if (value.key === \"*App\") {\n                    color = \"#4fc1ea\";\n                    font = { color: \"#4fc1ea\", strokeWidth: 3, size: 20 };\n                }\n                // if selected node\n                else if (value.key === selectedNode.key) {\n                    color = \"#f39200\";\n                }\n\n                convertedNodes.add({\n                    ...value.value,\n                    color: color,\n                    title:\n                        value.key === selectedNode.key || value.key === \"*App\"\n                            ? undefined\n                            : popup,\n                    font: font,\n                });\n            });\n\n            const visData: Data = {\n                nodes: convertedNodes,\n                edges: new DataSet(mergedGraph.visEdges),\n            };\n\n            const network =\n                visJsRef.current &&\n                new Network(visJsRef.current, visData, options);\n\n            // change cursor when hovering and grabbing\n            // Get the canvas HTML element\n            const networkCanvas = document\n                ?.getElementById(\"mynetwork\")\n                ?.getElementsByTagName(\"canvas\")[0];\n\n            // changes the cursor graphic depending on where and what the mouse is doing\n            const changeCursor = (newCursorStyle: string) => {\n                if (networkCanvas) {\n                    networkCanvas.style.cursor = newCursorStyle;\n                }\n            };\n\n            if (network) {\n                network.on(\"hoverNode\", function () {\n                    changeCursor(\"grab\");\n                });\n                network.on(\"blurNode\", function () {\n                    changeCursor(\"default\");\n                });\n                network.on(\"dragStart\", function () {\n                    changeCursor(\"grabbing\");\n                });\n                network.on(\"dragging\", function () {\n                    changeCursor(\"grabbing\");\n                });\n                network.on(\"dragEnd\", function () {\n                    changeCursor(\"grab\");\n                });\n            }\n        }\n    }, [selected, mergedGraph, visJsRef]);\n\n    return (\n        <div {...props} style={{ display: \"flex\", flexFlow: \"column nowrap\" }}>\n            <div\n                ref={visJsRef}\n                id=\"mynetwork\"\n                style={{ flex: \"1 1 auto\", height: \"50vh\" }}\n            />\n        </div>\n    );\n};\n\nexport default NetworkGraph;\n","// React\nimport React, { useContext, useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Grid,\n    Box,\n    Paper,\n    Link,\n    Button,\n    Stack,\n} from \"@mui/material\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\nimport ErrorRoundedIcon from \"@mui/icons-material/ErrorRounded\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport NetworkGraphView from \"../NetworkGraphView\";\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { MergedGraph } from \"lib/interfaces/Graph\";\nimport { PackageMergedNodeValue } from \"lib/interfaces/PackageMergedNodeValue\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { components } from \"../../../../lib/schema\";\n\ninterface ISelectedPackage {\n    mergedGraph: MergedGraph;\n}\n\ntype Dependents = {\n    removed: string[];\n    added: string[];\n    version: string[];\n    unchanged: string[];\n};\n\n/**\n * Renders the selected package context variable's data. It will preform\n * a search of the list of packages using the selected package variable.\n */\nexport const SelectedPackage = ({ mergedGraph }: ISelectedPackage) => {\n    const { selected, setSelected } = useContext(SelectedPackageContext);\n\n    const selectedPackage = useMemo<\n        Node<PackageMergedNodeValue> | undefined\n    >(() => {\n        return mergedGraph.nodes.get(selected);\n    }, [selected]);\n\n    const dependents = useMemo<Dependents>(() => {\n        const deps: Dependents = {\n            removed: [],\n            added: [],\n            version: [],\n            unchanged: [],\n        };\n\n        if (selectedPackage) {\n            [...selectedPackage.parents]\n                .filter(p => p !== \"*App\")\n                .forEach(node => {\n                    const nodeObj = mergedGraph.nodes.get(node);\n                    if (nodeObj) {\n                        deps[nodeObj.value.change].push(node);\n                    }\n                });\n        }\n\n        return deps;\n    }, [selectedPackage]);\n\n    const justifications = useMemo(() => {\n        const justs: { [key: string]: components[\"schemas\"][\"Justification\"] } =\n            {};\n\n        if (selectedPackage) {\n            selectedPackage?.value?.justifications?.thoth?.forEach(just => {\n                justs[just.type] = [...(justs[just.type] ?? []), just];\n            });\n        }\n\n        return justs;\n    }, [selectedPackage]);\n\n    const showError = useMemo(() => {\n        return (\n            <Stack direction=\"row\" alignItems=\"center\">\n                <ErrorRoundedIcon color=\"error\" sx={{ marginRight: \".5rem\" }} />\n                <Typography mb={0} color=\"error\" gutterBottom variant=\"body2\">\n                    The package metadata could not be fetched. Package data will\n                    be limited.\n                </Typography>\n            </Stack>\n        );\n    }, []);\n\n    return (\n        <Box>\n            <Paper sx={{ padding: 2 }}>\n                <Grid container alignItems=\"center\" mb={1}>\n                    <Grid item>\n                        <Typography variant=\"h3\">\n                            <b>{selectedPackage?.value?.name}</b>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography ml={2} variant=\"h6\">\n                            {selectedPackage?.value?.version}\n                        </Typography>\n                    </Grid>\n                </Grid>\n\n                {!selectedPackage?.value?.metadata && showError}\n\n                <Typography gutterBottom variant=\"body1\">\n                    {selectedPackage?.value?.metadata?.Summary}\n                </Typography>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <IconText\n                            text={\n                                selectedPackage?.value?.metadata?.License ??\n                                \"NaN\"\n                            }\n                            icon={<GavelIcon />}\n                        />\n                    </Grid>\n                </Grid>\n            </Paper>\n\n            <Paper sx={{ padding: 2, marginTop: 2 }}>\n                <Typography variant=\"h5\">Thoth Justifications</Typography>\n                <Typography variant=\"body1\" mt={2}>\n                    {selectedPackage?.value?.justifications?.header}\n                </Typography>\n                {selectedPackage?.value?.justifications?.reasons?.length ? (\n                    <ul>\n                        {selectedPackage?.value?.justifications?.reasons.map(\n                            (reason, i) => {\n                                return (\n                                    <li key={i + reason.reason}>\n                                        <Typography variant=\"body1\" mt={2}>\n                                            <Link\n                                                underline=\"hover\"\n                                                onClick={() =>\n                                                    setSelected(reason.package)\n                                                }\n                                            >\n                                                {reason.package}\n                                            </Link>\n                                            {reason.reason}\n                                        </Typography>\n                                    </li>\n                                );\n                            },\n                        )}\n                    </ul>\n                ) : null}\n\n                {Object.entries(justifications).map(([type, reasons]) => {\n                    return (\n                        <React.Fragment key={type}>\n                            <Typography variant=\"h6\" mt={2}>\n                                {type} Justifications\n                            </Typography>\n                            {reasons.map((reason, i) => {\n                                return (\n                                    <Grid\n                                        container\n                                        alignItems=\"center\"\n                                        ml={3}\n                                        key={reason.message + i}\n                                    >\n                                        <Grid item xs={10}>\n                                            <Typography variant=\"body1\" mt={1}>\n                                                {reason.message}\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item>\n                                            <Button href={reason.link}>\n                                                READ MORE\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                );\n                            })}\n                        </React.Fragment>\n                    );\n                })}\n            </Paper>\n\n            <Paper sx={{ padding: 2, marginTop: 2 }}>\n                <Typography variant=\"h5\" mb={2}>\n                    Package Origins\n                </Typography>\n                <Typography variant=\"body1\" mb={2}>\n                    {[...(selectedPackage?.parents ?? [])].filter(\n                        p => p !== \"*App\",\n                    )?.length === 0\n                        ? selectedPackage?.value?.label +\n                          \" is not a dependent of any package in this Python environment\"\n                        : \"There are \" +\n                          [...(selectedPackage?.parents ?? [])].filter(\n                              p => p !== \"*App\",\n                          )?.length +\n                          \" package(s) that have \" +\n                          selectedPackage?.value?.label +\n                          \" as a direct dependency. Of those package(s)\"}\n\n                    {(\n                        Object.keys(dependents) as Array<\n                            keyof typeof dependents\n                        >\n                    ).map((change, i) => {\n                        if (dependents[change].length === 0) {\n                            return null;\n                        }\n\n                        return (\n                            <React.Fragment key={change + i}>\n                                {\", \" +\n                                    dependents[change].length +\n                                    (change === \"version\"\n                                        ? \" had a version change \"\n                                        : (dependents[change].length === 1\n                                              ? \" was \"\n                                              : \" were \") + change) +\n                                    \" (\"}\n                                {dependents[change].map((p, i, a) => {\n                                    let text = p;\n                                    if (i !== a.length - 1) {\n                                        text += \", \";\n                                    }\n                                    return (\n                                        <Link\n                                            key={i + text}\n                                            underline=\"hover\"\n                                            onClick={() => setSelected(p)}\n                                        >\n                                            {text}\n                                        </Link>\n                                    );\n                                })}\n                                {\")\"}\n                            </React.Fragment>\n                        );\n                    })}\n                    {\".\"}\n                </Typography>\n\n                <NetworkGraphView mergedGraph={mergedGraph} />\n            </Paper>\n        </Box>\n    );\n};\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { LinearProgress, Typography, Grid } from \"@mui/material\";\nimport { GridProps } from \"@mui/material/Grid/Grid\";\n\ninterface IProps extends GridProps {\n    /** the amount (numerator) for the bar */\n    value: number;\n    /** the total (denominator) for the bar */\n    total: number;\n    /** optional label */\n    label?: string;\n    /** action used on card */\n    action?: JSX.Element;\n}\n\n/**\n * A horizontal bar for showing a percent of a total.\n */\nconst ProgressBar = ({ value, total, label, action, ...props }: IProps) => {\n    return (\n        <Grid container spacing={1} alignItems=\"center\" {...props}>\n            <Grid item xs={5}>\n                <Typography variant=\"body2\">{label}</Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <Typography variant=\"body2\">{value}</Typography>\n            </Grid>\n            <Grid item xs>\n                <LinearProgress\n                    variant=\"determinate\"\n                    value={total > 0 ? (value / total) * 100 : 0}\n                    sx={{\n                        root: {\n                            height: 10,\n                            borderRadius: 5,\n                        },\n                        colorPrimary: {\n                            backgroundColor: \"theme.palette.grey[200]\",\n                        },\n                        bar: {\n                            borderRadius: 5,\n                            backgroundColor: \"#1a90ff\",\n                        },\n                    }}\n                />\n            </Grid>\n            <Grid item xs={1}>\n                <div>{action ?? null}</div>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ProgressBar;\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { TransitionGroup } from \"react-transition-group\";\n\nimport {\n    Typography,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    Grid,\n    Collapse,\n    Box,\n    Skeleton,\n} from \"@mui/material\";\n\nimport { DependencyMetricType } from \"hooks/metrics\";\nimport ProgressBar from \"components/Elements/ProgressBar\";\n\ninterface IDependenciesMetric {\n    metric: DependencyMetricType | null;\n}\n\n/**\n * A metric card that displays direct, indirect, and root packages of a dependency graph.\n */\nexport const DependenciesMetric = ({ metric }: IDependenciesMetric) => {\n    const totalDependencies =\n        (metric?.all?.direct ?? 0) +\n        (metric?.all?.indirect ?? 0) +\n        (metric?.all?.roots ?? 0);\n\n    if (!metric?.all || !metric?.roots) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                All Packages\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <ProgressBar\n                value={metric?.all?.roots ?? 0}\n                total={totalDependencies}\n                label={\"Root\"}\n                mb={1}\n            />\n            <ProgressBar\n                value={metric?.all?.direct ?? 0}\n                total={totalDependencies}\n                label={\"Direct\"}\n                mb={1}\n            />\n            <ProgressBar\n                value={metric?.all?.indirect ?? 0}\n                total={totalDependencies}\n                label={\"Indirect\"}\n            />\n            <Typography variant=\"h6\" gutterBottom mt={2}>\n                Root Packages\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <List component=\"nav\">\n                <TransitionGroup>\n                    {Object.entries(metric?.roots ?? {})?.map(([key]) => {\n                        const t =\n                            (metric?.roots[key].direct ?? 0) +\n                            (metric?.roots[key].indirect ?? 0);\n                        return (\n                            <Collapse key={key}>\n                                <div>\n                                    <ListItem>\n                                        <Grid container alignItems=\"center\">\n                                            <Grid item xs>\n                                                <ListItemText primary={key} />\n                                            </Grid>\n                                            <Grid item xs>\n                                                <Grid\n                                                    container\n                                                    direction=\"column\"\n                                                >\n                                                    <Grid item xs>\n                                                        <ProgressBar\n                                                            value={\n                                                                metric?.roots?.[\n                                                                    key\n                                                                ]?.direct ?? 0\n                                                            }\n                                                            total={t}\n                                                            label={\"Direct\"}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs>\n                                                        <ProgressBar\n                                                            value={\n                                                                metric?.roots?.[\n                                                                    key\n                                                                ]?.indirect ?? 0\n                                                            }\n                                                            total={t}\n                                                            label={\"Indirect\"}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </ListItem>\n                                    <Divider\n                                        variant={\"middle\"}\n                                        sx={{ mb: 1 }}\n                                    />\n                                </div>\n                            </Collapse>\n                        );\n                    })}\n                </TransitionGroup>\n            </List>\n        </>\n    );\n};\n","import React from \"react\";\n\n// material-ui\nimport { Divider, Collapse, Chip, Grid, Box } from \"@mui/material\";\nimport ExpandLess from \"@mui/icons-material/ExpandLess\";\nimport ExpandMore from \"@mui/icons-material/ExpandMore\";\nimport CheckRoundedIcon from \"@mui/icons-material/CheckRounded\";\nimport HelpOutlineRoundedIcon from \"@mui/icons-material/HelpOutlineRounded\";\n\n// local\nimport ProgressBar from \"components/Elements/ProgressBar\";\nimport { LicenseMetricType } from \"hooks/metrics\";\n\ninterface ILicenseGroup {\n    /** The license name */\n    name: string;\n    metadata: LicenseMetricType[keyof LicenseMetricType][\"metadata\"];\n    packages: LicenseMetricType[keyof LicenseMetricType][\"packages\"];\n    /** The total number of packages that have licenses. (used to add a total to the metric bar) */\n    totalLicenses: number;\n}\n\n/**\n * A custom list item displaying the number of packages under a particular license.\n */\nconst LicenseGroup = ({\n    name,\n    metadata,\n    packages,\n    totalLicenses,\n}: ILicenseGroup) => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <Grid container>\n            <Grid item xs={1}>\n                {metadata?.isOsiApproved === null ? (\n                    <HelpOutlineRoundedIcon />\n                ) : metadata?.isOsiApproved ? (\n                    <CheckRoundedIcon />\n                ) : null}\n            </Grid>\n            <Grid item xs>\n                <Box onClick={() => setOpen(!open)}>\n                    <ProgressBar\n                        key={name}\n                        value={Object.keys(packages).length ?? 0}\n                        total={totalLicenses}\n                        label={name}\n                        action={open ? <ExpandLess /> : <ExpandMore />}\n                    />\n                </Box>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                    <Box my={1}>\n                        {Object.entries(packages)\n                            .sort((a, b) => {\n                                return a[1].depth - b[1].depth;\n                            })\n                            .map(([k, v]) => {\n                                return (\n                                    <Chip\n                                        key={k}\n                                        sx={{ margin: 0.5 }}\n                                        color={\n                                            v.depth === 0\n                                                ? \"primary\"\n                                                : v.depth === 1\n                                                ? \"secondary\"\n                                                : \"default\"\n                                        }\n                                        label={k}\n                                    />\n                                );\n                            })}\n                    </Box>\n                    <Divider />\n                </Collapse>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LicenseGroup;\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Divider,\n    Collapse,\n    Button,\n    Box,\n    Grid,\n    Skeleton,\n} from \"@mui/material\";\nimport { TransitionGroup } from \"react-transition-group\";\n\n// local\nimport LicenseGroup from \"./LicenseGroup\";\nimport { LicenseMetricType } from \"hooks/metrics\";\n\ninterface ILicenseMetric {\n    /** Key value pairs of license names (keys) and license information (values).*/\n    metric: LicenseMetricType | null;\n}\n\n/**\n * A metric card that visualizes license data for all packages in the graph.\n */\nexport const LicenseMetric = ({ metric }: ILicenseMetric) => {\n    const [more, setMore] = React.useState(false);\n\n    const licenses = useMemo(\n        () =>\n            Object.entries(metric ?? {}).sort((a, b) => {\n                return Object.keys(b[1]).length - Object.keys(a[1]).length;\n            }),\n        [metric],\n    );\n\n    const totalLicenses = useMemo(\n        () =>\n            Object.entries(metric ?? {}).reduce((sum, [, val]) => {\n                return sum + Object.keys(val.packages).length;\n            }, 0),\n        [metric],\n    );\n\n    if (!metric) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div>\n            <Grid container>\n                <Grid item xs={1}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        OSI\n                    </Typography>\n                </Grid>\n                <Grid item xs>\n                    <Typography variant=\"h6\" gutterBottom>\n                        Dependency Licenses\n                    </Typography>\n                </Grid>\n            </Grid>\n\n            <Divider />\n            <TransitionGroup>\n                {licenses?.slice(0, 10).map(([key, value]) => {\n                    return (\n                        <Collapse key={key}>\n                            <LicenseGroup\n                                name={key}\n                                metadata={value.metadata}\n                                packages={value.packages}\n                                totalLicenses={totalLicenses}\n                            />\n                        </Collapse>\n                    );\n                })}\n            </TransitionGroup>\n\n            <Collapse in={more} timeout=\"auto\" unmountOnExit>\n                <TransitionGroup>\n                    {licenses.slice(10).map(([key, value]) => {\n                        return (\n                            <Collapse key={key}>\n                                <LicenseGroup\n                                    name={key}\n                                    metadata={value.metadata}\n                                    packages={value.packages}\n                                    totalLicenses={totalLicenses}\n                                />\n                            </Collapse>\n                        );\n                    })}\n                </TransitionGroup>\n            </Collapse>\n            <Box textAlign=\"center\">\n                <Button onClick={() => setMore(!more)} color=\"primary\">\n                    {more ? \"Less\" : \"More\"}\n                </Button>\n            </Box>\n        </div>\n    );\n};\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { Typography, Divider, Skeleton, Box } from \"@mui/material\";\n\n// local\nimport ProgressBar from \"components/Elements/ProgressBar\";\nimport { AdviseMetricType } from \"hooks/metrics\";\n\ninterface IAdviseMetric {\n    /** The metric object info of aggregated data */\n    metric: AdviseMetricType | null;\n}\n\n/**\n * A metric card that aggregates changes between the initial dependency\n * graph and the Thoth made dependency graph.\n */\nexport const AdviseMetric = ({ metric }: IAdviseMetric) => {\n    const total = metric\n        ? metric.added + metric.removed + metric.version + metric.unchanged\n        : 0;\n    const justTotal = Object.values(metric?.justification ?? {}).reduce(\n        (a, b) => a + b,\n        0,\n    );\n\n    if (!metric) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <>\n            <Typography variant=\"body2\" gutterBottom>\n                {metric?.build}\n            </Typography>\n            <Typography variant=\"h6\" gutterBottom mt={2}>\n                What Thoth Changed\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <ProgressBar\n                value={metric?.added ?? 0}\n                total={total}\n                label={\"Added Packages\"}\n                sx={{ mb: 1 }}\n            />\n            <ProgressBar\n                value={metric?.removed ?? 0}\n                total={total}\n                label={\"Removed Packages\"}\n                sx={{ mb: 1 }}\n            />\n            <ProgressBar\n                value={metric?.version ?? 0}\n                total={total}\n                label={\"Version Changes\"}\n            />\n            <Typography variant=\"h6\" mt={3} gutterBottom>\n                Justification Counts\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            {Object.entries(metric?.justification ?? {}).map(([key, value]) => {\n                return (\n                    <ProgressBar\n                        key={key}\n                        value={value}\n                        total={justTotal}\n                        label={key}\n                        mb={1}\n                    />\n                );\n            })}\n        </>\n    );\n};\n","import React from \"react\";\nimport InfoCard from \"components/Elements/InfoCard\";\nimport { CustomCardAction } from \"../components\";\nimport {\n    AdviseMetric,\n    DependenciesMetric,\n    LicenseMetric,\n} from \"components/Metrics\";\nimport { Masonry } from \"@mui/lab\";\nimport { AllMetrics } from \"../hooks\";\n\ninterface IAdviseSummary {\n    metrics: AllMetrics;\n}\n\nexport const AdviseSummary = ({ metrics }: IAdviseSummary) => {\n    const [pipfile, setPipfile] = React.useState<\"newGraph\" | \"oldGraph\">(\n        \"newGraph\",\n    );\n\n    const handlePipfile = (\n        event: any,\n        newPipfile: \"newGraph\" | \"oldGraph\" | \"\",\n    ) => {\n        if (newPipfile !== \"\") {\n            setPipfile(newPipfile);\n        }\n    };\n\n    return (\n        <Masonry columns={{ xs: 1, md: 2 }} spacing={3} sx={{ mb: 3, mt: 1 }}>\n            <div>\n                <InfoCard\n                    cardMeta={{\n                        title: \"Thoth Advise Summary\",\n                    }}\n                    cardBody={<AdviseMetric metric={metrics?.advise} />}\n                />\n            </div>\n            <div>\n                <InfoCard\n                    cardMeta={{\n                        title: \"Dependencies Summary\",\n                    }}\n                    cardBody={\n                        <DependenciesMetric\n                            metric={metrics?.[pipfile]?.dependencies}\n                        />\n                    }\n                    cardAction={\n                        <CustomCardAction\n                            value={pipfile}\n                            onChange={handlePipfile}\n                        />\n                    }\n                />\n            </div>\n            <div>\n                <InfoCard\n                    cardMeta={{\n                        title: \"Licenses Summary\",\n                    }}\n                    cardBody={\n                        <LicenseMetric metric={metrics?.[pipfile]?.licenses} />\n                    }\n                    cardAction={\n                        <CustomCardAction\n                            value={pipfile}\n                            onChange={handlePipfile}\n                        />\n                    }\n                />\n            </div>\n        </Masonry>\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\nimport { UseQueryResult } from \"react-query/types/react/types\";\n\ntype path = paths[\"/advise/python/{analysis_id}\"][\"get\"];\nexport type AdviseDocumentRequestParams = path[\"parameters\"][\"path\"];\nexport type AdviseDocumentRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n/**\n * An async function that returns a promise for `{base_url}/advise/python`\n *\n * @param analysis_id - the advise document id (ex: `adviser-211112223258-38af1a4746733b53`)\n */\nexport const getAdviseDocument = (\n    analysis_id?: AdviseDocumentRequestParams[\"analysis_id\"],\n) => {\n    return axios.get<AdviseDocumentRequestResponseSuccess>(\n        THOTH_URL + \"/advise/python/\" + analysis_id,\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useAdviseDocument = (\n    analysis_id?: AdviseDocumentRequestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n): UseQueryResult<\n    AxiosResponse<AdviseDocumentRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n> => {\n    return useQuery({\n        ...config,\n        queryKey: [\"adviseDocument\", analysis_id],\n        queryFn: () => getAdviseDocument(analysis_id),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/advise/python/{analysis_id}/log\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n/**\n * An async function that returns a promise for `{base_url}/advise/python/logs`\n *\n * @param analysis_id - the advise document id (ex: `adviser-211112223258-38af1a4746733b53`)\n */\nexport const getAdviseLogs = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get<requestResponseSuccess>(\n        THOTH_URL + \"/advise/python/\" + analysis_id + \"/log\",\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useAdviseLogs = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"adviseLogs\", analysis_id],\n        queryFn: () => getAdviseLogs(analysis_id),\n    });\n};\n","import { components, operations } from \"lib/schema\";\n\nexport type Lockfile = {\n    default: {\n        [key: string]: {\n            version: string;\n            markers: string;\n            hashes: string[];\n        };\n    };\n};\n\nexport function formatLockfile(\n    lockfile: components[\"schemas\"][\"ProjectDef\"],\n): operations[\"get_python_package_version_metadata\"][\"parameters\"][\"query\"][] {\n    return Object.entries(\n        (lockfile.requirements_locked as Lockfile).default,\n    ).map(([key, value]) => {\n        return {\n            name: key,\n            version: value.version.replace(\"==\", \"\"),\n            index: \"https://pypi.org/simple\", //TODO no hard code\n            os_name:\n                lockfile?.runtime_environment?.operating_system?.name ?? \"\",\n            os_version:\n                lockfile?.runtime_environment?.operating_system?.version ?? \"\",\n            python_version: lockfile?.runtime_environment?.python_version ?? \"\",\n        };\n    });\n}\n","import { Node, NodeValue } from \"lib/interfaces/Node\";\nimport { PackageMergedNodeValue } from \"lib/interfaces/PackageMergedNodeValue\";\n\nexport interface MergedGraph extends Graph<Node<PackageMergedNodeValue>> {\n    visEdges: {\n        id: number | string;\n        to: string;\n        from: string;\n    }[];\n}\n\n/**\n * Graph data structure implemented with an adjacent list\n */\nexport class Graph<NodeType extends Node<NodeValue>> {\n    nodes: Map<NodeType[\"key\"], NodeType>;\n\n    constructor() {\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node to the graph.\n     */\n    addVertex(\n        key: NodeType[\"key\"],\n        value: NodeType[\"value\"],\n        Node: new (key: string, value: NodeType[\"value\"]) => NodeType,\n    ): NodeType {\n        let node = this.nodes.get(key);\n        if (node) {\n            return node;\n        }\n\n        node = new Node(key, value);\n        this.nodes.set(key, node);\n        return node;\n    }\n\n    /**\n     * Create a connection between the source node and the destination node.\n     * If the nodes don't exist, then it will make them on the fly.\n     */\n    addEdge(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n    ): [NodeType | undefined, NodeType | undefined] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n\n        if (sourceNode && destinationNode) {\n            sourceNode.addAdjacent(destinationNode);\n        }\n\n        return [sourceNode, destinationNode];\n    }\n\n    /**\n     * Generic graph search where we can pass a bfs or dfs\n     */\n    *graphSearch(first: NodeType, type = \"bfs\"): Generator<NodeType> {\n        const visited = new Set();\n        const visitList = [];\n\n        visitList.push(first);\n\n        while (visitList.length !== 0) {\n            const node = type === \"dfs\" ? visitList.pop() : visitList.shift();\n            if (node && !visited.has(node)) {\n                yield node;\n                visited.add(node);\n                node.getAdjacents().forEach(adj => visitList.push(adj));\n            }\n        }\n    }\n\n    /**\n     * Find a path between source and destination\n     * It might not be the optimal path\n     */\n    findPath(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n        path: Set<NodeType> = new Set(),\n    ): NodeType[] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n        const newPath = new Set(path);\n\n        if (!destinationNode || !sourceNode) return [];\n\n        newPath.add(sourceNode);\n\n        if (source === destination) {\n            return Array.from(newPath);\n        }\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const node of sourceNode.getAdjacents()) {\n            if (!newPath.has(node)) {\n                const nextPath = this.findPath(\n                    node.key, // TODO might still be node.value\n                    destination,\n                    newPath,\n                );\n                if (nextPath.length) {\n                    return nextPath;\n                }\n            }\n        }\n\n        return [];\n    }\n\n    findAllNodesOnAllPaths(\n        source: NodeType,\n        destinationKey: NodeType[\"key\"],\n        visited: Map<NodeType[\"key\"], NodeType> = new Map(),\n    ): Map<NodeType[\"key\"], NodeType> {\n        const visitList: (NodeType | undefined)[] = [];\n\n        visitList.push(source);\n\n        while (visitList.length !== 0) {\n            const node = visitList.pop();\n            if (node && node.key === destinationKey) {\n                continue;\n            }\n            if (node && !visited.has(node.key)) {\n                visited.set(node.key, node);\n                node.parents.forEach(parent =>\n                    visitList.push(this.nodes.get(parent)),\n                );\n            }\n        }\n\n        return visited;\n    }\n\n    /**\n     * Find all paths from source to destination\n     */\n    findAllPaths(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n        path: Set<NodeType> = new Set(),\n    ): NodeType[][] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n        const newPath = new Set(path);\n\n        if (!destinationNode || !sourceNode) return [];\n\n        newPath.add(sourceNode);\n\n        if (source === destination) {\n            return [Array.from(newPath)];\n        }\n\n        const paths: NodeType[][] = [];\n        sourceNode.getAdjacents().forEach(node => {\n            if (!newPath.has(node)) {\n                const nextPaths = this.findAllPaths(\n                    node.key, // TODO might need to use node.value.id\n                    destination,\n                    newPath,\n                );\n                nextPaths.forEach(nextPath => {\n                    paths.push(nextPath);\n                });\n            }\n        });\n        return paths;\n    }\n}\n","import { PackageMergedNodeValue } from \"lib/interfaces/PackageMergedNodeValue\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { JustificationReasons } from \"lib/types/JustificationReasons\";\nimport { components } from \"../../../lib/schema\";\n\nconst whyRemoved = (\n    start: Node<PackageMergedNodeValue>,\n    packages: Node<PackageMergedNodeValue>[],\n) => {\n    const visited = new Set();\n    const visitList = [];\n\n    visitList.push(start);\n\n    const reasonNodes = [];\n\n    while (visitList.length !== 0) {\n        const node = visitList.pop();\n        if (node && !visited.has(node)) {\n            visited.add(node);\n\n            if (node.value.change === \"version\") {\n                reasonNodes.push(node);\n            } else {\n                node.parents.forEach(adj => {\n                    if (adj === \"*App\") {\n                        if (node.key !== start.key) {\n                            reasonNodes.push(node);\n                        }\n                        return;\n                    }\n                    visitList.push(packages.find(pkg => pkg.key === adj));\n                });\n            }\n        }\n    }\n\n    return reasonNodes.map(node => {\n        const reason =\n            node.value.change === \"version\"\n                ? \" had its version changed to \" +\n                  node.value.version +\n                  \" from \" +\n                  node.value.oldVersion +\n                  \". Version \" +\n                  node.value.oldVersion +\n                  \" of \" +\n                  node.key +\n                  \" included package \" +\n                  start.value.label +\n                  \" as a dependency, where version \" +\n                  node.value.version +\n                  \" does not. \"\n                : \" did not have any dependents and was removed by the Thoth resolver.\";\n        return {\n            package: node.key,\n            reason: reason,\n        };\n    });\n};\n\nexport const discoverPackageChanges = (\n    nodes: Node<PackageMergedNodeValue>[],\n    justifications?: components[\"schemas\"][\"Justification\"],\n) => {\n    if (!nodes || !justifications) {\n        return;\n    }\n\n    const justifiedPackages = new Map();\n    justifications.forEach(\n        (\n            justification: components[\"schemas\"][\"Justification\"][number] & {\n                package_name?: string;\n            },\n        ) => {\n            if (justification.package_name) {\n                if (justifiedPackages.has(justification.package_name)) {\n                    justifiedPackages.set(justification.package_name, [\n                        ...justifiedPackages.get(justification.package_name),\n                        justification,\n                    ]);\n                } else {\n                    justifiedPackages.set(justification.package_name, [\n                        justification,\n                    ]);\n                }\n            }\n        },\n    );\n\n    nodes.forEach(node => {\n        let justification: JustificationReasons = {\n            package: node.key,\n            header: \"\",\n            reasons: [],\n        };\n\n        if (node.value.change === \"removed\") {\n            // set header\n            justification[\"header\"] = `${node.value.label} was ${\n                node.value.depth === 0 ? \"directly\" : \"indirectly\"\n            } removed by Thoth resolver.`;\n\n            // set reasons for removal\n            justification[\"reasons\"] = whyRemoved(node, nodes);\n\n            // if no reasons for removal\n            if (justification.reasons.length === 0) {\n                justification.header = `${node.value.label} was removed for an unknown reason. The package does not have dependents in the Pipfile.lock.`;\n            }\n        }\n        // if added\n        else if (node.value.change === \"added\") {\n            justification.header = `${node.value.label} was added to the Pipfile.lock by Thoth resolver.`;\n        }\n\n        // if added\n        else if (node.value.change === \"version\") {\n            justification.header = `${node.key} had its version changed from ${node.value.oldVersion} to ${node.value.version}.`;\n        }\n\n        // if unchanged\n        else {\n            justification.header =\n                \"Thoth resolver did not remove or change package \" +\n                node.value.label +\n                \".\";\n        }\n\n        // check if there is a justification for change\n        if (justifiedPackages.has(node.key)) {\n            const reasons = justifiedPackages.get(node.key);\n            justification = {\n                ...justification,\n                thoth: reasons,\n            };\n        }\n\n        node.value.justifications = justification;\n    }, []);\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type DependencyMetricType = {\n    /** summary object of all roots aggregated */\n    all: {\n        /** number of dependencies directly related to root packages */\n        direct?: number;\n        /** number of dependencies directly or indirectly related to the direct packages*/\n        indirect?: number;\n        /** number of dependencies that have no dependents*/\n        roots?: number;\n    };\n    /** an object of key (package name) value pairs of specific roots with direct and indirect parameters for each value */\n    roots: {\n        [key: string]: {\n            /** roots own direct packages */\n            direct?: number;\n            /** roots own indirect packages */\n            indirect?: number;\n        };\n    };\n};\n\nexport const useDependencyMetric = (graph?: Graph<Node<PackageNodeValue>>) => {\n    const [metric, setMetric] = useState<DependencyMetricType>();\n\n    useEffect(() => {\n        if (!graph) {\n            return;\n        }\n\n        const base: DependencyMetricType = {\n            all: {},\n            roots: {},\n        };\n\n        const roots: string[] = [];\n        graph.nodes.forEach(value => {\n            if (value.value.depth === 0) {\n                roots.push(value.key);\n            }\n        });\n\n        const visited = new Set();\n\n        // for each starting node\n        roots.forEach(root => {\n            const rootObj = graph.nodes.get(root);\n            if (!rootObj) {\n                return;\n            }\n\n            const bfs = graph.graphSearch(rootObj);\n            const visitedOrder = Array.from(bfs);\n\n            visitedOrder.forEach(node => {\n                if (node.key === \"*App\") {\n                    return;\n                }\n\n                if (visited.has(node.value.id)) {\n                    return;\n                } else {\n                    visited.add(node.value.id);\n                }\n\n                const depth =\n                    node.value.depth === 0\n                        ? \"roots\"\n                        : node.value.depth === 1\n                        ? \"direct\"\n                        : \"indirect\";\n\n                base.all[depth] = (base.all[depth] ?? 0) + 1;\n\n                if (depth !== \"roots\") {\n                    if (!base.roots[root]) {\n                        base.roots[root] = {};\n                    }\n                    base.roots[root][depth] =\n                        (base.roots?.[root]?.[depth] ?? 0) + 1;\n                }\n            });\n        });\n\n        setMetric(base);\n    }, [graph]);\n\n    return metric;\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type LicenseMetricType = {\n    /** The license name */\n    [key: string]: {\n        /** The packages that use this license as an object */\n        packages: {\n            [key: string]: {\n                depth: number;\n                specific?: string;\n            };\n        };\n        /** License specific information */\n        metadata: {\n            /** If license is approved by OSI standards */\n            isOsiApproved: boolean | null;\n        };\n    };\n};\n\nexport const useLicenseMetric = (graph?: Graph<Node<PackageNodeValue>>) => {\n    const [metric, setMetric] = useState<LicenseMetricType>();\n\n    useEffect(() => {\n        if (!graph) {\n            return;\n        }\n\n        let base: LicenseMetricType = {};\n\n        const roots: string[] = [];\n        graph.nodes.forEach(value => {\n            if (value.value.depth === 0) {\n                roots.push(value.key);\n            }\n        });\n\n        const visited = new Set();\n\n        // for each starting node\n        roots.forEach(root => {\n            const rootObj = graph.nodes.get(root);\n            if (!rootObj) {\n                return;\n            }\n\n            const bfs = graph.graphSearch(rootObj);\n            const visitedOrder = Array.from(bfs);\n\n            visitedOrder.forEach(node => {\n                if (node.key === \"*App\") {\n                    return;\n                }\n\n                if (visited.has(node.value.id)) {\n                    return;\n                } else {\n                    visited.add(node.value.id);\n                }\n\n                // licence metric\n                type PackageLicenses = {\n                    generalLicense: string;\n                    specificLicense?: string;\n                    isOsiApproved: boolean | null;\n                }[];\n                const packageLicenses: PackageLicenses = [];\n\n                // get general classification\n                node?.value?.metadata?.Classifier?.forEach(classifier => {\n                    const parsed = classifier.split(\" :: \");\n\n                    if (parsed[0] === \"License\") {\n                        if (parsed[1] === \"OSI Approved\") {\n                            packageLicenses.push({\n                                generalLicense:\n                                    parsed?.[2] ?? node.value.metadata?.License,\n                                specificLicense: node.value.metadata?.License,\n                                isOsiApproved: true,\n                            });\n                        } else {\n                            packageLicenses.push({\n                                generalLicense:\n                                    parsed?.[1] ?? node.value.metadata?.License,\n                                specificLicense: node.value.metadata?.License,\n                                isOsiApproved: false,\n                            });\n                        }\n                    }\n                });\n\n                if (packageLicenses.length === 0) {\n                    packageLicenses.push({\n                        generalLicense: node?.value?.metadata?.License ?? \"N/A\",\n                        specificLicense:\n                            node?.value?.metadata?.License ?? \"N/A\",\n                        isOsiApproved: null,\n                    });\n                }\n\n                // get specific classification\n                packageLicenses.forEach(license => {\n                    if (!base[license.generalLicense]) {\n                        base[license.generalLicense] = {\n                            packages: {},\n                            metadata: {\n                                isOsiApproved: license.isOsiApproved,\n                            },\n                        };\n                    }\n\n                    base = {\n                        ...base,\n                        [license.generalLicense]: {\n                            ...base[license.generalLicense],\n                            packages: {\n                                ...(base[license.generalLicense].packages ??\n                                    null),\n                                [node.value.id]: {\n                                    depth: node.value?.depth ?? 0,\n                                    specific: license.specificLicense,\n                                },\n                            },\n                        },\n                    };\n                });\n            });\n        });\n\n        setMetric(base);\n    }, [graph]);\n\n    return metric;\n};\n","import { useMemo } from \"react\";\nimport {\n    useLicenseMetric,\n    useDependencyMetric,\n    useAdviseMetric,\n    DependencyMetricType,\n    LicenseMetricType,\n    AdviseMetricType,\n} from \"hooks/metrics\";\nimport { Graph, MergedGraph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { AdviseDocumentRequestResponseSuccess } from \"../api\";\n\nexport type AllMetrics = {\n    advise: AdviseMetricType | null;\n    oldGraph: {\n        dependencies: DependencyMetricType | null;\n        licenses: LicenseMetricType | null;\n    };\n    newGraph: {\n        dependencies: DependencyMetricType | null;\n        licenses: LicenseMetricType | null;\n    };\n};\n\nexport function useMetrics(\n    oldGraph?: Graph<Node<PackageNodeValue>>,\n    newGraph?: Graph<Node<PackageNodeValue>>,\n    mergedGraph?: MergedGraph,\n    adviseDocument?: AdviseDocumentRequestResponseSuccess,\n) {\n    const adviseMetric = useAdviseMetric(mergedGraph, adviseDocument);\n    const oldDependencyMetric = useDependencyMetric(oldGraph);\n    const newDependencyMetric = useDependencyMetric(newGraph);\n    const oldLicenseMetric = useLicenseMetric(oldGraph);\n    const newLicenseMetric = useLicenseMetric(newGraph);\n\n    return useMemo(() => {\n        const base: AllMetrics = {\n            advise: null,\n            oldGraph: { dependencies: null, licenses: null },\n            newGraph: { dependencies: null, licenses: null },\n        };\n\n        if (adviseMetric) {\n            base.advise = adviseMetric;\n        }\n        if (oldDependencyMetric) {\n            base.oldGraph.dependencies = oldDependencyMetric;\n        }\n        if (oldLicenseMetric) {\n            base.oldGraph.licenses = oldLicenseMetric;\n        }\n        if (newDependencyMetric) {\n            base.newGraph.dependencies = newDependencyMetric;\n        }\n        if (newLicenseMetric) {\n            base.newGraph.licenses = newLicenseMetric;\n        }\n\n        return base;\n    }, [\n        adviseMetric,\n        oldDependencyMetric,\n        oldLicenseMetric,\n        newDependencyMetric,\n        newLicenseMetric,\n    ]);\n}\n","import { useEffect, useState } from \"react\";\nimport { MergedGraph } from \"lib/interfaces/Graph\";\nimport { components } from \"lib/schema\";\n\nexport type AdviseMetricType = {\n    /** The number of new dependencies */\n    added: number;\n    /** The number of removed dependencies */\n    removed: number;\n    /** The number of dependencies whose version was changed*/\n    version: number;\n    /** The number of dependencies that did not change*/\n    unchanged: number;\n    /** The number Thoth justification (warnings) that were produced */\n    justification: Record<string, number>;\n    /** which build is being displayed (new or old) */\n    build: string;\n};\n\nexport const useAdviseMetric = (\n    graph?: MergedGraph,\n    adviseDocument?: components[\"schemas\"][\"AdviserResultResponse\"],\n) => {\n    const [metric, setMetric] = useState<AdviseMetricType>();\n\n    useEffect(() => {\n        if (!graph || !adviseDocument?.metadata) {\n            return;\n        }\n\n        const base: AdviseMetricType = {\n            added: 0,\n            removed: 0,\n            version: 0,\n            unchanged: 0,\n            justification: {},\n            build: \"\",\n        };\n\n        // package changes\n        graph.nodes.forEach(node => {\n            switch (node.value.change) {\n                case \"added\":\n                    base.added++;\n                    break;\n                case \"removed\":\n                    base.removed++;\n                    break;\n                case \"version\":\n                    base.version++;\n                    break;\n                default:\n                    base.unchanged++;\n            }\n        });\n\n        //build environment\n        base.build = `We have analysed an application stack running on ${adviseDocument.metadata.os_release.name} ${adviseDocument.metadata.os_release.version}, running Python (${adviseDocument.metadata.python.implementation_name}) ${adviseDocument.metadata.python.major}.${adviseDocument.metadata.python.minor}.${adviseDocument.metadata.python.micro}. It was Adviser Job ID ${adviseDocument.metadata.document_id}, by ${adviseDocument.metadata.analyzer} v${adviseDocument.metadata.analyzer_version}.`;\n\n        //justification counts\n        adviseDocument?.result?.report?.products?.[0]?.justification.forEach(\n            justification => {\n                if (base.justification[justification.type]) {\n                    base.justification[justification.type] =\n                        base.justification[justification.type] + 1;\n                } else {\n                    base.justification[justification.type] = 1;\n                }\n            },\n        );\n        setMetric(base);\n    }, [graph, adviseDocument]);\n\n    return metric;\n};\n","import { useEffect, useRef } from \"react\";\n\nexport const useInterval = (\n    callback: undefined | (() => void),\n    delay: number | null,\n) => {\n    const savedCallback = useRef<undefined | (() => void)>();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n        function tick() {\n            if (savedCallback.current) {\n                savedCallback.current();\n            }\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQueries, useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\nimport { UseQueryResult } from \"react-query/types/react/types\";\n\ntype path = paths[\"/python/package/version/metadata\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type PackageMetadataRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageMetadata = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    os_name?: requestParams[\"os_name\"],\n    os_version?: requestParams[\"os_version\"],\n    python_version?: requestParams[\"python_version\"],\n) => {\n    return axios.get<PackageMetadataRequestResponseSuccess>(\n        THOTH_URL + \"/python/package/version/metadata\",\n        {\n            params: {\n                name: name,\n                version: version,\n                index: index,\n                os_name: os_name,\n                os_version: os_version,\n                python_version: python_version,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageMetadata = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    os_name?: requestParams[\"os_name\"],\n    os_version?: requestParams[\"os_version\"],\n    python_version?: requestParams[\"python_version\"],\n    config?: { [key: string]: any },\n): UseQueryResult<\n    AxiosResponse<PackageMetadataRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n> => {\n    return useQuery<\n        AxiosResponse<PackageMetadataRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled:\n            !!name &&\n            !!version &&\n            !!index &&\n            !!os_name &&\n            !!os_version &&\n            !!python_version,\n        queryKey: [\n            \"packageMetadata\",\n            name,\n            version,\n            index,\n            os_name,\n            os_version,\n            python_version,\n        ],\n        queryFn: () =>\n            getPackageMetadata(\n                name,\n                version,\n                index,\n                os_name,\n                os_version,\n                python_version,\n            ),\n    });\n};\n\nexport const usePackagesMetadata = (\n    packages: requestParams[],\n    config?: { [key: string]: any },\n): UseQueryResult<\n    AxiosResponse<PackageMetadataRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n>[] => {\n    return useQueries(\n        packages.map(p => {\n            return {\n                ...config,\n                enabled:\n                    !!p.name &&\n                    !!p.version &&\n                    !!p.index &&\n                    !!p.os_name &&\n                    !!p.os_version &&\n                    !!p.python_version,\n                queryKey: [\n                    \"packageMetadata\",\n                    p.name,\n                    p.version,\n                    p.index,\n                    p.os_name,\n                    p.os_version,\n                    p.python_version,\n                ],\n                queryFn: () =>\n                    getPackageMetadata(\n                        p.name,\n                        p.version,\n                        p.index,\n                        p.os_name,\n                        p.os_version,\n                        p.python_version,\n                    ),\n            };\n        }),\n    ) as UseQueryResult<\n        AxiosResponse<PackageMetadataRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >[];\n};\n","export interface NodeValue {\n    [key: string]: unknown;\n}\n\n/**\n * Graph node/vertex that hold adjacency nodes\n * For performance, uses a HashSet instead of array for adjacent.\n */\nexport class Node<GenericNodeValue extends NodeValue> {\n    /** Nodes connected (children) to this node **/\n    adjacents: Set<this>;\n    /** the unique identifier **/\n    key: string;\n    value: GenericNodeValue;\n    /** Nodes connected (parents) to this node **/\n    parents: Set<string>;\n\n    constructor(key: string, value: GenericNodeValue) {\n        this.adjacents = new Set(); // adjacency list\n        this.key = key; // key\n        this.value = value;\n        this.parents = new Set<string>();\n    }\n\n    /**\n     * Add node to adjacency list\n     * Runtime: O(1)\n     * @param {this} node\n     */\n    addAdjacent(node: this) {\n        this.adjacents.add(node);\n    }\n\n    /**\n     * Check if a Node is adjacent to other\n     * Runtime: O(1)\n     * @param {this} node\n     */\n    isAdjacent(node: this) {\n        return this.adjacents.has(node);\n    }\n\n    /**\n     * Get all adjacent nodes\n     */\n    getAdjacents() {\n        return Array.from(this.adjacents);\n    }\n}\n","import { useMemo } from \"react\";\n\nimport { usePackagesMetadata } from \"api\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { operations } from \"../lib/schema\";\nimport { PackageMetadata } from \"../lib/types/PackageMetadata\";\n\nexport type Requirements = {\n    \"dev-packages\": { [key: string]: string };\n    packages: { [key: string]: string };\n    requires: {\n        python_version: string;\n    };\n    source: {\n        name: string;\n        url: string;\n        verify_ssl: boolean;\n    }[];\n};\n\n/**\n * Given a list of packages, create a graph using metadata information.\n */\nexport function useGraph(\n    data: operations[\"get_python_package_version_metadata\"][\"parameters\"][\"query\"][] = [],\n    knownRoots?: Requirements[\"packages\"],\n) {\n    const allMetadata = usePackagesMetadata(data);\n\n    const isLoading = useMemo(() => {\n        return allMetadata.some(query => query.isLoading);\n    }, [allMetadata]);\n\n    return useMemo(() => {\n        if (isLoading) {\n            return;\n        }\n\n        // create graph\n        const tempGraph = new Graph<Node<PackageNodeValue>>();\n        const notRoot: unknown[] = [];\n\n        // add data to graph\n        allMetadata.forEach(query => {\n            // if could not find metadata\n            if (query.error) {\n                const error = query.error;\n                const params =\n                    error.response?.data?.parameters ??\n                    error.response?.config?.params;\n\n                const value: PackageNodeValue = {\n                    id: params.name.toLowerCase(),\n                    label: params.name + \" \" + params.version,\n                    name: params.name,\n                    version: params.version,\n                    metadata: null,\n                    depth: 0,\n                };\n\n                // add package to graph\n                tempGraph.addVertex(value.id, value, Node);\n            }\n            // metadata was found\n            else if (query.isSuccess) {\n                const metadata = query.data.data.metadata;\n                const value = {\n                    id: metadata.package_name.toLowerCase(),\n                    label:\n                        metadata.package_name + \" \" + metadata.package_version,\n                    name: metadata.package_name,\n                    version: metadata.package_version,\n                    metadata: metadata.importlib_metadata\n                        .metadata as PackageMetadata,\n                };\n\n                // add package to graph\n                tempGraph.addVertex(value.id, value, Node);\n            }\n        });\n\n        // set edges\n        allMetadata.forEach(query => {\n            if (query.status === \"error\" || !query.data?.data) {\n                return;\n            }\n\n            const currentNode = tempGraph.nodes.get(\n                query.data.data.metadata.package_name.toLowerCase(),\n            );\n\n            if (currentNode) {\n                Object.keys(query.data.data.metadata.dependencies).forEach(\n                    dep => {\n                        const adjacentNode = tempGraph.nodes.get(dep);\n\n                        // if package exists in lockfile\n                        if (adjacentNode) {\n                            // add edge connecting parent and dependency\n                            tempGraph.addEdge(\n                                currentNode.value.id,\n                                adjacentNode.value.id,\n                            );\n                            // set parent\n                            adjacentNode.parents.add(currentNode.value.id);\n                            notRoot.push(adjacentNode.value.id);\n                        }\n                    },\n                );\n            }\n        });\n\n        // add app node to graph\n        const app = tempGraph.addVertex(\n            \"*App\",\n            {\n                id: \"*App\",\n                label: \"App\",\n                depth: -1,\n            },\n            Node,\n        );\n\n        notRoot.push(\"*App\");\n\n        const visited = new Set();\n        const visitList: Node<PackageNodeValue>[] = [];\n\n        // get roots and connect to app\n        tempGraph.nodes.forEach((value, key) => {\n            if (\n                !notRoot.includes(key) ||\n                Object.keys(knownRoots ?? {}).includes(key)\n            ) {\n                value.value.depth = 0;\n                value.parents.add(\"*App\");\n                visitList.push(value);\n                tempGraph.addEdge(app.key, value.key);\n            }\n        });\n\n        // set depth and parent packages using dfs\n        while (visitList.length !== 0) {\n            const node = visitList.pop();\n            if (node && !visited.has(node)) {\n                visited.add(node);\n\n                const adjs = node.getAdjacents();\n\n                for (let i = 0; i < adjs.length; i++) {\n                    // update depth\n                    adjs[i].value.depth = Math.min(\n                        (node.value?.depth ?? 0) + 1,\n                        adjs[i].value.depth ?? (node.value?.depth ?? 0) + 2,\n                    );\n                    visitList.push(adjs[i]);\n                }\n            }\n        }\n        return tempGraph;\n    }, [isLoading, knownRoots]);\n}\n","import React from \"react\";\n\ninterface IAdviseNotFound {\n    analysis_id: string;\n}\n\nexport const AdviseNotFound = ({ analysis_id }: IAdviseNotFound) => {\n    return <div>`&quot;{analysis_id}&quot;` not found</div>;\n};\n","import * as React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@mui/material\";\n\ninterface IProps {\n    children: React.ReactNode;\n    goHome?: boolean;\n}\n\n/**\n * Layout is used in most of the app and allows for backwards navigation.\n */\nexport const NavigationLayout = ({ children, goHome = false }: IProps) => {\n    const navigate = useNavigate();\n\n    return (\n        <>\n            <Button\n                onClick={() => {\n                    if (goHome) {\n                        navigate(\"/\");\n                    } else {\n                        navigate(-1);\n                    }\n                }}\n            >\n                {goHome ? \"go home\" : \"go back\"}\n            </Button>\n            <div>{children}</div>\n        </>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport { Route, Routes, useParams, Navigate } from \"react-router-dom\";\n\n// layouts\nimport { AdviseLayout } from \"components/Layout\";\n\n// sub-routes\nimport { AdviseSummary } from \"./AdviseSummary\";\nimport { AdviseDetails } from \"./AdviseDetails\";\n\n// feature specific imports\nimport { useAdviseDocument, useAdviseLogs } from \"../api\";\nimport { formatLockfile } from \"utils/formatLockfile\";\nimport { AdviseHeader } from \"../components\";\nimport { useMergeGraphs, useMetrics } from \"../hooks\";\nimport { Requirements, useGraph } from \"hooks\";\n\n// misc\nimport { CircularProgress } from \"@mui/material\";\nimport { AdviseNotFound } from \"./AdviseNotFound\";\nimport { NavigationLayout } from \"components/Layout/NavigationLayout\";\nimport { AxiosResponse } from \"axios\";\nimport { components } from \"lib/schema\";\n\ntype statusResponse = components[\"schemas\"][\"AnalysisStatusResponse\"];\n\nexport const AdviseRoutes = () => {\n    // get document id\n    const { analysis_id } = useParams();\n\n    // api get thoth advise document\n    const adviseDocument = useAdviseDocument(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: (data: AxiosResponse<statusResponse>) => {\n            if (data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    const logs = useAdviseLogs(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: () => {\n            if (adviseDocument.data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n    // format init graph data\n    const initGraphData = useMemo(() => {\n        if (\n            adviseDocument.isSuccess &&\n            adviseDocument.data.data?.result?.parameters?.project\n        ) {\n            const lockfile = adviseDocument.data.data?.result.parameters\n                .project as components[\"schemas\"][\"ProjectDef\"];\n            return formatLockfile(lockfile);\n        }\n    }, [adviseDocument]);\n\n    // format advise graph data\n    const adviseGraphData = useMemo(() => {\n        if (\n            adviseDocument.isSuccess &&\n            adviseDocument.data.data?.result?.report?.products?.[0]?.project\n        ) {\n            const lockfile = adviseDocument.data.data?.result?.report\n                ?.products?.[0]?.project as components[\"schemas\"][\"ProjectDef\"];\n            return formatLockfile(lockfile);\n        }\n    }, [adviseDocument]);\n\n    // create init graph\n    const initGraph = useGraph(\n        initGraphData,\n        (\n            (\n                adviseDocument?.data?.data?.result?.parameters\n                    ?.project as components[\"schemas\"][\"ProjectDef\"]\n            )?.requirements as Requirements\n        )?.packages,\n    );\n    const adviseGraph = useGraph(\n        adviseGraphData,\n        (\n            (\n                adviseDocument?.data?.data?.result?.report?.products?.[0]\n                    ?.project as components[\"schemas\"][\"ProjectDef\"]\n            )?.requirements as Requirements\n        )?.packages,\n    );\n\n    // merge graphs based on added, removed, changed packages\n    const mergedGraph = useMergeGraphs(\n        initGraph,\n        adviseGraph,\n        adviseDocument.data?.data,\n    );\n\n    // compute metric data\n    const metrics = useMetrics(\n        initGraph,\n        adviseGraph,\n        mergedGraph,\n        adviseDocument.data?.data,\n    );\n\n    if (adviseDocument.isLoading) {\n        return (\n            <div className=\"w-full h-48 flex justify-center items-center\">\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (!adviseDocument.data) {\n        return (\n            <NavigationLayout>\n                <AdviseNotFound analysis_id={analysis_id ?? \"no id\"} />\n            </NavigationLayout>\n        );\n    }\n\n    return (\n        <NavigationLayout goHome={true}>\n            <AdviseLayout\n                header={\n                    <AdviseHeader\n                        adviseDocument={adviseDocument.data.data}\n                        logs={logs.data?.data?.log}\n                    />\n                }\n            >\n                <Routes>\n                    <Route\n                        path=\"summary\"\n                        element={<AdviseSummary metrics={metrics} />}\n                    />\n                    <Route\n                        path=\"details\"\n                        element={<AdviseDetails mergedGraph={mergedGraph} />}\n                    />\n                    <Route path=\"*\" element={<Navigate to=\"summary\" />} />\n                </Routes>\n            </AdviseLayout>\n        </NavigationLayout>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Graph, MergedGraph } from \"lib/interfaces/Graph\";\nimport { discoverPackageChanges } from \"../utils\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { PackageMergedNodeValue } from \"../../../lib/interfaces/PackageMergedNodeValue\";\nimport { AdviseDocumentRequestResponseSuccess } from \"../api\";\n\nexport const useMergeGraphs = (\n    oldGraph?: Graph<Node<PackageNodeValue>>,\n    newGraph?: Graph<Node<PackageNodeValue>>,\n    adviseDocument?: AdviseDocumentRequestResponseSuccess,\n) => {\n    const [graph, setGraph] = useState<MergedGraph>();\n    const theme = useTheme();\n\n    useEffect(() => {\n        if (!oldGraph || !newGraph) {\n            return;\n        }\n\n        const mergedGraph = new Graph<\n            Node<PackageMergedNodeValue>\n        >() as MergedGraph;\n\n        newGraph.nodes.forEach((value, key) => {\n            // get node\n            const combinedNode = newGraph.nodes.get(key);\n            if (!combinedNode) {\n                return;\n            }\n\n            // check if added, changed, or unchanged\n            // if added (old graph doesnt have the package)\n            if (!oldGraph.nodes.has(key)) {\n                combinedNode.value = {\n                    ...combinedNode.value,\n                    change: \"added\",\n                    font: {\n                        color: theme.palette.success.main,\n                    },\n                    color: theme.palette.success.main,\n                    dependencies: value.adjacents.size,\n                    lockfile: [\"new\"],\n                };\n            }\n            // if the graph is not new then it is either equal or the version changed\n            else {\n                // set values that wont change\n                combinedNode.value = {\n                    ...combinedNode.value,\n                    dependencies: value.adjacents.size,\n                    lockfile: [\"new\", \"old\"],\n                };\n                // if the nodes are equal (version are the same)\n                if (\n                    value?.value?.metadata?.Version ===\n                    oldGraph.nodes.get(key)?.value?.metadata?.Version\n                ) {\n                    combinedNode.value = {\n                        ...combinedNode.value,\n                        change: \"unchanged\",\n                    };\n                }\n                // if the version changed\n                else {\n                    combinedNode.value = {\n                        ...combinedNode.value,\n                        change: \"version\",\n                        oldVersion:\n                            oldGraph.nodes.get(key)?.value?.metadata?.Version ??\n                            oldGraph.nodes.get(key)?.value?.version,\n                        font: {\n                            color: theme.palette.success.main,\n                        },\n                    };\n\n                    combinedNode.parents = new Set([\n                        ...combinedNode.parents,\n                        ...(oldGraph.nodes.get(key)?.parents ?? []),\n                    ]);\n\n                    const adjMap = new Map();\n                    combinedNode.adjacents.forEach(value => {\n                        adjMap.set(value.key, value);\n                    });\n\n                    oldGraph.nodes.get(key)?.adjacents.forEach(value => {\n                        if (!adjMap.has(value.key)) {\n                            adjMap.set(value.key, value);\n                        }\n                    });\n\n                    combinedNode.adjacents = new Set(adjMap.values());\n                }\n            }\n\n            mergedGraph.nodes.set(\n                key,\n                combinedNode as Node<PackageMergedNodeValue>,\n            );\n        });\n\n        oldGraph.nodes.forEach((value, key) => {\n            // get node\n            const combinedNode = oldGraph.nodes.get(key);\n            if (!combinedNode) {\n                return;\n            }\n\n            // only checking if package was removed\n            if (!newGraph.nodes.has(key)) {\n                combinedNode.value = {\n                    ...combinedNode.value,\n                    change: \"removed\",\n                    label:\n                        value.value.label +\n                        \" \" +\n                        (value?.value?.metadata?.Version ??\n                            value?.value?.version),\n                    font: {\n                        color: theme.palette.error.main,\n                    },\n                    color: theme.palette.error.main,\n                    version:\n                        value?.value?.metadata?.Version ??\n                        value?.value?.version,\n                    dependencies: value.adjacents.size,\n                    license: value?.value?.metadata?.License ?? \"\",\n                    lockfile: [\"old\"],\n                };\n\n                mergedGraph.nodes.set(\n                    key,\n                    combinedNode as Node<PackageMergedNodeValue>,\n                );\n            }\n        });\n\n        const visGraphEdges = new Map();\n\n        // add edges from old graph\n        oldGraph.nodes.forEach(value => {\n            // set package edges\n            value.adjacents.forEach(adj => {\n                visGraphEdges.set(value.value.id + adj.value.id, {\n                    id: value.value.id + adj.value.id,\n                    to: value.value.id,\n                    from: adj.value.id,\n                });\n            });\n        });\n\n        // add edges from new graph\n        newGraph.nodes.forEach(value => {\n            // set package edges\n            value.adjacents.forEach(adj => {\n                visGraphEdges.set(value.value.id + adj.value.id, {\n                    id: value.value.id + adj.value.id,\n                    to: value.value.id,\n                    from: adj.value.id,\n                });\n            });\n        });\n\n        // set justifications\n        discoverPackageChanges(\n            Array.from(mergedGraph.nodes.values()),\n            adviseDocument?.result?.report?.products?.[0]?.justification,\n        );\n\n        // add edges to merged graph Object\n        mergedGraph[\"visEdges\"] = Array.from(visGraphEdges.values());\n\n        setGraph(mergedGraph);\n    }, [oldGraph, newGraph, adviseDocument, theme]);\n\n    return graph;\n};\n","import React, { useContext } from \"react\";\nimport Select from \"@mui/material/Select\";\nimport { Box, MenuItem, Typography } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SpecContext } from \"features/package/routes/PackageOverview\";\nimport { BoxTypeMap } from \"@mui/material/Box/Box\";\n\ninterface IParamDropdown {\n    options: { value: string }[];\n    type: string;\n    label?: string;\n    disabled?: boolean;\n    props?: BoxTypeMap;\n}\n\nexport const ParamDropdown = ({\n    options,\n    type,\n    label,\n    disabled,\n    ...props\n}: IParamDropdown) => {\n    const navigate = useNavigate();\n    const { specs, defaultSpecs } = useContext(SpecContext);\n\n    const handleChange = (event: { target: { value: string } }) => {\n        switch (type) {\n            case \"package_version\":\n                navigate(\n                    `/package/${specs.package_name}/${event.target.value}`,\n                );\n                break;\n            case \"index_url\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(event.target.value)}`,\n                );\n                break;\n            case \"os_name\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${event.target.value}`,\n                );\n\n                break;\n            case \"os_version\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${specs.os_name ?? defaultSpecs.os_name}/${\n                        event.target.value\n                    }`,\n                );\n                break;\n            case \"python_version\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${specs.os_name ?? defaultSpecs.os_name}/${\n                        specs.os_version ?? defaultSpecs.os_version\n                    }/${event.target.value}`,\n                );\n                break;\n        }\n    };\n\n    return (\n        <Box {...props}>\n            <Typography variant=\"body2\">{label}</Typography>\n            <Select\n                displayEmpty\n                fullWidth\n                value={specs[type as keyof typeof specs] ?? \"\"}\n                onChange={handleChange}\n                size=\"small\"\n                variant=\"outlined\"\n                disabled={disabled}\n                renderValue={value => {\n                    if (!value) {\n                        return (\n                            <em style={{ color: \"grey\" }}>\n                                {defaultSpecs?.[type as keyof typeof specs] ??\n                                    label}\n                            </em>\n                        );\n                    } else {\n                        return value;\n                    }\n                }}\n            >\n                <MenuItem disabled value=\"\">\n                    <em>{label}</em>\n                </MenuItem>\n                {options.map(option => {\n                    return (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.value}\n                        </MenuItem>\n                    );\n                })}\n            </Select>\n        </Box>\n    );\n};\n","import React, { useContext, useMemo, useState } from \"react\";\n\n// material-ui\nimport { Box, Grid, IconButton, Skeleton, Typography } from \"@mui/material\";\nimport ArrowLeftIcon from \"@mui/icons-material/ArrowLeft\";\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\n\n// utils\nimport { ParamDropdown } from \"../ParamDropdown\";\nimport { SpecContext } from \"../../routes/PackageOverview\";\nimport { components } from \"lib/schema\";\n\nexport interface IPackageHeader {\n    /** Package metadata object.*/\n    metadata?: {\n        /** Name of package. */\n        Name: string;\n        /** Description of package. */\n        Summary?: string;\n        /** License of package */\n        License?: string;\n    };\n    /** list of all versions of a package **/\n    allVersions?: components[\"schemas\"][\"PythonPackageVersionsResponse\"][\"versions\"];\n    /** list of all environments of a package, version, index **/\n    allEnvironments?: components[\"schemas\"][\"PythonPackageVersionEnvironmentsResponse\"][\"environments\"];\n}\n\n/**\n * A header for package metadata.\n */\nexport const PackageHeader = ({\n    metadata,\n    allVersions = [],\n    allEnvironments = [],\n}: IPackageHeader) => {\n    const { defaultSpecs, specs } = useContext(SpecContext);\n    const [showEnvParams, setShowEnvParams] = useState(false);\n\n    const versionOptions = useMemo(() => {\n        const dups = new Set();\n        return allVersions\n            .filter(version => {\n                if (!dups.has(version.package_version)) {\n                    dups.add(version.package_version);\n                    return true;\n                }\n                return false;\n            })\n            .map(version => {\n                return {\n                    value: version.package_version,\n                };\n            })\n            .sort((a, b) => (a.value.split(\".\") > b.value.split(\".\") ? 1 : -1));\n    }, [allVersions]);\n\n    const indexUrlOptions = useMemo(() => {\n        const dups = new Set();\n        return allVersions\n            .filter(version => {\n                if (specs.package_version) {\n                    return specs.package_version === version.package_version;\n                } else {\n                    return (\n                        defaultSpecs.package_version === version.package_version\n                    );\n                }\n            })\n            .filter(version => {\n                if (!dups.has(version.index_url)) {\n                    dups.add(version.index_url);\n                    return true;\n                }\n                return false;\n            })\n            .map(version => {\n                return {\n                    value: version.index_url,\n                };\n            });\n    }, [allVersions]);\n\n    const [osNameOptions, osVersionOptions, pythonVersionOptions] =\n        useMemo(() => {\n            const name = allEnvironments.map(env => {\n                return {\n                    value: env.os_name,\n                };\n            });\n            const version = allEnvironments\n                .filter(env => !specs.os_name || specs.os_name === env.os_name)\n                .map(env => {\n                    return {\n                        value: env.os_version,\n                    };\n                });\n            const pyVersion = allEnvironments\n                .filter(\n                    env =>\n                        (!specs.os_name || specs.os_name === env.os_name) &&\n                        (!specs.os_version ||\n                            specs.os_version === env.os_version),\n                )\n                .map(env => {\n                    return {\n                        value: env.python_version,\n                    };\n                });\n            return [name, version, pyVersion];\n        }, [allEnvironments, specs]);\n\n    if (!metadata) {\n        return (\n            <Box data-testid=\"package-header-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div>\n            <Grid container alignItems=\"flex-end\" spacing={1}>\n                <Grid item>\n                    <Typography variant=\"h4\" mr={2}>\n                        <b>{metadata?.Name}</b>\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <ParamDropdown\n                        options={versionOptions ?? []}\n                        type=\"package_version\"\n                        label={\"Version\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <ParamDropdown\n                        options={indexUrlOptions ?? []}\n                        type=\"index_url\"\n                        label={\"Index URL\"}\n                        disabled={specs.package_version === undefined}\n                    />\n                </Grid>\n                {showEnvParams ? (\n                    <React.Fragment>\n                        <Grid item>\n                            <ParamDropdown\n                                options={osNameOptions ?? []}\n                                type=\"os_name\"\n                                label={\"OS Name\"}\n                                disabled={specs.index_url === undefined}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <ParamDropdown\n                                options={osVersionOptions ?? []}\n                                type=\"os_version\"\n                                label={\"OS Version\"}\n                                disabled={specs.os_name === undefined}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <ParamDropdown\n                                options={pythonVersionOptions ?? []}\n                                type=\"python_version\"\n                                label={\"Python Version\"}\n                                disabled={specs.os_version === undefined}\n                            />\n                        </Grid>\n                    </React.Fragment>\n                ) : null}\n                <Grid item xs={1}>\n                    <IconButton\n                        onClick={() => setShowEnvParams(!showEnvParams)}\n                        data-testid=\"package-header-expand-button\"\n                    >\n                        {showEnvParams ? (\n                            <ArrowLeftIcon fontSize=\"large\" />\n                        ) : (\n                            <ArrowRightIcon fontSize=\"large\" />\n                        )}\n                    </IconButton>\n                </Grid>\n            </Grid>\n\n            <Typography gutterBottom variant=\"body1\" mt={2}>\n                {metadata?.Summary ?? \"NaN\"}\n            </Typography>\n            <div>\n                <IconText\n                    text={metadata?.License ?? \"NaN\"}\n                    icon={<GavelIcon />}\n                />\n            </div>\n        </div>\n    );\n};\n","import { Button, Grid, Menu, MenuItem, Typography } from \"@mui/material\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport React, { useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface IVersionDropdown {\n    node: {\n        name: string;\n        versions: string[];\n        specifier: string;\n    };\n}\n\nexport const VersionDropdown = ({ node }: IVersionDropdown) => {\n    const [open, setOpen] = React.useState<string | null | undefined>(null);\n    const [anchorEl, setAnchorEl] = React.useState<Element | null>(null);\n    const navigate = useNavigate();\n\n    const versionOptions = useMemo(() => {\n        const options: { [key: string]: string[] } = {};\n        const distribution = [0, 0];\n        const noDup = new Set();\n        node.versions.forEach(version => {\n            const split = version.split(\".\");\n            const key = split[0] + \".\" + (split[1] ?? \"\");\n\n            if (options[key] === undefined) {\n                options[key] = [];\n                distribution[0] += 1;\n            }\n            if (!noDup.has(version)) {\n                options[key].push(version);\n                distribution[1] += 1;\n                noDup.add(version);\n            }\n        });\n\n        // check if there are too many buckets\n        if (distribution[0] / distribution[1] > 0.25) {\n            // merge buckets\n            const buckets = Math.ceil(distribution[0] * 0.25);\n            const fixedOptions: { [key: string]: string[] } = {};\n            let currentKey: string;\n            Object.keys(options).forEach((key, index, array) => {\n                if (index % buckets === 0) {\n                    currentKey = `${key} - ${\n                        array[index + buckets - 1] ?? array.at(-1)\n                    }`;\n                    fixedOptions[currentKey] = [];\n                }\n                fixedOptions[currentKey].push(...options[array[index]]);\n            });\n            return fixedOptions;\n        }\n\n        return options;\n    }, [node]);\n\n    return (\n        <div>\n            <Button\n                onClick={event => {\n                    setOpen(node.name);\n                    setAnchorEl(event.currentTarget);\n                }}\n                variant=\"outlined\"\n                endIcon={<KeyboardArrowDownIcon />}\n            >\n                {node.specifier ?? \"ANY\"}\n            </Button>\n            <Menu\n                open={open === node.name}\n                anchorEl={anchorEl}\n                onClose={() => {\n                    setOpen(undefined);\n                    setAnchorEl(null);\n                }}\n                PaperProps={{\n                    style: {\n                        maxHeight: \"40%\",\n                        maxWidth: \"50%\",\n                    },\n                }}\n            >\n                <MenuItem disabled={true}>\n                    Select a version to navigate to:\n                </MenuItem>\n                <Grid container alignContent=\"flex-start\">\n                    {Object.entries(versionOptions).map(([key, value]) => {\n                        return (\n                            <Grid item xs key={key}>\n                                <MenuItem sx={{ mt: 2 }} disabled divider>\n                                    {key}\n                                </MenuItem>\n                                {value.map(version => {\n                                    return (\n                                        <MenuItem\n                                            key={version}\n                                            onClick={() =>\n                                                navigate(\n                                                    `/package/${node.name}/${version}`,\n                                                )\n                                            }\n                                        >\n                                            <Typography variant={\"body2\"}>\n                                                {version}\n                                            </Typography>\n                                        </MenuItem>\n                                    );\n                                })}\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </Menu>\n        </div>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport InfoCard from \"components/Elements/InfoCard\";\nimport { Box, Divider, Grid, Skeleton, Typography } from \"@mui/material\";\nimport { VersionDropdown } from \"./VersionDropdown\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { SimplePackageNodeValue } from \"lib/interfaces/SimplePackageNodeValue\";\n\ninterface IPackageDependencies {\n    graph?: Graph<Node<SimplePackageNodeValue>>;\n}\n\ntype PackageDependenciesMetric = {\n    name: string;\n    versions: string[];\n    specifier: string;\n    extra: string[];\n};\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const PackageDependencies = ({ graph }: IPackageDependencies) => {\n    const metric = useMemo(() => {\n        if (!graph?.nodes) {\n            return;\n        }\n\n        const root = graph.nodes.get(\"*App\");\n\n        if (root) {\n            const bfs = graph.graphSearch(root);\n            const visitedOrder = Array.from(bfs);\n\n            const metric: PackageDependenciesMetric[] = [];\n\n            visitedOrder.forEach(node => {\n                if (node.key !== \"*App\" && !node.value.metadata) {\n                    metric.push({\n                        name: node.value.label ?? node.key,\n                        versions: node.value.versions ?? [],\n                        specifier: node.value.specifier ?? \"*\",\n                        extra: node.value.extra ?? [],\n                    });\n                }\n            });\n\n            return metric;\n        }\n    }, [graph]);\n\n    if (!metric) {\n        return (\n            <Box data-testid=\"package-dependencies-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <InfoCard\n            cardMeta={{\n                title: \"Dependencies\",\n            }}\n            cardBody={\n                <div data-testid=\"package-dependencies-loaded\">\n                    <Grid container>\n                        <Grid item xs>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Package\n                            </Typography>\n                        </Grid>\n                        <Grid item xs>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Versions\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Extra\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                    <Divider />\n                    <Grid container rowSpacing={2} mt={1}>\n                        {metric.map(node => {\n                            return (\n                                <Grid container item xs={12} key={node.name}>\n                                    <Grid item xs>\n                                        <Typography\n                                            variant=\"body1\"\n                                            gutterBottom\n                                        >\n                                            {node.name}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs>\n                                        <VersionDropdown node={node} />\n                                    </Grid>\n                                    <Grid item xs={2}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            gutterBottom\n                                        >\n                                            {node.extra?.join(\", \")}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n            }\n        />\n    );\n};\n","import React from \"react\";\n\ninterface IPackageNotFound {\n    package_name: string;\n    package_version: string;\n}\n\nexport const PackageNotFound = ({\n    package_name,\n    package_version,\n}: IPackageNotFound) => {\n    return (\n        <div>\n            `&quot;{package_name}\n            {package_version ? \" \" + package_version : \"\"}&quot;` not found\n        </div>\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery, useInfiniteQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/versions\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type PackageVersionsRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageVersions = async (\n    name: requestParams[\"name\"],\n    page: requestParams[\"page\"] = 0,\n    per_page: requestParams[\"per_page\"] = 100,\n) => {\n    return axios.get<PackageVersionsRequestResponseSuccess>(\n        THOTH_URL + \"/python/package/versions\",\n        {\n            params: {\n                name: name,\n                page: page,\n                per_page: per_page,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageVersions = (\n    name: requestParams[\"name\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<PackageVersionsRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!name,\n        queryKey: [\"packageVersions\", name],\n        queryFn: () => getPackageVersions(name),\n    });\n};\n\nexport const useInfinitePackageVersions = (\n    name: requestParams[\"name\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useInfiniteQuery<\n        AxiosResponse<PackageVersionsRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!name,\n        queryKey: [\"packageVersions\", name],\n        queryFn: input => {\n            return getPackageVersions(name, input.pageParam);\n        },\n        getNextPageParam: lastPage => {\n            const parameters: requestParams = (\n                lastPage.data as typeof lastPage.data & {\n                    parameters: requestParams;\n                }\n            ).parameters;\n            return lastPage.data.versions.length === 0\n                ? undefined\n                : (parameters.page ?? 0) + 1;\n        },\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/version/environments\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport const getPackageEnvironments = async (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n) => {\n    return axios.get(THOTH_URL + \"/python/package/version/environments\", {\n        params: {\n            name: name,\n            version: version,\n            index: index,\n        },\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const usePackageEnvironments = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<AxiosResponse<requestResponseSuccess>, AxiosError>({\n        ...config,\n        enabled: !!name && !!version && !!index,\n        queryKey: [\"packageEnvironments\", name, version, index],\n        queryFn: () => getPackageEnvironments(name, version, index),\n    });\n};\n","import { useEffect, useState } from \"react\";\nimport {\n    PackageVersionsRequestResponseSuccess,\n    useInfinitePackageVersions,\n} from \"../api\";\n\nexport const useAllVersions = (package_name: string) => {\n    const versions = useInfinitePackageVersions(package_name);\n    const [allVersions, setAllVersions] = useState<\n        PackageVersionsRequestResponseSuccess[\"versions\"] | undefined\n    >([]);\n\n    useEffect(() => {\n        if (versions.isSuccess) {\n            // if has a next page, and is not currently fetching a page\n            if (versions.hasNextPage && !versions.isFetchingNextPage) {\n                versions.fetchNextPage().then();\n            } else if (!versions.hasNextPage && !versions.isFetchingNextPage) {\n                let merged: PackageVersionsRequestResponseSuccess[\"versions\"] =\n                    [];\n                versions.data.pages.forEach(page => {\n                    merged = [...merged, ...page.data.versions];\n                });\n                if (merged.length > 0) {\n                    merged = merged.reverse();\n                    setAllVersions(merged);\n                } else {\n                    setAllVersions(undefined);\n                }\n            }\n        }\n    }, [versions.data]);\n\n    return allVersions;\n};\n","import React from \"react\";\n\ninterface IErrorPage {\n    message: string;\n    type: string | number;\n    reason: string;\n}\n\nexport const ErrorPage = ({ message, type, reason }: IErrorPage) => {\n    return (\n        <div>\n            <p>\n                {type}\n                {\": \"}\n                {message}\n            </p>\n            <p>{reason}</p>\n        </div>\n    );\n};\n","// React\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// local\nimport { PackageDependencies, PackageHeader } from \"../components\";\n\n// material-ui\nimport { CircularProgress, Grid } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { usePackageMetadata } from \"api\";\nimport { PackageNotFound } from \"./PackageNotFound\";\nimport { useAllVersions, useSimpleGraph } from \"../hooks\";\nimport { usePackageEnvironments } from \"../api\";\nimport { ErrorPage } from \"routes/ErrorPage\";\nimport { PackageMetadata } from \"lib/types/PackageMetadata\";\n\ntype SpecDetails = {\n    package_name: string;\n    package_version?: string;\n    index_url?: string;\n    os_name?: string;\n    os_version?: string;\n    python_version?: string;\n};\n\nexport const SpecContext = React.createContext<{\n    specs: SpecDetails;\n    defaultSpecs: SpecDetails;\n}>({ specs: { package_name: \"\" }, defaultSpecs: { package_name: \"\" } });\n\n// The page that displays all analysis data\nexport const PackageOverview = () => {\n    const params = useParams<SpecDetails>();\n    const [defaultSpecs, setDefaultSpecs] = useState<SpecDetails>({\n        package_name: params.package_name ?? \"\",\n        package_version: undefined,\n        index_url: undefined,\n        os_name: undefined,\n        os_version: undefined,\n        python_version: undefined,\n    });\n\n    // what is on the url params\n    const specs = useMemo<SpecDetails>(() => {\n        return {\n            package_name: params.package_name ?? \"\",\n            package_version: params?.package_version,\n            index_url: params?.index_url\n                ? decodeURIComponent(params.index_url)\n                : undefined,\n            os_name: params?.os_name,\n            os_version: params?.os_version,\n            python_version: params?.python_version,\n        };\n    }, [params]);\n\n    // get all pages of versions/indexes and merge them together\n    const allVersions = useAllVersions(specs.package_name);\n\n    // get environments for specific package, version, index\n    const allEnvironments = usePackageEnvironments(\n        specs.package_name,\n        specs.package_version ?? defaultSpecs.package_version,\n        specs.index_url ?? defaultSpecs.index_url,\n        { useErrorBoundary: false },\n    );\n\n    // some params are optional but still need a default value\n    useEffect(() => {\n        const d: SpecDetails = {\n            package_name: params.package_name ?? \"\",\n            package_version: undefined,\n            index_url: undefined,\n            os_name: undefined,\n            os_version: undefined,\n            python_version: undefined,\n        };\n\n        // get default package version and index\n        // needs package name and versions list\n        if (specs.package_name) {\n            if (allVersions && allVersions.length > 0) {\n                d.package_version = allVersions.at(0)?.package_version;\n                d.index_url = allVersions.at(0)?.index_url;\n            }\n        }\n\n        // get default environment\n        // needs list of environments\n        if (\n            allEnvironments.data &&\n            allEnvironments.data.data.environments.length > 0\n        ) {\n            const filtered = allEnvironments.data.data.environments.filter(\n                env =>\n                    (!specs.os_name || specs.os_name === env.os_name) &&\n                    (!specs.os_version || specs.os_version === env.os_version),\n            );\n            if (filtered.length > 0) {\n                d.os_name = filtered.at(0)?.os_name;\n                d.os_version = filtered.at(0)?.os_version;\n                d.python_version = filtered.at(0)?.python_version;\n            }\n        }\n\n        if (\n            Object.entries(defaultSpecs).some(\n                ([key, val]) => d[key as keyof typeof d] !== val,\n            )\n        ) {\n            setDefaultSpecs(d);\n        }\n    }, [allVersions, allEnvironments, specs]);\n\n    // get package metadata\n    const metadata = usePackageMetadata(\n        specs.package_name,\n        specs.package_version ?? defaultSpecs.package_version,\n        specs.index_url ?? defaultSpecs.index_url,\n        specs.os_name ?? defaultSpecs.os_name,\n        specs.os_version ?? defaultSpecs.os_version,\n        specs.python_version ?? defaultSpecs.python_version,\n        { useErrorBoundary: false },\n    );\n\n    const graph = useSimpleGraph(metadata);\n\n    if (metadata.isLoading || allVersions?.length === 0) {\n        return (\n            <div\n                className=\"w-full h-48 flex justify-center items-center\"\n                data-testid=\"loading\"\n            >\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (!metadata.data) {\n        if (metadata?.error?.response?.data?.error) {\n            return (\n                <ErrorPage\n                    message={metadata.error.response.data.error}\n                    type={metadata.error.response.status}\n                    reason={`${\n                        metadata?.error?.config?.url\n                    } failed with params ${JSON.stringify(\n                        metadata?.error?.config?.params,\n                    )}`}\n                />\n            );\n        }\n        return (\n            <PackageNotFound\n                package_name={params.package_name ?? \"\"}\n                package_version={params.package_version ?? \"\"}\n            />\n        );\n    }\n\n    return (\n        <SpecContext.Provider value={{ specs, defaultSpecs }}>\n            <Grid container>\n                <Grid item xs={12} mb={3}>\n                    <PackageHeader\n                        metadata={\n                            metadata.data.data.metadata.importlib_metadata\n                                .metadata as PackageMetadata\n                        }\n                        allVersions={allVersions}\n                        allEnvironments={\n                            allEnvironments?.data?.data?.environments\n                        }\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <PackageDependencies graph={graph} />\n                </Grid>\n            </Grid>\n        </SpecContext.Provider>\n    );\n};\n","import { useEffect, useState } from \"react\";\n\n// utils\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\n\nimport { usePackageMetadata } from \"api\";\nimport { PackageMetadata } from \"lib/types/PackageMetadata\";\nimport { SimplePackageNodeValue } from \"lib/interfaces/SimplePackageNodeValue\";\n\nexport type PackageDependencyMetric = {\n    extra: string[];\n    extras: string[];\n    marker: string;\n    marker_evaluated: string;\n    marker_evaluation_error: string | null;\n    marker_evaluation_result: boolean;\n    specifier: string;\n    versions: string[];\n};\n\n/**\n * Given a list of packages, create a graph using metadata information.\n */\nexport function useSimpleGraph(\n    metadata: ReturnType<typeof usePackageMetadata>,\n) {\n    const [graph, setGraph] = useState<Graph<Node<SimplePackageNodeValue>>>();\n\n    useEffect(() => {\n        if (metadata.status !== \"success\") {\n            return;\n        }\n\n        // create graph\n        const tempGraph: Graph<Node<SimplePackageNodeValue>> = new Graph();\n\n        // add app node to graph\n        const app = tempGraph.addVertex(\n            \"*App\",\n            {\n                id: \"*App\",\n                label: \"App\",\n                depth: -1,\n            },\n            Node,\n        );\n\n        const root = tempGraph.addVertex(\n            metadata.data.data.metadata.package_name.toLowerCase(),\n            {\n                id: metadata.data.data.metadata.package_name.toLowerCase(),\n                label: metadata.data.data.metadata.package_name,\n                metadata: metadata.data.data.metadata.importlib_metadata\n                    .metadata as PackageMetadata,\n                depth: 0,\n            },\n            Node,\n        );\n\n        root.parents = new Set();\n        root.parents.add(\"*App\");\n        tempGraph.addEdge(app.key, root.key);\n\n        // add deps to graph\n        Object.entries(\n            metadata.data.data.metadata.dependencies as {\n                [key: string]: PackageDependencyMetric;\n            },\n        ).forEach(([name, value]) => {\n            // add package to graph\n            const node = tempGraph.addVertex(\n                name.toLowerCase(),\n                {\n                    id: name.toLowerCase(),\n                    label: name,\n                    metadata: null,\n                    versions: value.versions,\n                    specifier: value.specifier,\n                    extra: value.extra,\n                    depth: 1,\n                },\n                Node,\n            );\n            node.parents = new Set();\n\n            tempGraph.addEdge(root.key, node.key);\n\n            // set parent\n            node.parents.add(root.key);\n        });\n\n        setGraph(tempGraph);\n    }, [metadata.data]);\n\n    return graph;\n}\n","// React\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport { PackageOverview } from \"./PackageOverview\";\nimport { NotFound } from \"routes/NotFound\";\nimport { NavigationLayout } from \"components/Layout/NavigationLayout\";\n\n// The page that displays all analysis data\nexport const PackageRoutes = () => {\n    return (\n        <NavigationLayout>\n            <Routes>\n                <Route\n                    path=\"/:package_version/:index_url/:os_name/:os_version/:python_version\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url/:os_name\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url/:os_name/:os_version\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url\"\n                    element={<PackageOverview />}\n                />\n                <Route path=\"/:package_version\" element={<PackageOverview />} />\n                <Route path=\"/\" element={<PackageOverview />} />\n                <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n        </NavigationLayout>\n    );\n};\n","// React\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Typography, Chip, Button, Collapse, Stack } from \"@mui/material\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport FeedRoundedIcon from \"@mui/icons-material/FeedRounded\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\n\n// utils\nimport { calcTime } from \"utils/calcTime\";\nimport { components } from \"lib/schema\";\nimport { ChipProps } from \"@mui/material/Chip/Chip\";\n\ninterface IImageHeader {\n    imageDocument: components[\"schemas\"][\"AnalysisResultResponse\"] &\n        components[\"schemas\"][\"AnalysisStatusResponse\"];\n    logs?: components[\"schemas\"][\"AnalysisLogResponse\"][\"log\"];\n}\n\n/**\n * Displays basic Advise document information and\n * displays any errors, info, or warnings that came up\n * in the document generation.\n */\nexport const ImageHeader = ({ imageDocument, logs }: IImageHeader) => {\n    const [showLogs, setShowLogs] = React.useState(false);\n    const [selectedLine, setSelectedLine] = React.useState<\n        number | undefined\n    >();\n\n    // get status of the report\n    const [statusText, statusColor]: [string, ChipProps[\"color\"] | undefined] =\n        useMemo(() => {\n            if (imageDocument?.result) {\n                return [\"COMPLETE\", \"success\"];\n            }\n            // if report is not done\n            else if (imageDocument?.status?.state) {\n                return [imageDocument.status.state.toUpperCase(), \"info\"];\n            } else {\n                return [\"UNKNOWN\", undefined];\n            }\n        }, [imageDocument]);\n\n    return (\n        <div>\n            <Typography variant=\"h4\" mb={2}>\n                <b>\n                    {imageDocument?.metadata?.document_id ??\n                        imageDocument.parameters.analysis_id}\n                </b>\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n                <Chip label={statusText} color={statusColor} />\n                <IconText\n                    text={calcTime(\n                        imageDocument?.status?.finished_at,\n                        imageDocument?.status?.started_at,\n                        imageDocument?.metadata?.datetime,\n                    )}\n                    icon={<AccessTimeIcon />}\n                />\n                <Button\n                    sx={{ marginLeft: 2 }}\n                    onClick={() => setShowLogs(!showLogs)}\n                >\n                    <IconText text=\"Logs\" icon={<FeedRoundedIcon />} />\n                </Button>\n            </Stack>\n            <Collapse in={showLogs}>\n                {logs?.split(\"\\n\").map((line, i) => {\n                    return (\n                        <Typography\n                            key={i}\n                            noWrap={selectedLine !== i}\n                            onClick={() =>\n                                setSelectedLine(\n                                    selectedLine === i ? undefined : i,\n                                )\n                            }\n                            variant=\"body2\"\n                            sx={{\n                                backgroundColor:\n                                    selectedLine === i\n                                        ? \"lightyellow\"\n                                        : i % 2 === 0\n                                        ? \"lightgray\"\n                                        : \"unset\",\n                            }}\n                        >\n                            {line}\n                        </Typography>\n                    );\n                }) ?? \"Image log is not available.\"}\n            </Collapse>\n        </div>\n    );\n};\n","// react\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n// material-ui\nimport { Box, Skeleton } from \"@mui/material\";\nimport { components } from \"lib/schema\";\n\ninterface IDebInfo {\n    /** An object holding metric info. */\n    imageDocument: components[\"schemas\"][\"AnalysisResultResponse\"];\n}\n\nconst columns = [\n    { field: \"name\", headerName: \"Package Name\", flex: 1 },\n    { field: \"version\", headerName: \"Version\", flex: 0.5 },\n    { field: \"arch\", headerName: \"Architecture\", flex: 0.5 },\n];\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const DebInfo = ({ imageDocument }: IDebInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div style={{ height: 400, width: \"100%\" }}>\n            <DataGrid\n                disableSelectionOnClick\n                disableColumnSelector\n                hideFooterSelectedRowCount\n                getRowId={row => row.package_identifier}\n                density=\"compact\"\n                rows={imageDocument?.result?.[\"deb\"]}\n                columns={columns}\n                pageSize={50}\n                rowsPerPageOptions={[25, 50, 100]}\n            />\n        </div>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Box, Grid, Skeleton, Stack, Typography } from \"@mui/material\";\nimport { Chip } from \"@mui/material\";\nimport { ImageDocumentRequestResponseSuccess } from \"../../api\";\n\ninterface IPythonInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n}\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const PythonInfo = ({ imageDocument }: IPythonInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box data-testid=\"python-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    const files = useMemo(() => {\n        if (!imageDocument?.result?.[\"python-files\"]) {\n            return [];\n        }\n\n        const paths = new Map();\n        imageDocument.result[\"python-files\"].forEach(file => {\n            const split = file.filepath.split(\"/\", 4);\n            const key = split[1] + \"/\" + split[2] + \"/\" + split[3];\n            if (paths.has(key)) {\n                paths.set(key, paths.get(key) + 1);\n            } else {\n                paths.set(key, 1);\n            }\n        });\n        return Array.from(paths.entries()).map(([key, value]) => {\n            return {\n                path: key,\n                count: value,\n            };\n        });\n    }, [imageDocument]);\n\n    const interpreters = useMemo(() => {\n        return imageDocument.result[\"python-interpreters\"].filter(\n            interpreter => !!interpreter.version,\n        );\n    }, [imageDocument]);\n\n    return (\n        <Stack direction=\"column\" spacing={3}>\n            {interpreters?.length > 0 ? (\n                <Stack direction=\"row\" spacing={1} alignItems={\"center\"}>\n                    <Typography variant={\"h6\"}>\n                        Python interpreters:{\" \"}\n                    </Typography>\n                    {interpreters.map((interpreter, i) => {\n                        return (\n                            <Chip\n                                data-testid=\"python-info-chip\"\n                                key={(interpreter?.version ?? \"\") + i}\n                                label={interpreter.version}\n                            />\n                        );\n                    })}\n                </Stack>\n            ) : undefined}\n            <div data-testid=\"python-info-loaded\">\n                <Stack direction=\"row\" spacing={1} mb={1} alignItems={\"center\"}>\n                    <Typography variant={\"h6\"}>\n                        Total number of Python files:{\" \"}\n                    </Typography>\n                    <Typography variant={\"body1\"}>\n                        {files.reduce((prev, cur) => prev + cur.count, 0)}\n                    </Typography>\n                </Stack>\n                <Grid container>\n                    {files\n                        .sort((a, b) => b.count - a.count)\n                        .map(file => {\n                            return (\n                                <Grid\n                                    key={file.path}\n                                    item\n                                    xs={12}\n                                    lg={6}\n                                    xl={4}\n                                >\n                                    <Stack\n                                        ml={3}\n                                        direction=\"row\"\n                                        spacing={1}\n                                        alignItems={\"center\"}\n                                        justifyContent={\"space-between\"}\n                                    >\n                                        <Typography variant={\"body2\"}>\n                                            {file.path}:\n                                        </Typography>\n                                        <Typography variant={\"body2\"}>\n                                            <b>{file.count}</b>\n                                        </Typography>\n                                    </Stack>\n                                </Grid>\n                            );\n                        })}\n                </Grid>\n            </div>\n        </Stack>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Box, Grid, Skeleton, Stack, Typography } from \"@mui/material\";\nimport { Chip } from \"@mui/material\";\nimport {\n    ImageDocumentRequestResponseSuccess,\n    ImageMetadataRequestResponseSuccess,\n} from \"../../api\";\n\nexport interface IImageInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n    imageMetadata?: ImageMetadataRequestResponseSuccess;\n}\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const ImageInfo = ({ imageDocument, imageMetadata }: IImageInfo) => {\n    const params = useMemo(() => {\n        if (imageMetadata) {\n            return imageMetadata as ImageMetadataRequestResponseSuccess & {\n                labels: { [key: string]: string };\n            };\n        } else if (imageDocument?.result?.[\"skopeo-inspect\"]) {\n            return {\n                architecture:\n                    imageDocument.result[\"skopeo-inspect\"].Architecture,\n                created: imageDocument.result[\"skopeo-inspect\"].Created,\n                digest: imageDocument.result[\"skopeo-inspect\"].Digest,\n                docker_version:\n                    imageDocument.result[\"skopeo-inspect\"].DockerVersion,\n                labels: imageDocument.result[\"skopeo-inspect\"].Labels as {\n                    [key: string]: string;\n                },\n                layers: imageDocument.result[\"skopeo-inspect\"].Layers,\n                os: imageDocument.result[\"skopeo-inspect\"].Os,\n                repo_tags: imageDocument.result[\"skopeo-inspect\"].RepoTags,\n            };\n        }\n    }, [imageDocument, imageMetadata]);\n\n    if (!params) {\n        return (\n            <Box data-testid=\"image-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                    <Typography variant={\"body1\"}>\n                        <b>{params.labels?.[\"io.k8s.display-name\"]}</b>\n                    </Typography>\n                    <Chip label={params.labels?.name.split(\":\").at(-1)} />\n                </Stack>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant={\"h6\"} mb={1}>\n                    General information\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Summary\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.summary}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Description\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.description}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Provider\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.vendor}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Maintainer\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.maintainer}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Build date\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {new Date(\n                        params.labels?.[\"build-date\"] as string,\n                    ).toLocaleDateString()}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={12}>\n                <Typography variant={\"h6\"} mb={1}>\n                    Technical information\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Image name\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>{params.labels?.name}</Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Image version\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.version}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Architecture\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>{params.architecture}</Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Usage\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    <code>{params.labels?.usage}</code>\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Exposed Ports\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.[\"io.openshift.expose-services\"]}\n                </Typography>\n            </Grid>\n        </Grid>\n    );\n};\n","// react\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n// material-ui\nimport { Box, Skeleton } from \"@mui/material\";\nimport { ImageDocumentRequestResponseSuccess } from \"../../api\";\n\ninterface IRPMInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n}\n\ntype RPMDependency = {\n    arch: string;\n    dependencies: string[];\n    epoch: string | null;\n    name: string;\n    package_identifier: string;\n    release: string;\n    src: boolean;\n    version: string;\n};\n\nconst columns = [\n    { field: \"name\", headerName: \"Package Name\", flex: 1 },\n    { field: \"version\", headerName: \"Version\", flex: 0.5 },\n    { field: \"release\", headerName: \"Release\", flex: 0.25 },\n    {\n        field: \"dependencies\",\n        headerName: \"Dependencies\",\n        flex: 0.5,\n        valueGetter: (params: { row: RPMDependency }) =>\n            params.row?.dependencies?.length ?? 0,\n        sortable: false,\n    },\n    { field: \"epoch\", headerName: \"Epoch\", flex: 0.5 },\n    { field: \"arch\", headerName: \"Architecture\", flex: 0.5 },\n];\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const RPMInfo = ({ imageDocument }: IRPMInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box data-testid=\"rpm-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div\n            style={{ height: 400, width: \"100%\" }}\n            data-testid=\"rpm-info-loaded\"\n        >\n            <DataGrid\n                disableSelectionOnClick\n                disableColumnSelector\n                hideFooterSelectedRowCount\n                getRowId={row => row.package_identifier}\n                density=\"compact\"\n                rows={\n                    imageDocument?.result?.[\n                        \"rpm-dependencies\"\n                    ] as RPMDependency[]\n                }\n                columns={columns}\n                pageSize={50}\n                rowsPerPageOptions={[25, 50, 100]}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport InfoCard from \"components/Elements/InfoCard\";\nimport { DependenciesMetric, LicenseMetric } from \"components/Metrics\";\nimport { Masonry } from \"@mui/lab\";\nimport { DebInfo, PythonInfo, ImageInfo, RPMInfo } from \"../components\";\nimport {\n    ImageDocumentRequestResponseSuccess,\n    ImageMetadataRequestResponseSuccess,\n} from \"../api\";\nimport { ImageMetrics } from \"../hooks\";\n\ninterface IImageSummary {\n    imageDocument: ImageDocumentRequestResponseSuccess;\n    imageMetadata?: ImageMetadataRequestResponseSuccess;\n    metrics: ImageMetrics;\n}\n\nexport const ImageSummary = ({\n    metrics,\n    imageDocument,\n    imageMetadata,\n}: IImageSummary) => {\n    return (\n        <Masonry columns={{ xs: 1, md: 2 }} spacing={3} sx={{ mb: 3, mt: 1 }}>\n            {imageDocument || imageMetadata ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Image Details\",\n                        }}\n                        cardBody={\n                            <ImageInfo\n                                imageDocument={imageDocument}\n                                imageMetadata={imageMetadata}\n                            />\n                        }\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument?.result?.[\"python-interpreters\"]?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Details\",\n                        }}\n                        cardBody={<PythonInfo imageDocument={imageDocument} />}\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument?.result?.[\"rpm-dependencies\"]?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"RPM Details\",\n                        }}\n                        cardBody={<RPMInfo imageDocument={imageDocument} />}\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument.result?.deb?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Debian Details\",\n                        }}\n                        cardBody={<DebInfo imageDocument={imageDocument} />}\n                    />{\" \"}\n                </div>\n            ) : undefined}\n\n            {Object.keys(metrics?.dependencies?.all ?? {}).length !== 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Packages Dependencies\",\n                        }}\n                        cardBody={\n                            <DependenciesMetric\n                                metric={metrics?.dependencies}\n                            />\n                        }\n                    />\n                </div>\n            ) : undefined}\n\n            {Object.keys(metrics?.licenses ?? {}).length !== 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Packages Licenses\",\n                        }}\n                        cardBody={<LicenseMetric metric={metrics?.licenses} />}\n                    />{\" \"}\n                </div>\n            ) : undefined}\n        </Masonry>\n    );\n};\n","import axios, { AxiosResponse, AxiosError } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { paths } from \"lib/schema\";\nimport { THOTH_URL } from \"config\";\n\ntype path = paths[\"/analyze/{analysis_id}\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\nexport type ImageDocumentRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\nexport type ImageDocumentRequestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/analyze`\n *\n * @param analysis_id - the image document id (ex: `package-extract-211112223258-38af1a4746733b53`)\n */\nexport const getImageDocument = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get<ImageDocumentRequestResponseSuccess>(\n        THOTH_URL + \"/analyze/\" + analysis_id,\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useImageDocument = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<ImageDocumentRequestResponseSuccess>,\n        AxiosError<ImageDocumentRequestResponseFailure>\n    >({\n        ...config,\n        enabled: !!analysis_id,\n        queryKey: [\"ImageDocument\", analysis_id],\n        queryFn: () => getImageDocument(analysis_id),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/analyze/{analysis_id}/log\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/image/logs`\n *\n * @param analysis_id - the image document id (ex: `package-extract-211112223258-38af1a4746733b53`)\n */\nexport const getImageLogs = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get(THOTH_URL + \"/analyze/\" + analysis_id + \"/log\", {\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const useImageLogs = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!analysis_id,\n        queryKey: [\"ImageLogs\", analysis_id],\n        queryFn: () => getImageLogs(analysis_id),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/image/metadata\"][\"post\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type ImageMetadataRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\nexport type ImageMetadataRequestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"403\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/analyze`\n *\n * @param image the name of the image\n */\nexport const getImageMetadata = async (image: requestParams[\"image\"]) => {\n    return axios.post(\n        THOTH_URL + \"/image/metadata\",\n        {},\n        {\n            params: {\n                image: image,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useImageMetadata = (\n    image_name: requestParams[\"image\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<ImageMetadataRequestResponseSuccess>,\n        AxiosError<ImageMetadataRequestResponseFailure>\n    >({\n        ...config,\n        enabled: !!image_name,\n        queryKey: [\"ImageMetadata\", image_name],\n        queryFn: () => getImageMetadata(image_name),\n    });\n};\n","import React from \"react\";\n\ninterface IImageNotFound {\n    analysis_id?: string;\n}\n\nexport const ImageNotFound = ({ analysis_id }: IImageNotFound) => {\n    return <div> &quot;{analysis_id}&quot; not found</div>;\n};\n","import React, { useMemo } from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\n\n// sub-routes\nimport { ImageSummary } from \"./ImageSummary\";\n\n// feature specific imports\nimport { useImageDocument, useImageLogs, useImageMetadata } from \"../api\";\n\n// misc\nimport { CircularProgress } from \"@mui/material\";\nimport { ImageNotFound } from \"./ImageNotFound\";\nimport { NavigationLayout } from \"components/Layout/NavigationLayout\";\nimport { useGraph } from \"hooks\";\nimport { useMetrics } from \"../hooks\";\nimport { ImageHeader } from \"../components\";\nimport { formatImagePackages } from \"../utils\";\nimport { components } from \"lib/schema\";\nimport { AxiosResponse } from \"axios\";\nimport { postImageAnalyze } from \"../../home/api\";\n\nexport const ImageRoutes = () => {\n    // get document id\n    const { analysis_id } = useParams();\n    const { state } = useLocation();\n    const navigate = useNavigate();\n\n    // api get thoth image analysis document\n    const imageDocument = useImageDocument(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: (\n            data: AxiosResponse<\n                components[\"schemas\"][\"AnalysisStatusResponse\"]\n            >,\n        ) => {\n            if (data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    const imageMetadata = useImageMetadata(\n        (state as { image_name?: string })?.image_name ??\n            (\n                imageDocument.data?.data?.metadata?.arguments as {\n                    \"extract-image\": { image: string };\n                }\n            )?.[\"extract-image\"]?.image,\n    );\n\n    const logs = useImageLogs(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: () => {\n            if (imageDocument.data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    // format init graph data\n    const graphData = useMemo(() => {\n        if (imageDocument.data?.data?.metadata) {\n            const os = {\n                name:\n                    (imageDocument.data.data.result?.[\"operating-system\"]\n                        ?.id as string) ?? \"rhel\",\n                version:\n                    (\n                        imageDocument.data.data.result?.[\"operating-system\"]\n                            ?.version_id as string\n                    )?.split(\".\")[0] ?? \"8\",\n                python_version:\n                    imageDocument.data.data.metadata.python.major +\n                    \".\" +\n                    imageDocument.data.data.metadata.python.minor,\n            };\n            return formatImagePackages(\n                imageDocument.data.data.result[\"python-packages\"],\n                os,\n            );\n        }\n    }, [imageDocument.data]);\n\n    // create init graph\n    const graph = useGraph(graphData);\n\n    // compute metric data\n    const metrics = useMetrics(graph);\n\n    if (imageDocument?.isLoading) {\n        return (\n            <div className=\"w-full h-48 flex justify-center items-center\">\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (!imageDocument?.data) {\n        const name = (state as { image_name?: string })?.image_name;\n        if (name) {\n            postImageAnalyze(name).then(response => {\n                navigate(\"/image/\" + response.data.analysis_id, {\n                    state: { image_name: name },\n                });\n            });\n            return (\n                <div className=\"w-full h-48 flex justify-center items-center\">\n                    <CircularProgress />\n                </div>\n            );\n        }\n        return (\n            <div data-testid=\"image-not-loaded\">\n                <NavigationLayout>\n                    <ImageNotFound analysis_id={analysis_id} />\n                </NavigationLayout>\n            </div>\n        );\n    }\n\n    return (\n        <div data-testid=\"image-loaded\">\n            <NavigationLayout goHome={true}>\n                <ImageHeader\n                    imageDocument={imageDocument.data?.data}\n                    logs={logs.data?.data?.log}\n                />\n                <ImageSummary\n                    imageMetadata={imageMetadata.data?.data}\n                    metrics={metrics}\n                    imageDocument={imageDocument.data?.data}\n                />\n            </NavigationLayout>\n        </div>\n    );\n};\n","import { useMemo } from \"react\";\nimport {\n    useLicenseMetric,\n    useDependencyMetric,\n    DependencyMetricType,\n    LicenseMetricType,\n} from \"hooks/metrics\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type ImageMetrics = {\n    dependencies: DependencyMetricType | null;\n    licenses: LicenseMetricType | null;\n};\n\nexport function useMetrics(graph?: Graph<Node<PackageNodeValue>>) {\n    const dependencyMetric = useDependencyMetric(graph);\n    const licenseMetric = useLicenseMetric(graph);\n\n    return useMemo(() => {\n        const base: ImageMetrics = {\n            dependencies: null,\n            licenses: null,\n        };\n\n        if (dependencyMetric) {\n            base.dependencies = dependencyMetric;\n        }\n        if (licenseMetric) {\n            base.licenses = licenseMetric;\n        }\n\n        return base;\n    }, [dependencyMetric, licenseMetric]);\n}\n","type ImagePackages = {\n    package_name: string;\n    package_version: string;\n};\n\ntype OS = { name: string; version: string; python_version: string };\n\nexport function formatImagePackages(image_packages: ImagePackages[], os: OS) {\n    return image_packages.map(p => {\n        return {\n            name: p.package_name,\n            version: p.package_version,\n            index: \"https://pypi.org/simple\",\n            os_name: os.name,\n            os_version: os.version,\n            python_version: os.python_version,\n        };\n    });\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { Home } from \"features/home\";\nimport { NotFound } from \"routes/NotFound\";\nimport { AdviseRoutes } from \"features/advise\";\nimport { PackageRoutes } from \"features/package\";\nimport { ImageRoutes } from \"features/image\";\n\nexport const RouterConfig = () => {\n    return (\n        <BrowserRouter\n            basename={\n                process.env.REACT_APP_DEPLOYMENT === \"STAGE\"\n                    ? \"/search-stage\"\n                    : \"/search\"\n            }\n        >\n            <Routes>\n                <Route path={\"/\"} element={<Home />} />\n                <Route\n                    path={\"advise/:analysis_id/*\"}\n                    element={<AdviseRoutes />}\n                />\n                <Route\n                    path={\"package/:package_name/*\"}\n                    element={<PackageRoutes />}\n                />\n                <Route\n                    path={\"image/:analysis_id/*\"}\n                    element={<ImageRoutes />}\n                />\n                <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n        </BrowserRouter>\n    );\n};\n\nexport default RouterConfig;\n","import React from \"react\";\nimport { AppProvider } from \"providers/app\";\nimport RouterConfig from \"routes/RouterConfig\";\n\nfunction App() {\n    return (\n        <AppProvider>\n            <RouterConfig />\n        </AppProvider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}