{"version":3,"sources":["lib/react-query.ts","styles/Theme.tsx","stores/Global.tsx","providers/app.tsx","components/Elements/TabPanel/TabPanel.tsx","assets/thoth-logo.png","components/Elements/SearchBar/SearchBar.tsx","config/index.ts","features/home/api/postAdvise.ts","features/home/api/getPackageExists.ts","features/home/api/postImageAnalyze.ts","features/home/api/getContainerImages.ts","features/home/components/PackageSearch.tsx","features/home/components/ComboBox/ComboBox.tsx","components/Elements/GenericTable/GenericTable.tsx","features/advise/api/getPackageDependencies.ts","features/advise/api/getAdviseDocument.ts","features/advise/api/getAdviseLogs.ts","utils/timeSince.ts","utils/calcTime.ts","features/home/components/AdviseCreation.tsx","features/home/components/ImageSearch.tsx","features/home/routes/index.tsx","routes/NotFound.tsx","components/Elements/InfoCard/InfoCard.tsx","components/Elements/ProgressBar/ProgressBar.tsx","components/Metrics/DependenciesMetric/DependenciesMetric.tsx","components/Metrics/LicenseMetric/LicenseGroup/LicenseGroup.tsx","components/Metrics/LicenseMetric/LicenseMetric.tsx","components/Metrics/AdviseMetric/AdviseMetric.tsx","components/Elements/IconText/IconText.tsx","features/advise/components/AdviseHeader/CustomAlert/CustomAlert.tsx","features/advise/components/AdviseHeader/AdviseHeader.tsx","features/advise/components/AdviseTableView/EnhancedTableHead/EnhancedTableHead.tsx","features/advise/components/PackageList/PackageList.tsx","components/Elements/Loading/Loading.tsx","features/advise/routes/AdviseDetails.tsx","features/advise/components/LockfileView/LockfileView.tsx","features/advise/components/Popup/Popup.tsx","features/advise/components/NetworkGraphView/NetworkGraphView.tsx","features/advise/components/JustificationMetrics/ScorecardMetric.tsx","api/getPackageMetadata.ts","api/getFile.ts","features/advise/components/SelectedPackage/hooks/useScorecards.ts","features/advise/components/SelectedPackage/SelectedPackage.tsx","features/advise/components/SelectedPackage/hooks/useLinkData.tsx","features/advise/routes/AdviseSummary.tsx","components/Elements/ScrollToTop/ScrollToTop.tsx","features/advise/routes/AdviseCompare.tsx","hooks/metrics/useAdviseMetric.ts","hooks/metrics/useDependencyMetric.ts","hooks/metrics/useLicenseMetric.ts","features/advise/hooks/useMetrics.ts","hooks/useInterval.ts","lib/interfaces/Graph.ts","lib/interfaces/Node.ts","hooks/useGraph.ts","features/advise/routes/AdviseNotFound.tsx","components/Layout/MainLayout.tsx","components/Layout/AdviserLayout.tsx","components/Layout/NavigationLayout.tsx","features/advise/routes/AdviseLogs.tsx","features/advise/components/StackInfoMetrics/StackInfoInstallErrorMetric.tsx","features/advise/components/StackInfoMetrics/StackInfoRulesMetric.tsx","features/advise/components/StackInfoMetrics/StackInfoEnvMetric.tsx","features/advise/components/StackInfoMetrics/StackInfoMetric.tsx","features/advise/routes/AdviseStackInfo.tsx","features/advise/routes/index.tsx","utils/formatLockfile.ts","features/package/components/ParamDropdown/ParamDropdown.tsx","features/package/components/PackageHeader/PackageHeader.tsx","features/package/components/PackageDependencies/VersionDropdown.tsx","features/package/components/PackageDependencies/PackageDependencies.tsx","features/package/routes/PackageNotFound.tsx","features/package/api/getPackageVersions.ts","features/package/api/getPackageEnvironments.ts","features/package/hooks/useAllVersions.ts","routes/ErrorPage.tsx","features/package/routes/PackageOverview.tsx","features/package/hooks/useSimpleGraph.ts","features/package/routes/index.tsx","features/image/components/ImageHeader/ImageHeader.tsx","features/image/components/DebInfo/DebInfo.tsx","features/image/components/PythonInfo/PythonInfo.tsx","features/image/components/ImageInfo/ImageInfo.tsx","features/image/components/RPMInfo/RPMInfo.tsx","features/image/routes/ImageSummary.tsx","features/image/api/getImageDocument.ts","features/image/api/getImageLogs.ts","features/image/api/getImageMetadata.ts","features/image/routes/ImageNotFound.tsx","features/image/routes/index.tsx","features/image/hooks/useMetrics.ts","features/image/utils/formatImagePackages.ts","routes/RouterConfig.tsx","App.tsx","index.tsx"],"names":["queryClient","QueryClient","defaultOptions","queries","useErrorBoundary","refetchOnWindowFocus","refetchOnMount","retry","md_theme","themeFromSourceColor","argbFromHex","name","value","blend","theme","createTheme","md_colors","schemes","palette","mode","toJSON","mui_palette","addToPalette","k","v","color_list","startsWith","text_key","charAt","toUpperCase","slice","text_color","main","hexFromArgb","contrastText","undefined","Object","entries","forEach","customColors","custom","group","new_key","replace","color","background","default","Color","surface","mix","primary","hex","paper","shape","borderRadius","responsiveFontSizes","components","MuiPaper","styleOverrides","elevation0","backgroundColor","surfaceVariant","elevation1","elevation2","elevation3","elevation4","elevation5","outlined","borderColor","outline","MuiPopover","defaultProps","elevation","paddingLeft","paddingRight","MuiDialog","PaperProps","MuiDrawer","borderStyle","Theme","children","ThemeProvider","CssBaseline","StateContext","React","reducer","state","action","type","input","payload","loading","isLoading","total","text","DispatchContext","updateLoading","initState","Global","dispatch","actionMap","Provider","ErrorFallback","Button","onClick","window","location","assign","origin","AppProvider","FallbackComponent","client","TabPanel","index","props","role","hidden","id","SearchBar","onEnter","label","helpertext","boxprops","error","lefticon","righticon","Box","Typography","variant","sx","Paper","component","p","display","alignItems","InputBase","ml","flex","placeholder","onChange","onKeyPress","ev","key","preventDefault","LOCAL_STORAGE_KEY","THOTH_URL","options","manipulation","enabled","interaction","hover","hoverConnectedEdges","selectConnectedEdges","selectable","edges","chosen","smooth","arrowStrikethrough","arrows","from","nodes","border","size","borderWidth","labelHighlightBold","font","strokeWidth","physics","hierarchicalRepulsion","damping","springLength","solver","minVelocity","postAdvise","pipfile","pipfileLock","runtime_environment","data","application_stack","requirements","requirements_format","requirements_lock","axios","post","params","recommendation_type","limit","headers","accept","getPackageExists","a","get","per_page","then","res","versions","length","catch","postImageAnalyze","image","getContainerImages","page","PackageSearch","navigate","useNavigate","useState","searchQuery","setSearchQuery","searchError","setSearchError","handleAnalyze","Grid","container","justifyContent","alignSelf","item","xs","minHeight","spacing","md","e","target","handleChange","mr","minWidth","filter","createFilterOptions","ComboBox","suggestions","help","required","setValue","suggestions_mapped","useMemo","map","suggestion","title","Autocomplete","event","newValue","inputValue","filterOptions","filtered","push","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","freeSolo","renderInput","TextField","fullWidth","helperText","descendingComparator","b","orderBy","getComparator","order","EnhancedTableHead","onRequestSort","TableHead","TableRow","headCell","TableCell","sortDirection","TableSortLabel","active","direction","property","GenericTable","rows","setOrder","setOrderBy","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","max","width","mb","TableContainer","Table","rowCount","TableBody","sort","row","labelId","tabIndex","header","j","scope","align","IconButton","style","height","colSpan","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","className","CircularProgress","getAdviseDocument","analysis_id","useAdviseDocument","config","useQuery","queryKey","queryFn","getAdviseLogs","timeSince","date","startTime","Date","seconds","floor","valueOf","interval","num","calcTime","finished_at","started_at","datetime","param","Error","headCells","lookupType","operating_system_name","operating_system_version","python_version","cuda_version","cudnn_version","mkl_version","openblas_version","openmpi_version","base_image","AdviseCreation","analysis_ids","useReducer","localHistory","ids","localStorage","getItem","split","s","adviseHistory","useQueries","doc","document_id","metadata","result","report","products","project","os_name","operating_system","os_version","version","status","isValid","valid","keys","response","includes","Collapse","in","marginRight","mt","padding","marginBottom","multiline","sm","LoadingButton","ImageSearch","images","container_images","image_name","package_extract_document_id","environment_name","Home","setMode","useTheme","matches","useMediaQuery","breakpoints","up","maxWidth","marginLeft","marginTop","alt","src","logo","textAlign","ToggleButtonGroup","exclusive","newMode","ToggleButton","Divider","NotFound","InfoCard","cardMeta","cardBody","cardAction","Card","margin","CardHeader","subheader","subTitle","CardContent","ProgressBar","LinearProgress","root","colorPrimary","bar","DependenciesMetric","metric","totalDependencies","all","direct","indirect","roots","gutterBottom","List","TransitionGroup","t","ListItem","ListItemText","Skeleton","LicenseGroup","packages","totalLicenses","open","setOpen","isOsiApproved","timeout","unmountOnExit","my","depth","Chip","LicenseMetric","more","setMore","licenses","reduce","sum","val","AdviseMetric","justTotal","values","justification","build","IconText","icon","link","Stack","Link","underline","href","rel","CustomAlert","info","Alert","severity","message","AdviseHeader","adviseDocument","lastLog","ERROR","statusText","statusColor","parameters","error_msg","levelname","toLowerCase","PackageList","graph","useContext","SelectedPackageContext","setSelected","console","log","selected","search","setSearch","packageList","node","summary","Summary","warnings","justifications","errors","CardActionArea","Loading","progress","flexDirection","createContext","AdviseDetails","Popup","License","latestVersion","NetworkGraph","visJsRef","useRef","useEffect","selectedNode","findAllNodesOnAllPaths","app_node","set","convertedNodes","DataSet","popup","document","createElement","ReactDOM","render","add","visData","visEdges","network","current","Network","networkCanvas","getElementById","getElementsByTagName","changeCursor","newCursorStyle","cursor","on","flexFlow","ref","ScorecardItem","tags","short","risk","passing","KeyboardArrowDown","transform","transition","fontWeight","tag","ScorecardMetric","getPackageMetadata","usePackagesMetadata","getYamlFile","url","fetch","getFile","YAML","parse","getMatch","scorecards","pattern","Maintained","Contributors","Fuzzing","Packaging","SAST","Vulnerabilities","find","scorecard","SelectedPackage","selectedPackage","dependents","deps","parents","justs","Map","just","setScorecard","scorecardJustifications","Array","delete","load","yaml","checks","match","useScorecards","linkData","setLinkData","patterns","temp","useLinkData","popular","browseLink","showError","orientation","avatar","dep","i","NetworkGraphView","AdviseSummary","metrics","Masonry","columns","advise","dependencies","ScrollTop","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","anchor","ownerDocument","querySelector","scrollIntoView","behavior","block","position","bottom","right","ScrollToTop","Fab","AdviseCompare","comparison","setComparison","compareDoc","importText","setImportText","handleClose","reason","history","requirements_locked","COMPARE_COLORS","old","new","change","equal","comparePaths","obj1","obj2","mapping","obj","obj1_mapped","obj2_mapped","renderCompareLine","compareType","borderStyles","paddingBottom","paddingTop","overflow","doubleRenderTypography","headerStyles","compareArrays","array1","array2","s1","JSON","stringify","s2","set1","Set","set2","merged","has","createProjectCompare","proj1","proj2","dev_packages","_meta","sources","field","hardware","cpu_model","cpu_family","gpu_model","trim","createCompare","doc1","doc2","arguments","distribution","os_release","python","major","minor","micro","api_version","implementation_name","releaselevel","accepted_final_states_count","discarded_final_states_count","resolver_iterations","pipeline","advised_manifest_changes","patch","path","op","stack_info","compareJSX","borderBottomStyle","borderTopLeftRadius","borderTopRightRadius","Dialog","disableEscapeKeyDown","onClose","DialogTitle","DialogContent","flexWrap","DialogActions","setItem","join","handleImport","columnSpacing","borderTopStyle","borderBottomLeftRadius","borderBottomRightRadius","textOverflow","whiteSpace","marginX","FormControl","Select","displayEmpty","MenuItem","disabled","useDependencyMetric","setMetric","base","visited","rootObj","bfs","graphSearch","useLicenseMetric","packageLicenses","Classifier","classifier","parsed","generalLicense","specificLicense","license","specific","useMetrics","adviseMetric","analyzer","analyzer_version","useAdviseMetric","dependencyMetric","licenseMetric","Graph","this","Node","source","destination","sourceNode","destinationNode","addAdjacent","first","visitList","pop","shift","getAdjacents","adj","newPath","nextPath","findPath","destinationKey","parent","paths","findAllPaths","adjacents","useGraph","knownRoots","allMetadata","query","some","tempGraph","notRoot","addVertex","isSuccess","package_name","package_version","importlib_metadata","currentNode","adjacentNode","addEdge","app","justifiedPackages","adjs","min","visGraphEdges","to","AdviseNotFound","MainLayout","CustomListItem","chipData","button","RouterLink","secondaryAction","warning","ListItemIcon","disableTypography","AdviserLayout","useLocation","currentTab","pathname","at","Drawer","flexShrink","boxSizing","overflowX","NavigationLayout","goHome","AdviseLogs","logs","line","module","lineno","funcname","created","asctime","msecs","relative_created","process","marginY","stickyHeader","StackInfoInstallErrorMetric","compact","down","titleTypographyProps","prev","cur","dense","pkg","package","secondary","inset","StackInfoRulesMetric","rule","flexItem","Fragment","constraint","StackInfoEnvMetric","env","provided","StackInfoMetric","typeTotals","c","renderRow","alignContent","AdviseStackInfo","types","cards","element","name_index","rules","name_constraint_index","concat","fromEntries","stackInfoHandler","others","lg","xl","AdviseRoutes","useParams","refetchInterval","useAdviseLogs","lockfile","formatLockfile","stackInfoTotals","ParamDropdown","SpecContext","specs","defaultSpecs","encodeURIComponent","index_url","renderValue","PackageHeader","allVersions","allEnvironments","showEnvParams","setShowEnvParams","versionOptions","dups","indexUrlOptions","osNameOptions","osVersionOptions","pythonVersionOptions","Name","fontSize","VersionDropdown","anchorEl","setAnchorEl","noDup","currentKey","buckets","ceil","fixedOptions","array","currentTarget","endIcon","specifier","Menu","maxHeight","divider","PackageDependencies","visitedOrder","extra","rowSpacing","PackageNotFound","getPackageVersions","getPackageEnvironments","useAllVersions","useInfiniteQuery","pageParam","getNextPageParam","lastPage","setAllVersions","hasNextPage","isFetchingNextPage","fetchNextPage","pages","reverse","ErrorPage","PackageOverview","setDefaultSpecs","decodeURIComponent","d","environments","usePackageMetadata","setGraph","useSimpleGraph","PackageRoutes","ImageHeader","imageDocument","showLogs","setShowLogs","selectedLine","setSelectedLine","noWrap","headerName","DebInfo","disableSelectionOnClick","disableColumnSelector","hideFooterSelectedRowCount","getRowId","package_identifier","density","pageSize","PythonInfo","files","file","filepath","interpreters","interpreter","ImageInfo","imageMetadata","architecture","Architecture","Created","digest","Digest","docker_version","DockerVersion","labels","Labels","layers","Layers","os","Os","repo_tags","RepoTags","description","vendor","maintainer","toLocaleDateString","usage","valueGetter","sortable","RPMInfo","ImageSummary","deb","getImageDocument","getImageLogs","getImageMetadata","ImageNotFound","ImageRoutes","useImageDocument","useImageLogs","version_id","image_packages","formatImagePackages","RouterConfig","basename","App","StrictMode"],"mappings":"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","file":"static/js/main.578d047e.chunk.js","sourcesContent":["import { QueryClient } from \"react-query\";\n\nconst queryConfig = {\n    queries: {\n        useErrorBoundary: true,\n        refetchOnWindowFocus: false,\n        refetchOnMount: false,\n        retry: false,\n    },\n};\n\nexport const queryClient = new QueryClient({ defaultOptions: queryConfig });\n","import React from \"react\";\n\n// material ui\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { createTheme, responsiveFontSizes } from \"@mui/material/styles\";\nimport { SimplePaletteColorOptions } from \"@mui/material/styles/createPalette\";\nimport {\n    argbFromHex,\n    hexFromArgb,\n    Scheme,\n    themeFromSourceColor,\n} from \"@material/material-color-utilities\";\nimport * as Color from \"color\";\n\nconst md_theme = themeFromSourceColor(argbFromHex(\"#f39200\"), [\n    {\n        name: \"warning\",\n        value: argbFromHex(\"#ed6c02\"),\n        blend: true,\n    },\n    {\n        name: \"info\",\n        value: argbFromHex(\"#0288d1\"),\n        blend: true,\n    },\n    {\n        name: \"success\",\n        value: argbFromHex(\"#2e7d32\"),\n        blend: true,\n    },\n]);\nlet theme = createTheme();\nconst md_colors: ReturnType<typeof Scheme.prototype.toJSON> =\n    md_theme.schemes[theme.palette.mode].toJSON();\n\nconst mui_palette: { [key: string]: SimplePaletteColorOptions } = {};\n\nconst addToPalette = (\n    k: string,\n    v: number,\n    color_list: { [x: string]: number },\n) => {\n    if (k.startsWith(\"on\") || k === \"background\") {\n        return;\n    }\n    const text_key = (\"on\" +\n        k.charAt(0).toUpperCase() +\n        k.slice(1)) as keyof typeof color_list;\n    const text_color = color_list?.[text_key];\n\n    mui_palette[k] = {\n        main: hexFromArgb(v),\n        contrastText: text_color ? hexFromArgb(text_color) : undefined,\n    };\n};\n\nObject.entries(md_colors).forEach(([k, v]) => addToPalette(k, v, md_colors));\n\nmd_theme.customColors.forEach(custom => {\n    const group: { [key: string]: number } = {};\n    Object.entries(custom[theme.palette.mode]).forEach(([k, v]) => {\n        let new_key = k.replace(\"color\", custom.color.name);\n        new_key = new_key.replace(\n            \"Color\",\n            custom.color.name.charAt(0).toUpperCase() +\n                custom.color.name.slice(1),\n        );\n        group[new_key] = v;\n    });\n\n    Object.entries(group).forEach(([k, v]) => addToPalette(k, v, group));\n});\n\ndeclare module \"@mui/material/styles\" {\n    interface Palette {\n        primaryContainer: SimplePaletteColorOptions;\n        secondaryContainer: SimplePaletteColorOptions;\n        tertiary: SimplePaletteColorOptions;\n        tertiaryContainer: SimplePaletteColorOptions;\n        errorContainer: SimplePaletteColorOptions;\n        surface: SimplePaletteColorOptions;\n        surfaceVariant: SimplePaletteColorOptions;\n        outline: SimplePaletteColorOptions;\n        shadow: SimplePaletteColorOptions;\n        inverseSurface: SimplePaletteColorOptions;\n        inverseOnSurface: SimplePaletteColorOptions;\n        inversePrimary: SimplePaletteColorOptions;\n    }\n    interface PaletteOptions {\n        primaryContainer?: SimplePaletteColorOptions;\n        secondaryContainer?: SimplePaletteColorOptions;\n        tertiary?: SimplePaletteColorOptions;\n        tertiaryContainer?: SimplePaletteColorOptions;\n        errorContainer?: SimplePaletteColorOptions;\n        surface?: SimplePaletteColorOptions;\n        surfaceVariant?: SimplePaletteColorOptions;\n        outline?: SimplePaletteColorOptions;\n        shadow?: SimplePaletteColorOptions;\n        inverseSurface?: SimplePaletteColorOptions;\n        inverseOnSurface?: SimplePaletteColorOptions;\n        inversePrimary?: SimplePaletteColorOptions;\n    }\n}\n\n// key colors and theme\ntheme = createTheme(theme, {\n    palette: {\n        ...mui_palette,\n        background: {\n            default: Color.default(hexFromArgb(md_colors.surface))\n                .mix(Color.default(hexFromArgb(md_colors.primary)), 0.05)\n                .hex(),\n            paper: Color.default(hexFromArgb(md_colors.surface))\n                .mix(Color.default(hexFromArgb(md_colors.primary)), 0.05)\n                .hex(),\n        },\n    },\n    shape: {\n        borderRadius: 12,\n    },\n});\n\ntheme = responsiveFontSizes(theme);\n\ntheme = createTheme(theme, {\n    components: {\n        MuiPaper: {\n            styleOverrides: {\n                elevation0: {\n                    backgroundColor: theme.palette.surfaceVariant.main,\n                    color: theme.palette.surfaceVariant.contrastText,\n                },\n                elevation1: {\n                    backgroundColor: Color.default(\n                        hexFromArgb(md_colors.surface),\n                    )\n                        .mix(\n                            Color.default(hexFromArgb(md_colors.primary)),\n                            0.05,\n                        )\n                        .hex(),\n                },\n                elevation2: {\n                    backgroundColor: Color.default(\n                        hexFromArgb(md_colors.surface),\n                    )\n                        .mix(\n                            Color.default(hexFromArgb(md_colors.primary)),\n                            0.08,\n                        )\n                        .hex(),\n                },\n                elevation3: {\n                    backgroundColor: Color.default(\n                        hexFromArgb(md_colors.surface),\n                    )\n                        .mix(\n                            Color.default(hexFromArgb(md_colors.primary)),\n                            0.11,\n                        )\n                        .hex(),\n                },\n                elevation4: {\n                    backgroundColor: Color.default(\n                        hexFromArgb(md_colors.surface),\n                    )\n                        .mix(\n                            Color.default(hexFromArgb(md_colors.primary)),\n                            0.12,\n                        )\n                        .hex(),\n                },\n                elevation5: {\n                    backgroundColor: Color.default(\n                        hexFromArgb(md_colors.surface),\n                    )\n                        .mix(\n                            Color.default(hexFromArgb(md_colors.primary)),\n                            0.14,\n                        )\n                        .hex(),\n                },\n                outlined: {\n                    borderColor: hexFromArgb(md_colors.outline),\n                },\n            },\n        },\n        MuiPopover: {\n            defaultProps: {\n                elevation: 2,\n            },\n            styleOverrides: {\n                paper: {\n                    paddingLeft: 0,\n                    paddingRight: 0,\n                    borderRadius: \"4px\",\n                },\n            },\n        },\n        MuiDialog: {\n            defaultProps: {\n                PaperProps: {\n                    elevation: 3,\n                },\n            },\n        },\n        MuiDrawer: {\n            styleOverrides: {\n                paper: {\n                    borderStyle: \"hidden\",\n                    backgroundColor: Color.default(\n                        hexFromArgb(md_colors.surface),\n                    )\n                        .mix(\n                            Color.default(hexFromArgb(md_colors.primary)),\n                            0.05,\n                        )\n                        .hex(),\n                    color: theme.palette.surface.contrastText,\n                },\n            },\n        },\n    },\n});\n\ninterface ITheme {\n    children?: JSX.Element;\n}\n\nfunction Theme({ children }: ITheme) {\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            {children}\n        </ThemeProvider>\n    );\n}\n\nexport default Theme;\n","import * as React from \"react\";\n\ninterface IGlobal {\n    children?: JSX.Element;\n}\n\nexport interface GlobalState {\n    notifications?: string[];\n    loading?: {\n        [key: string]: {\n            isLoading: boolean;\n            total?: number;\n            value?: number;\n            text?: string;\n        };\n    };\n}\n\nexport interface GlobalAction {\n    type: string;\n    payload: unknown;\n}\n\ntype LoadingPayload = {\n    name: string;\n    isLoading: boolean;\n    total?: number;\n    value?: number;\n    text?: string;\n};\n\nexport const StateContext = React.createContext<GlobalState | undefined>(\n    undefined,\n);\n\nfunction reducer(state: GlobalState, action: GlobalAction) {\n    switch (action.type) {\n        case \"loading\": {\n            const input = action.payload as LoadingPayload;\n            return {\n                ...state,\n                loading: {\n                    ...state.loading,\n                    [input.name]: {\n                        isLoading: input.isLoading,\n                        total: input.total,\n                        value: input.value,\n                        text: input.text,\n                    },\n                },\n            };\n        }\n        default:\n            return state;\n    }\n}\ninterface IActionMap {\n    updateLoading: (\n        name: string,\n        text?: string,\n        value?: number,\n        total?: number,\n    ) => void;\n}\n\nexport const DispatchContext = React.createContext<IActionMap>({\n    updateLoading: () => undefined,\n});\n\nconst initState: GlobalState = {};\n\nexport default function Global({ children }: IGlobal) {\n    // for state control\n    const [state, dispatch] = React.useReducer(reducer, initState);\n\n    const actionMap: IActionMap = React.useMemo(() => {\n        return {\n            updateLoading: (\n                name: string,\n                text?: string,\n                value?: number,\n                total?: number,\n            ) => {\n                if (!value || !total) {\n                    dispatch({\n                        type: \"loading\",\n                        payload: {\n                            name: name,\n                            isLoading: false,\n                            value: 0,\n                            total: 1,\n                            text: text,\n                        },\n                    });\n                } else {\n                    dispatch({\n                        type: \"loading\",\n                        payload: {\n                            name: name,\n                            isLoading: true,\n                            value: value ?? 0,\n                            total: total ? total : 1,\n                            text: text,\n                        },\n                    });\n                }\n            },\n        };\n    }, []);\n\n    return (\n        <StateContext.Provider value={state}>\n            <DispatchContext.Provider value={actionMap}>\n                {children}\n            </DispatchContext.Provider>\n        </StateContext.Provider>\n    );\n}\n","import * as React from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { QueryClientProvider } from \"react-query\";\nimport { queryClient } from \"lib/react-query\";\nimport { Button } from \"@mui/material\";\nimport Theme from \"styles/Theme\";\nimport Global from \"stores/Global\";\n\ninterface IAppProvider {\n    children?: JSX.Element;\n}\n\nconst ErrorFallback = () => {\n    return (\n        <div>\n            <h2>Oops, something went wrong :( </h2>\n            <Button\n                onClick={() => window.location.assign(window.location.origin)}\n            >\n                Refresh\n            </Button>\n        </div>\n    );\n};\n\nexport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n    return (\n        <Theme>\n            <Global>\n                <ErrorBoundary FallbackComponent={ErrorFallback}>\n                    <QueryClientProvider client={queryClient}>\n                        {children}\n                    </QueryClientProvider>\n                </ErrorBoundary>\n            </Global>\n        </Theme>\n    );\n};\n","import React from \"react\";\n\ninterface IProps extends React.ComponentPropsWithoutRef<\"div\"> {\n    children: React.ReactNode;\n    /** The unique identifier of the tab. */\n    index: string | number;\n    /** The state variable passed in from the parent which is compared to the index */\n    value: string | number;\n}\n\n/**\n * A tab panel used to encapsulate different tab content.\n */\nconst TabPanel = ({ children, value, index, ...props }: IProps) => {\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...props}\n        >\n            {value === index && children}\n        </div>\n    );\n};\n\nexport default TabPanel;\n","export default __webpack_public_path__ + \"static/media/thoth-logo.1a28a729.png\";","import React from \"react\";\n\n// material ui\nimport {\n    Typography,\n    Box,\n    Paper,\n    InputBase,\n    InputBaseProps,\n} from \"@mui/material\";\nimport { SxProps } from \"@mui/system\";\n\ninterface IProps extends InputBaseProps {\n    /** The error text or default label text */\n    label?: string;\n    /** callback function when textbox ENTER is pressed */\n    onEnter?: () => void;\n    /** helper text for the search bar */\n    helpertext?: string;\n    /** if there is an error or not */\n    error?: boolean;\n    /** icon displayed on the left of the text box */\n    lefticon?: React.ReactNode;\n    /** icon displayed on the right of the text box */\n    righticon?: React.ReactNode;\n    /** Props added to the text box */\n    boxprops?: SxProps;\n}\n\n/**\n *\n */\nconst SearchBar = ({\n    onEnter,\n    label,\n    helpertext,\n    boxprops,\n    error = false,\n    lefticon,\n    righticon,\n    ...props\n}: IProps) => {\n    return (\n        <Box>\n            <Typography\n                variant={\"body1\"}\n                sx={{ color: error ? \"error.main\" : \"text.secondary\" }}\n            >\n                {label}\n            </Typography>\n            <Paper\n                component=\"form\"\n                variant=\"outlined\"\n                sx={{\n                    p: \"8px 4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    borderColor: error ? \"red\" : undefined,\n                    paddingLeft: 2,\n                    paddingRight: 2,\n                    ...boxprops,\n                }}\n            >\n                {lefticon}\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder={helpertext}\n                    error={error}\n                    onChange={props.onChange}\n                    onKeyPress={ev => {\n                        if (onEnter && ev.key === \"Enter\") {\n                            onEnter();\n                            ev.preventDefault();\n                        }\n                    }}\n                    {...props}\n                />\n                {righticon}\n            </Paper>\n        </Box>\n    );\n};\n\nexport default SearchBar;\n","const useProd = true;\nexport const LOCAL_STORAGE_KEY = \"THOTH_SEARCH_ADVISE_HISTORY\";\nexport const THOTH_URL =\n    !useProd &&\n    (process.env.REACT_APP_DEPLOYMENT === \"STAGE\" ||\n        process.env.NODE_ENV === \"development\")\n        ? \"https://stage.thoth-station.ninja/api/v1\"\n        : \"https://khemenu.thoth-station.ninja/api/v1\";\n\n/**\n * used for vis-js graph render engine\n */\nexport const options = {\n    manipulation: {\n        enabled: false,\n    },\n    interaction: {\n        hover: true,\n        hoverConnectedEdges: false,\n        selectConnectedEdges: false,\n        selectable: true,\n    },\n    edges: {\n        chosen: false,\n        smooth: false,\n        color: {\n            color: \"#5c6470\",\n        },\n        arrowStrikethrough: false,\n        arrows: {\n            from: {\n                enabled: true,\n                type: \"triangle\",\n            },\n        },\n    },\n\n    nodes: {\n        chosen: false,\n        color: {\n            background: \"#5c6470\",\n            border: \"#fff\",\n            hover: {\n                background: \"#f39200\",\n                border: \"#fff\",\n            },\n        },\n        shape: \"dot\",\n        size: 10,\n        borderWidth: 2,\n        labelHighlightBold: false,\n        font: {\n            color: \"#393e46\",\n            strokeWidth: 2,\n            size: 15,\n        },\n    },\n    physics: {\n        hierarchicalRepulsion: {\n            damping: 0.1,\n            springLength: 200,\n        },\n        solver: \"hierarchicalRepulsion\",\n        minVelocity: 0.15,\n    },\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/advise/python\"][\"post\"];\ntype requestBody = path[\"requestBody\"][\"content\"][\"application/json\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\n\nexport const postAdvise = (\n    pipfile: requestBody[\"application_stack\"][\"requirements\"],\n    pipfileLock: requestBody[\"application_stack\"][\"requirements_lock\"],\n    runtime_environment: requestBody[\"runtime_environment\"],\n) => {\n    const data = {\n        application_stack: {\n            requirements: pipfile,\n            requirements_format: \"pipenv\",\n            requirements_lock: pipfileLock,\n        },\n        runtime_environment: runtime_environment,\n    };\n\n    return axios.post<requestResponseSuccess>(\n        THOTH_URL + \"/advise/python\",\n        data,\n        {\n            params: {\n                recommendation_type: \"stable\",\n                limit: 500,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/versions\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport const getPackageExists = async (name: requestParams[\"name\"]) => {\n    return axios\n        .get<requestResponseSuccess>(THOTH_URL + \"/python/package/versions\", {\n            params: {\n                name: name,\n                per_page: 1,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        })\n        .then(res => {\n            return res.data.versions.length > 0;\n        })\n        .catch(() => false);\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"../../../lib/schema\";\n\ntype path = paths[\"/analyze\"][\"post\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\n\nexport const postImageAnalyze = (image: requestParams[\"image\"]) => {\n    return axios.post<requestResponseSuccess>(\n        THOTH_URL + \"/analyze\",\n        {},\n        {\n            params: {\n                image: image,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useInfiniteQuery, useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/container-images\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"];\n\nexport const getContainerImages = async (\n    page: requestParams[\"page\"] = 0,\n    per_page: requestParams[\"per_page\"] = 100,\n) => {\n    return axios.get<requestResponseSuccess>(THOTH_URL + \"/container-images\", {\n        params: {\n            page: page,\n            per_page: per_page,\n        },\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const useContainerImages = (config: { [key: string]: unknown }) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"container-images\"],\n        queryFn: () => getContainerImages(),\n    });\n};\n\nexport const useInfiniteContainerImages = (config: {\n    [key: string]: unknown;\n}) => {\n    return useInfiniteQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"container-images\"],\n        queryFn: input => {\n            return getContainerImages(input.pageParam);\n        },\n        getNextPageParam: (lastPage: AxiosResponse<requestResponseSuccess>) => {\n            return lastPage.data.container_images.length === 0\n                ? undefined\n                : lastPage.data.parameters.page + 1;\n        },\n    });\n};\n","import { Button, Grid, Typography } from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getPackageExists } from \"../api\";\n\nexport const PackageSearch = () => {\n    const navigate = useNavigate();\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [searchError, setSearchError] = useState(\"\");\n\n    const handleAnalyze = async () => {\n        // if no query\n        if (searchQuery === \"\") {\n            return;\n        }\n\n        const exists = await getPackageExists(searchQuery);\n\n        if (exists) {\n            navigate(\"/package/\" + searchQuery);\n        } else {\n            setSearchError(\"Thoth does not know about that package\");\n        }\n    };\n\n    const handleChange = (\n        e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n        setSearchQuery(e.target.value);\n        if (searchError !== \"\") {\n            setSearchError(\"\");\n        }\n    };\n\n    return (\n        <Grid container justifyContent=\"center\">\n            <Grid alignSelf=\"flex-start\" item xs={12}>\n                <Typography\n                    color=\"error\"\n                    variant=\"body1\"\n                    sx={{ minHeight: 30 }}\n                >\n                    {searchError ?? \"\"}\n                </Typography>\n            </Grid>\n            <Grid container spacing={2} item xs={12}>\n                <Grid item xs={12} md={10}>\n                    <SearchBar\n                        error={searchError !== \"\"}\n                        onChange={e => handleChange(e)}\n                        helpertext={\"Search for a Python package\"}\n                        type=\"search\"\n                        boxprops={{ mr: 2 }}\n                        lefticon={<SearchRoundedIcon />}\n                        onEnter={handleAnalyze}\n                    />\n                </Grid>\n                <Grid item xs={12} md={2}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => handleAnalyze()}\n                        sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                    >\n                        <b>Analyze</b>\n                    </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { useMemo } from \"react\";\n\ninterface IComboBox {\n    suggestions: string[];\n    label: string;\n    help: string;\n    required: boolean;\n    error: boolean;\n    value: string | { title: string; inputValue?: string };\n    setValue: (e: { title: string; inputValue?: string } | null) => void;\n}\n\nconst filter = createFilterOptions<{ title: string; inputValue?: string }>();\n\nexport default function ComboBox({\n    suggestions,\n    label,\n    help,\n    required,\n    error,\n    value,\n    setValue,\n}: IComboBox) {\n    const suggestions_mapped = useMemo<\n        { title: string; inputValue?: string }[]\n    >(() => {\n        return suggestions.map(suggestion => {\n            return {\n                title: suggestion,\n            };\n        });\n    }, [suggestions]);\n\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(event, newValue) => {\n                if (typeof newValue === \"string\") {\n                    setValue({ title: newValue });\n                } else if (newValue && newValue.inputValue) {\n                    // Create a new value from the user input\n                    setValue({ title: newValue.inputValue });\n                } else {\n                    setValue(newValue);\n                }\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n\n                if (params.inputValue !== \"\") {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        title: `Add \"${params.inputValue}\"`,\n                    });\n                }\n\n                return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            id=\"free-solo-with-text-demo\"\n            options={suggestions_mapped ?? []}\n            getOptionLabel={option => {\n                // Value selected with enter, right from the input\n                if (typeof option === \"string\") {\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    return option.inputValue;\n                }\n                // Regular option\n                return option.title;\n            }}\n            renderOption={(props, option) => <li {...props}>{option.title}</li>}\n            freeSolo\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    fullWidth\n                    label={label}\n                    required={required}\n                    error={error}\n                    helperText={help}\n                />\n            )}\n        />\n    );\n}\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\nimport Paper from \"@mui/material/Paper\";\nimport ArrowForwardRoundedIcon from \"@mui/icons-material/ArrowForwardRounded\";\nimport { IconButton } from \"@mui/material\";\nimport { CircularProgress } from \"@mui/material\";\n\nfunction descendingComparator(\n    a: { [key: string]: any },\n    b: { [key: string]: any },\n    orderBy: string,\n) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order: \"desc\" | \"asc\", orderBy: string) {\n    return order === \"desc\"\n        ? (a: { [key: string]: any }, b: { [key: string]: any }) =>\n              descendingComparator(a, b, orderBy)\n        : (a: { [key: string]: any }, b: { [key: string]: any }) =>\n              -descendingComparator(a, b, orderBy);\n}\n\ninterface IGenericTable {\n    headers: {\n        id: string;\n        label: string;\n    }[];\n    rows: { [key: string]: unknown }[];\n    action?: (row: any) => void;\n}\n\ninterface IEnhancedTableHead {\n    order: \"asc\" | \"desc\";\n    orderBy: IGenericTable[\"headers\"][number][\"id\"];\n    onRequestSort: (property: IGenericTable[\"headers\"][number][\"id\"]) => void;\n    rowCount: number;\n    headers: IGenericTable[\"headers\"];\n}\n\nfunction EnhancedTableHead(props: IEnhancedTableHead) {\n    const { order, orderBy, onRequestSort, headers } = props;\n    const createSortHandler = (property: typeof headers[number][\"id\"]) => {\n        onRequestSort(property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headers.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={() => createSortHandler(headCell.id)}\n                        >\n                            <b>{headCell.label}</b>\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                <TableCell />\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default function GenericTable({ headers, rows, action }: IGenericTable) {\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState<typeof headers[number][\"id\"]>(\n        headers[0].id,\n    );\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleRequestSort = (property: typeof headers[number][\"id\"]) => {\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n        setOrderBy(property);\n    };\n\n    const handleChangePage = (\n        event: any,\n        newPage: React.SetStateAction<number>,\n    ) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: { target: { value: string } }) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows =\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    if (!rows) {\n        return (\n            <div className=\"w-full h-48 flex justify-center items-center\">\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    return (\n        <Box sx={{ width: \"100%\" }}>\n            <Paper sx={{ width: \"100%\", mb: 2 }} variant=\"outlined\">\n                <TableContainer>\n                    <Table sx={{ minWidth: 750 }} size=\"medium\">\n                        <EnhancedTableHead\n                            order={order as IEnhancedTableHead[\"order\"]}\n                            orderBy={orderBy}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                            headers={headers}\n                        />\n                        <TableBody>\n                            {rows\n                                .slice()\n                                .sort(\n                                    getComparator(\n                                        order as IEnhancedTableHead[\"order\"],\n                                        orderBy,\n                                    ),\n                                )\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage,\n                                )\n                                .map((row, index) => {\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            tabIndex={-1}\n                                            key={index}\n                                        >\n                                            {headers.map((header, j) => {\n                                                if (j === 0) {\n                                                    return (\n                                                        <TableCell\n                                                            component=\"th\"\n                                                            id={labelId}\n                                                            scope=\"row\"\n                                                        >\n                                                            {\n                                                                row[\n                                                                    header.id\n                                                                ] as string\n                                                            }\n                                                        </TableCell>\n                                                    );\n                                                } else {\n                                                    return (\n                                                        <TableCell align=\"left\">\n                                                            {\n                                                                row[\n                                                                    header.id\n                                                                ] as string\n                                                            }\n                                                        </TableCell>\n                                                    );\n                                                }\n                                            })}\n\n                                            {action ? (\n                                                <TableCell align=\"right\">\n                                                    <IconButton\n                                                        onClick={() =>\n                                                            action(row)\n                                                        }\n                                                    >\n                                                        <ArrowForwardRoundedIcon />\n                                                    </IconButton>\n                                                </TableCell>\n                                            ) : undefined}\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow\n                                    style={{\n                                        height: 53 * emptyRows,\n                                    }}\n                                >\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 50]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </Box>\n    );\n}\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQueries, useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/dependencies\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageDependencies = (\n    name: requestParams[\"name\"],\n    version: requestParams[\"version\"],\n    index: requestParams[\"index\"] = \"https://pypi.org/simple\",\n) => {\n    return axios.get<requestResponseSuccess>(\n        THOTH_URL + \"/python/package/dependencies\",\n        {\n            params: {\n                name: name,\n                version: version,\n                index: index,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageDependencies = (\n    name: requestParams[\"name\"],\n    version: requestParams[\"version\"],\n    config: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"packageDependencies\", name, version],\n        queryFn: () => getPackageDependencies(name, version),\n    });\n};\n\nexport const usePackagesDependencies = (\n    packages: {\n        name: requestParams[\"name\"];\n        version: requestParams[\"version\"];\n    }[],\n    config: { [key: string]: unknown },\n) => {\n    return useQueries(\n        packages.map(p => {\n            return {\n                ...config,\n                queryKey: [\"packageDependencies\", p.name, p.version],\n                queryFn: () => getPackageDependencies(p.name, p.version),\n            };\n        }),\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQueries, useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\nimport { UseQueryResult } from \"react-query/types/react/types\";\n\ntype path = paths[\"/advise/python/{analysis_id}\"][\"get\"];\nexport type AdviseDocumentRequestParams = path[\"parameters\"][\"path\"];\nexport type AdviseDocumentRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n/**\n * An async function that returns a promise for `{base_url}/advise/python`\n *\n * @param analysis_id - the advise document id (ex: `adviser-211112223258-38af1a4746733b53`)\n */\nexport const getAdviseDocument = (\n    analysis_id?: AdviseDocumentRequestParams[\"analysis_id\"],\n) => {\n    return axios.get<AdviseDocumentRequestResponseSuccess>(\n        THOTH_URL + \"/advise/python/\" + analysis_id,\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useAdviseDocument = (\n    analysis_id?: AdviseDocumentRequestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n): UseQueryResult<\n    AxiosResponse<AdviseDocumentRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n> => {\n    return useQuery({\n        ...config,\n        enabled: !!analysis_id && analysis_id.startsWith(\"adviser\"),\n        queryKey: [\"adviseDocument\", analysis_id],\n        queryFn: () => getAdviseDocument(analysis_id),\n    });\n};\n\nexport const useAdviseDocuments = (\n    analysis_ids: AdviseDocumentRequestParams[\"analysis_id\"][],\n    config?: { [key: string]: unknown },\n): UseQueryResult<\n    AxiosResponse<AdviseDocumentRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n>[] => {\n    return useQueries(\n        analysis_ids.map(id => {\n            return {\n                ...config,\n                queryKey: [\"adviseDocument\", id],\n                queryFn: () => getAdviseDocument(id),\n            };\n        }),\n    ) as UseQueryResult<\n        AxiosResponse<AdviseDocumentRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >[];\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/advise/python/{analysis_id}/log\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n/**\n * An async function that returns a promise for `{base_url}/advise/python/logs`\n *\n * @param analysis_id - the advise document id (ex: `adviser-211112223258-38af1a4746733b53`)\n */\nexport const getAdviseLogs = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get<requestResponseSuccess>(\n        THOTH_URL + \"/advise/python/\" + analysis_id + \"/log\",\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useAdviseLogs = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"adviseLogs\", analysis_id],\n        queryFn: () => getAdviseLogs(analysis_id),\n    });\n};\n","/**\n * Get the time between now and a date in a string format.\n *\n * @param date\n */\nexport default function timeSince(date: Date) {\n    const startTime = new Date();\n    const seconds = Math.floor((startTime.valueOf() - date.valueOf()) / 1000);\n\n    let interval = seconds / 3.154e7;\n\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" year\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 2.628e6;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" month\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 86400;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" day\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 3600;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" hour\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 60;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" minute\" + (num !== 1 ? \"s\" : \"\");\n    }\n    const num = Math.floor(seconds);\n\n    return num + \" second\" + (num !== 1 ? \"s\" : \"\");\n}\n","import timeSince from \"utils/timeSince\";\n\n/**\n * Given either a date and time, calculated time since that date.\n * This is used to calculate how long ago an Advisor document was generated or has been generating.\n * It is specific to the document formatting\n *\n * @param finished_at - for when the advise document is completed\n * @param started_at - the time at which the document was started (is preceded by finished at)\n * @param datetime - fallback to datetime\n * @returns {string} - English version of date\n */\nexport const calcTime = (\n    finished_at?: string | null,\n    started_at?: string | null,\n    datetime?: string | null,\n) => {\n    // if status says finished\n    if (finished_at) {\n        return \"Advise finished \" + timeSince(new Date(finished_at)) + \" ago.\";\n    }\n    // if status is pending\n    else if (started_at) {\n        return \"Advise started \" + timeSince(new Date(started_at)) + \" ago.\";\n    }\n    // if status is nulled so use metadata end date\n    else if (datetime) {\n        return (\n            \"Advise finished \" + timeSince(new Date(datetime + \"Z\")) + \" ago.\"\n        );\n    } else {\n        return \"Time started/finished not available\";\n    }\n};\n","import {\n    Button,\n    Collapse,\n    Grid,\n    Paper,\n    TextField,\n    Typography,\n} from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport React, { useMemo, useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { postAdvise } from \"../api\";\nimport ComboBox from \"./ComboBox/ComboBox\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport { components } from \"lib/schema\";\nimport GenericTable from \"../../../components/Elements/GenericTable/GenericTable\";\nimport { useAdviseDocuments } from \"../../advise/api\";\nimport { LOCAL_STORAGE_KEY } from \"../../../config\";\nimport { calcTime } from \"../../../utils/calcTime\";\n\ninterface IAdviseState {\n    error: { [key: string]: string | undefined };\n    id?: string;\n    pipfile?: string;\n    pipfileLock?: string;\n    loading: boolean;\n    lookupType: string;\n    operating_system_name: string;\n    operating_system_version: string;\n    python_version: string;\n    cuda_version: string;\n    cudnn_version: string;\n    mkl_version: string;\n    name: string;\n    openblas_version: string;\n    openmpi_version: string;\n    base_image: string;\n}\n\nfunction reducer(state: IAdviseState, action: { [key: string]: any }) {\n    switch (action.type) {\n        case \"loading\":\n            return { ...state, loading: action.payload };\n        case \"error\":\n            return {\n                ...state,\n                error: { ...state.error, [action.param]: action.payload },\n            };\n        case \"clear-error\":\n            state.error = {};\n            return state;\n        case \"input\":\n            return {\n                ...state,\n                [action.param]: action.payload,\n                error: { ...state.error, [action.param]: undefined },\n            };\n        default:\n            throw new Error(\"Advise state dispatch error\");\n    }\n}\n\nconst headCells = [\n    {\n        id: \"document_id\",\n        label: \"Document ID\",\n    },\n    {\n        id: \"status\",\n        label: \"Status\",\n    },\n    {\n        id: \"name\",\n        label: \"Name\",\n    },\n    {\n        id: \"os_name\",\n        label: \"OS Name\",\n    },\n    {\n        id: \"os_version\",\n        label: \"OS Version\",\n    },\n    {\n        id: \"python_version\",\n        label: \"Python Version\",\n    },\n    {\n        id: \"date\",\n        label: \"Last Run\",\n    },\n];\n\nexport const initState: IAdviseState = {\n    error: {},\n    loading: false,\n    lookupType: \"id\",\n    operating_system_name: \"ubi\",\n    operating_system_version: \"8\",\n    python_version: \"3.8\",\n    cuda_version: \"\",\n    cudnn_version: \"\",\n    mkl_version: \"\",\n    name: \"\",\n    openblas_version: \"\",\n    openmpi_version: \"\",\n    base_image: \"\",\n};\n\nexport const AdviseCreation = () => {\n    const navigate = useNavigate();\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    const localHistory: string[] = useMemo(() => {\n        const ids = localStorage.getItem(LOCAL_STORAGE_KEY);\n        if (ids) {\n            return ids.split(\",\").filter(s => s !== \"\");\n        } else {\n            return [];\n        }\n    }, []);\n\n    const adviseHistory = useAdviseDocuments(localHistory);\n\n    const rows = useMemo(() => {\n        if (adviseHistory) {\n            return adviseHistory.map(doc => {\n                const status = () => {\n                    if (doc.data?.data?.status) {\n                        return doc.data?.data?.status.state;\n                    } else if (doc.data?.data.result.report?.products) {\n                        return \"success\";\n                    } else {\n                        return \"error\";\n                    }\n                };\n                return {\n                    document_id: doc.data?.data.metadata.document_id,\n                    name: doc.data?.data.result.report?.products?.[0].project\n                        .runtime_environment?.name,\n                    os_name:\n                        doc.data?.data.result.report?.products?.[0].project\n                            .runtime_environment?.operating_system?.name,\n                    os_version:\n                        doc.data?.data.result.report?.products?.[0].project\n                            .runtime_environment?.operating_system?.version,\n                    python_version:\n                        doc.data?.data.result.report?.products?.[0].project\n                            .runtime_environment?.python_version,\n                    status: status(),\n                    date: calcTime(\n                        doc.data?.data?.status?.finished_at,\n                        doc.data?.data?.status?.started_at,\n                        doc.data?.data?.metadata?.datetime,\n                    ),\n                };\n            });\n        } else {\n            return [];\n        }\n    }, [adviseHistory]);\n\n    const tableRowAction = (row: { document_id: string }) => {\n        navigate(\"/advise/\" + row.document_id);\n    };\n\n    const isValid = () => {\n        if (state.lookupType === \"id\") {\n            if (!state.id || state.id === \"\") {\n                dispatch({\n                    type: \"error\",\n                    param: \"id\",\n                    payload: \"Field cant be empty\",\n                });\n                return false;\n            }\n        } else {\n            let valid = true;\n            if (!state.pipfile) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfile\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n            if (!state.pipfileLock) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfileLock\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n            if (!state.name) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"name\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n\n            return valid;\n        }\n\n        return true;\n    };\n\n    const handleAnalyze = async () => {\n        if (state.loading || !isValid()) {\n            return;\n        }\n\n        if (state.lookupType === \"id\") {\n            navigate(\"/advise/\" + state.id);\n        } else {\n            dispatch({ type: \"loading\", payload: true });\n            const runtime_environment: components[\"schemas\"][\"RuntimeEnvironment\"] =\n                {\n                    operating_system: {\n                        name: state.operating_system_name,\n                        version: state.operating_system_version,\n                    },\n                    python_version: state.python_version,\n                    base_image: state.base_image,\n                    cuda_version: state.cuda_version,\n                    cudnn_version: state.cudnn_version,\n                    mkl_version: state.mkl_version,\n                    name: state.name,\n                    openblas_version: state.openblas_version,\n                    openmpi_version: state.openmpi_version,\n                };\n\n            (\n                Object.keys(runtime_environment) as Array<\n                    keyof typeof runtime_environment\n                >\n            ).forEach(key => {\n                if (runtime_environment[key] === \"\") {\n                    delete runtime_environment[key];\n                }\n            });\n            if (\n                runtime_environment?.[\"operating_system\"]?.[\"name\"] === \"\" ||\n                runtime_environment?.[\"operating_system\"]?.[\"version\"] === \"\"\n            ) {\n                delete runtime_environment[\"operating_system\"];\n            }\n\n            if (!state.pipfile) {\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfile\",\n                    payload: \"Pipfile is required\",\n                });\n            } else if (!state.pipfileLock) {\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfileLock\",\n                    payload: \"Pipfile.lock is required\",\n                });\n            } else {\n                postAdvise(\n                    state.pipfile,\n                    state.pipfileLock,\n                    runtime_environment,\n                )\n                    .then(response => {\n                        dispatch({ type: \"loading\", payload: false });\n                        navigate(\n                            \"/advise/\" + response.data.analysis_id + \"/summary\",\n                        );\n                    })\n                    .catch(error => {\n                        dispatch({ type: \"loading\", payload: false });\n                        if (error?.response?.status === 400) {\n                            if (\n                                error?.response?.data?.error?.includes(\n                                    \"Pipfile.lock\",\n                                )\n                            ) {\n                                dispatch({\n                                    type: \"error\",\n                                    param: \"pipfileLock\",\n                                    payload: error?.response?.data?.error,\n                                });\n                            } else if (\n                                error?.response?.data?.error?.includes(\n                                    \"Pipfile\",\n                                )\n                            ) {\n                                dispatch({\n                                    type: \"error\",\n                                    param: \"pipfile\",\n                                    payload: error?.response?.data?.error,\n                                });\n                            }\n                        }\n                    });\n            }\n        }\n    };\n\n    return (\n        <>\n            <Collapse in={state.lookupType === \"id\"}>\n                <>\n                    <Grid container justifyContent=\"center\">\n                        <Grid item xs={12}>\n                            <Typography\n                                color=\"error\"\n                                variant=\"body1\"\n                                sx={{ minHeight: 30 }}\n                            >\n                                {state.error?.id}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing={2}>\n                            <Grid item xs={12} md={10}>\n                                <SearchBar\n                                    error={state.error?.id !== undefined}\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"id\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    helpertext={\"Analysis ID\"}\n                                    type=\"search\"\n                                    boxprops={{ marginRight: 2 }}\n                                    lefticon={<SearchRoundedIcon />}\n                                    onEnter={handleAnalyze}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={2}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => handleAnalyze()}\n                                    sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                                >\n                                    <b>Analyze</b>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"manual\",\n                            })\n                        }\n                    >\n                        New Advise\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"history\",\n                            })\n                        }\n                    >\n                        History\n                    </Button>\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"history\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Local Thoth Advise History\n                    </Typography>\n                    <GenericTable\n                        headers={headCells}\n                        rows={rows}\n                        action={tableRowAction}\n                    />\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"manual\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Advise Parameters\n                    </Typography>\n                    <Paper\n                        sx={{\n                            backgroundColor: \"white\",\n                            padding: 3,\n                            marginBottom: 5,\n                        }}\n                        variant=\"outlined\"\n                    >\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <SearchBar\n                                    label={\n                                        state.error?.pipfile\n                                            ? state.error?.pipfile\n                                            : \"Pipfile contents\"\n                                    }\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"pipfile\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    error={state.error?.pipfile !== undefined}\n                                    multiline\n                                    rows={8}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <SearchBar\n                                    label={\n                                        state.error?.pipfileLock\n                                            ? state.error?.pipfileLock\n                                            : \"Pipfile.lock contents\"\n                                    }\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"pipfileLock\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    error={\n                                        state.error?.pipfileLock !== undefined\n                                    }\n                                    multiline\n                                    rows={8}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Grid container mt={4} spacing={2}>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"base_image\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.base_image}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Base Image\"\n                                    required={false}\n                                    helperText=\"A base container image used to run the application.\"\n                                    error={\n                                        state.error?.base_image !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"cuda_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.cuda_version}\n                                    suggestions={[\"9.0\"]}\n                                    label=\"CUDA Version\"\n                                    required={false}\n                                    help=\"Nvidia CUDA version which the application uses.\"\n                                    error={\n                                        state.error?.cuda_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"cudnn_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.cudnn_version}\n                                    suggestions={[\"8\"]}\n                                    label=\"cuDNN Version\"\n                                    required={false}\n                                    help=\"NVIDIA cuDNN version used, if any.\"\n                                    error={\n                                        state.error?.cudnn_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"mkl_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.mkl_version}\n                                    suggestions={[\"2021.1.1\"]}\n                                    label=\"MKL Version\"\n                                    required={false}\n                                    help=\"Intel® Math Kernel Library version used, if any.\"\n                                    error={\n                                        state.error?.mkl_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"name\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.name}\n                                    suggestions={[\"ubi:8-prod\"]}\n                                    label=\"Name\"\n                                    required={true}\n                                    help=\"User defined name of the runtime environment.\"\n                                    error={state.error?.name !== undefined}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"openblas_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.openblas_version}\n                                    suggestions={[\"0.3.13\"]}\n                                    label=\"OpenBLAS Version\"\n                                    required={false}\n                                    help=\"OpenBLAS version used, if any.\"\n                                    error={\n                                        state.error?.openblas_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"openmpi_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.openmpi_version}\n                                    suggestions={[\"4.1\"]}\n                                    label=\"Open MPI Version\"\n                                    required={false}\n                                    help=\"Open MPI version used, if any.\"\n                                    error={\n                                        state.error?.openmpi_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"operating_system_name\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.operating_system_name}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Operating System Name\"\n                                    required={false}\n                                    helperText=\"Operating system name used.\"\n                                    error={\n                                        state.error?.operating_system_name !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"operating_system_version\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.operating_system_version}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Operating System Version\"\n                                    required={false}\n                                    helperText=\"Operating system version used.\"\n                                    error={\n                                        state.error\n                                            ?.operating_system_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"python_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.python_version}\n                                    suggestions={[\n                                        \"2.7\",\n                                        \"3.6\",\n                                        \"3.7\",\n                                        \"3.8\",\n                                        \"3.9\",\n                                    ]}\n                                    label=\"Python Version\"\n                                    required={false}\n                                    help=\"Python version on which the application runs on.\"\n                                    error={\n                                        state.error?.python_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid container item xs={12} spacing={2}>\n                                <Grid item xs={6} md={6}>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        onClick={() =>\n                                            dispatch({\n                                                type: \"input\",\n                                                param: \"lookupType\",\n                                                payload: \"id\",\n                                            })\n                                        }\n                                        sx={{\n                                            minHeight: \"100%\",\n                                            minWidth: \"100%\",\n                                        }}\n                                    >\n                                        <b>Cancel</b>\n                                    </Button>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <LoadingButton\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => handleAnalyze()}\n                                        loading={state.loading}\n                                        sx={{\n                                            minHeight: \"100%\",\n                                            minWidth: \"100%\",\n                                        }}\n                                    >\n                                        <b>Analyze</b>\n                                    </LoadingButton>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </>\n            </Collapse>\n        </>\n    );\n};\n","import { Button, Collapse, Grid, Typography } from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport React, { useMemo, useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { postImageAnalyze, useContainerImages } from \"../api\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport GenericTable from \"components/Elements/GenericTable/GenericTable\";\nimport timeSince from \"utils/timeSince\";\n\ninterface ImageSearchState {\n    error: { [key: string]: string | undefined };\n    loading: boolean;\n    lookupType: string;\n    id: string;\n}\n\nfunction reducer(state: ImageSearchState, action: { [key: string]: any }) {\n    switch (action.type) {\n        case \"loading\":\n            return { ...state, loading: action.payload };\n        case \"error\":\n            return {\n                ...state,\n                error: { ...state.error, [action.param]: action.payload },\n            };\n        case \"clear-error\":\n            state.error = {};\n            return state;\n        case \"input\":\n            return {\n                ...state,\n                [action.param]: action.payload,\n                error: { ...state.error, [action.param]: undefined },\n            };\n        default:\n            throw new Error(\"Image state dispatch error\");\n    }\n}\n\nconst headCells = [\n    {\n        id: \"environment_name\",\n        label: \"Image Name\",\n    },\n    {\n        id: \"os_name\",\n        label: \"OS Name\",\n    },\n    {\n        id: \"os_version\",\n        label: \"OS Version\",\n    },\n    {\n        id: \"python_version\",\n        label: \"Python Version\",\n    },\n    {\n        id: \"date\",\n        label: \"Last Updated\",\n    },\n];\n\nconst initState: ImageSearchState = {\n    error: {},\n    loading: false,\n    lookupType: \"id\",\n    id: \"\",\n};\n\nexport const ImageSearch = () => {\n    const navigate = useNavigate();\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    const images = useContainerImages({ useErrorBoundary: false });\n\n    const rows = useMemo(() => {\n        if (images?.data?.data?.container_images) {\n            return images?.data?.data?.container_images.map(image => {\n                return {\n                    ...image,\n                    date: timeSince(new Date(image.datetime)) + \" ago\",\n                };\n            });\n        } else {\n            return [];\n        }\n    }, [images?.data]);\n\n    const tableRowAction = (row: {\n        package_extract_document_id: string;\n        environment_name: string;\n    }) => {\n        navigate(\"/image/\" + row.package_extract_document_id, {\n            state: { image_name: row.environment_name },\n        });\n    };\n\n    const handleAnalyze = async () => {\n        if (state.loading) {\n            return;\n        }\n\n        if (state.id.includes(\"package-extract\")) {\n            navigate(\"/image/\" + state.id);\n            return;\n        }\n\n        dispatch({ type: \"loading\", payload: true });\n\n        postImageAnalyze(state.id)\n            .then(response => {\n                dispatch({ type: \"loading\", payload: false });\n                navigate(\"/image/\" + response.data.analysis_id, {\n                    state: { image_name: state.id },\n                });\n            })\n            .catch(error => {\n                dispatch({ type: \"loading\", payload: false });\n                if (error?.response?.status === 400) {\n                    dispatch({\n                        type: \"error\",\n                        param: \"id\",\n                        payload:\n                            error?.response?.data?.error ??\n                            \"An unknown error occurred\",\n                    });\n                }\n            });\n    };\n\n    return (\n        <>\n            <Collapse in={state.lookupType === \"id\"}>\n                <>\n                    <Grid container justifyContent=\"center\">\n                        <Grid item xs={12}>\n                            <Typography\n                                color=\"error\"\n                                variant=\"body1\"\n                                sx={{ minHeight: 30 }}\n                            >\n                                {state.error?.id}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing={2}>\n                            <Grid item xs={12} md={10}>\n                                <SearchBar\n                                    error={state.error?.id != undefined}\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"id\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    helpertext={\"Analysis ID or image name\"}\n                                    type=\"search\"\n                                    boxprops={{ mr: 2 }}\n                                    lefticon={<SearchRoundedIcon />}\n                                    onEnter={handleAnalyze}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={2}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={handleAnalyze}\n                                    sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                                >\n                                    <b>Analyze</b>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"lookup\",\n                            })\n                        }\n                    >\n                        Lookup Thoth Images\n                    </Button>\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"lookup\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Available Thoth Container Images\n                    </Typography>\n                    <GenericTable\n                        headers={headCells}\n                        rows={rows}\n                        action={tableRowAction}\n                    />\n                </>\n            </Collapse>\n        </>\n    );\n};\n","// react\nimport React, { useState } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Grid,\n    Divider,\n    ToggleButtonGroup,\n    ToggleButton,\n    Box,\n} from \"@mui/material\";\n\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\n// local\nimport TabPanel from \"components/Elements/TabPanel\";\nimport logo from \"assets/thoth-logo.png\";\n\nimport { PackageSearch, AdviseCreation, ImageSearch } from \"../components\";\n\nexport const Home = () => {\n    // utility states\n    const [mode, setMode] = useState<string>(\"package\");\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n\n    // change mode view\n    const handleMode = (event: any, newMode: string) => {\n        if (newMode) {\n            setMode(newMode);\n        }\n    };\n\n    return (\n        <div\n            style={{\n                maxWidth: \"1000px\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n            }}\n        >\n            <Grid container justifyContent=\"center\" sx={{ marginBottom: 10 }}>\n                <Grid item>\n                    <Box sx={{ marginTop: 10 }}>\n                        <img\n                            alt=\"Thoth Logo\"\n                            src={logo}\n                            height={!matches ? \"auto\" : 300}\n                            width={\"100%\"}\n                        />\n                    </Box>\n                </Grid>\n                <Grid container item justifyContent=\"center\" mt={5} spacing={0}>\n                    <Grid item xs={12} alignItems=\"left\" mb={3}>\n                        <Typography variant=\"h4\">\n                            <b>Thoth Search</b>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} alignItems=\"left\">\n                        <Typography variant=\"subtitle1\">\n                            Thoth Search is a tool that runs analysis on a\n                            Python application. It utilizes package metadata and\n                            Thoth Adviser to analyse and recommend a software\n                            stack. You can run analysis on an entire Python\n                            application using a properly formatted Pipfile and\n                            Pipfile.lock. Alternatively, you can analyse a\n                            single Python package to see what Thoth knows about\n                            the package.\n                        </Typography>\n                    </Grid>\n                    <Grid item textAlign=\"center\" xs={12} mt={3} mb={4}>\n                        <ToggleButtonGroup\n                            value={mode}\n                            exclusive\n                            onChange={handleMode}\n                            size={!matches ? \"small\" : \"large\"}\n                        >\n                            <ToggleButton value=\"package\">\n                                <b>package</b>\n                            </ToggleButton>\n                            <ToggleButton value=\"environment\">\n                                <b>environment</b>\n                            </ToggleButton>\n                            <ToggleButton value=\"image\">\n                                <b>image</b>\n                            </ToggleButton>\n                        </ToggleButtonGroup>\n                    </Grid>\n\n                    <Grid item xs={12} sx={{ marginBottom: 3 }}>\n                        <Divider />\n                        <TabPanel value={mode} index=\"package\">\n                            <PackageSearch />\n                        </TabPanel>\n                        <TabPanel value={mode} index=\"environment\">\n                            <AdviseCreation />\n                        </TabPanel>\n                        <TabPanel value={mode} index=\"image\">\n                            <ImageSearch />\n                        </TabPanel>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n","import React from \"react\";\n\nexport const NotFound = () => {\n    return <div>404</div>;\n};\n","// react\nimport React from \"react\";\n\ninterface IProps {\n    /** card header info */\n    cardMeta: {\n        /** card title */\n        title: string;\n        /** optional subtitle */\n        subTitle?: string;\n    };\n    /** optional card action component (usually some button) */\n    cardAction?: React.ReactNode;\n    /** Card body content */\n    cardBody: React.ReactNode;\n}\nimport { Card, CardContent, CardHeader, Typography } from \"@mui/material\";\n\n/** Card template for metric cards. */\nconst InfoCard = ({ cardMeta, cardBody, cardAction }: IProps) => {\n    return (\n        <Card elevation={0} sx={{ margin: 0 }}>\n            <CardHeader\n                action={cardAction}\n                title={<Typography variant=\"h5\">{cardMeta.title}</Typography>}\n                subheader={cardMeta.subTitle}\n            />\n            <CardContent>{cardBody}</CardContent>\n        </Card>\n    );\n};\n\nexport default InfoCard;\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { LinearProgress, Typography, Grid } from \"@mui/material\";\nimport { GridProps } from \"@mui/material/Grid/Grid\";\n\ninterface IProps extends GridProps {\n    /** the amount (numerator) for the bar */\n    value: number;\n    /** the total (denominator) for the bar */\n    total: number;\n    /** optional label */\n    label?: string;\n    /** action used on card */\n    action?: JSX.Element;\n}\n\n/**\n * A horizontal bar for showing a percent of a total.\n */\nconst ProgressBar = ({ value, total, label, action, ...props }: IProps) => {\n    return (\n        <Grid container spacing={1} alignItems=\"center\" {...props}>\n            <Grid item xs={5}>\n                <Typography variant=\"body2\">{label}</Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <Typography variant=\"body2\">{value}</Typography>\n            </Grid>\n            <Grid item xs>\n                <LinearProgress\n                    variant=\"determinate\"\n                    value={total > 0 ? (value / total) * 100 : 0}\n                    sx={{\n                        root: {\n                            height: 10,\n                            borderRadius: 5,\n                        },\n                        colorPrimary: {\n                            backgroundColor: \"theme.palette.grey[200]\",\n                        },\n                        bar: {\n                            borderRadius: 5,\n                            backgroundColor: \"#1a90ff\",\n                        },\n                    }}\n                />\n            </Grid>\n            <Grid item xs={1}>\n                <div>{action ?? null}</div>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ProgressBar;\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { TransitionGroup } from \"react-transition-group\";\n\nimport {\n    Typography,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    Grid,\n    Collapse,\n    Box,\n    Skeleton,\n} from \"@mui/material\";\n\nimport { DependencyMetricType } from \"hooks/metrics\";\nimport ProgressBar from \"components/Elements/ProgressBar\";\n\ninterface IDependenciesMetric {\n    metric: DependencyMetricType | null;\n}\n\n/**\n * A metric card that displays direct, indirect, and root packages of a dependency graph.\n */\nexport const DependenciesMetric = ({ metric }: IDependenciesMetric) => {\n    const totalDependencies =\n        (metric?.all?.direct ?? 0) +\n        (metric?.all?.indirect ?? 0) +\n        (metric?.all?.roots ?? 0);\n\n    if (!metric?.all || !metric?.roots) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                All Packages\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <ProgressBar\n                value={metric?.all?.roots ?? 0}\n                total={totalDependencies}\n                label={\"Root\"}\n                mb={1}\n            />\n            <ProgressBar\n                value={metric?.all?.direct ?? 0}\n                total={totalDependencies}\n                label={\"Direct\"}\n                mb={1}\n            />\n            <ProgressBar\n                value={metric?.all?.indirect ?? 0}\n                total={totalDependencies}\n                label={\"Indirect\"}\n            />\n            <Typography variant=\"h6\" gutterBottom mt={2}>\n                Root Packages\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <List component=\"nav\">\n                <TransitionGroup>\n                    {Object.entries(metric?.roots ?? {})?.map(([key]) => {\n                        const t =\n                            (metric?.roots[key].direct ?? 0) +\n                            (metric?.roots[key].indirect ?? 0);\n                        return (\n                            <Collapse key={key}>\n                                <div>\n                                    <ListItem>\n                                        <Grid container alignItems=\"center\">\n                                            <Grid item xs>\n                                                <ListItemText primary={key} />\n                                            </Grid>\n                                            <Grid item xs>\n                                                <Grid\n                                                    container\n                                                    direction=\"column\"\n                                                >\n                                                    <Grid item xs>\n                                                        <ProgressBar\n                                                            value={\n                                                                metric?.roots?.[\n                                                                    key\n                                                                ]?.direct ?? 0\n                                                            }\n                                                            total={t}\n                                                            label={\"Direct\"}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs>\n                                                        <ProgressBar\n                                                            value={\n                                                                metric?.roots?.[\n                                                                    key\n                                                                ]?.indirect ?? 0\n                                                            }\n                                                            total={t}\n                                                            label={\"Indirect\"}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </ListItem>\n                                    <Divider\n                                        variant={\"middle\"}\n                                        sx={{ mb: 1 }}\n                                    />\n                                </div>\n                            </Collapse>\n                        );\n                    })}\n                </TransitionGroup>\n            </List>\n        </>\n    );\n};\n","import React from \"react\";\n\n// material-ui\nimport { Divider, Collapse, Chip, Grid, Box } from \"@mui/material\";\nimport ExpandLess from \"@mui/icons-material/ExpandLess\";\nimport ExpandMore from \"@mui/icons-material/ExpandMore\";\nimport CheckRoundedIcon from \"@mui/icons-material/CheckRounded\";\nimport HelpOutlineRoundedIcon from \"@mui/icons-material/HelpOutlineRounded\";\n\n// local\nimport ProgressBar from \"components/Elements/ProgressBar\";\nimport { LicenseMetricType } from \"hooks/metrics\";\n\ninterface ILicenseGroup {\n    /** The license name */\n    name: string;\n    metadata: LicenseMetricType[keyof LicenseMetricType][\"metadata\"];\n    packages: LicenseMetricType[keyof LicenseMetricType][\"packages\"];\n    /** The total number of packages that have licenses. (used to add a total to the metric bar) */\n    totalLicenses: number;\n}\n\n/**\n * A custom list item displaying the number of packages under a particular license.\n */\nconst LicenseGroup = ({\n    name,\n    metadata,\n    packages,\n    totalLicenses,\n}: ILicenseGroup) => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <Grid container>\n            <Grid item xs={1}>\n                {metadata?.isOsiApproved === null ? (\n                    <HelpOutlineRoundedIcon />\n                ) : metadata?.isOsiApproved ? (\n                    <CheckRoundedIcon />\n                ) : null}\n            </Grid>\n            <Grid item xs>\n                <Box onClick={() => setOpen(!open)}>\n                    <ProgressBar\n                        key={name}\n                        value={Object.keys(packages).length ?? 0}\n                        total={totalLicenses}\n                        label={name}\n                        action={open ? <ExpandLess /> : <ExpandMore />}\n                    />\n                </Box>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                    <Box my={1}>\n                        {Object.entries(packages)\n                            .sort((a, b) => {\n                                return a[1].depth - b[1].depth;\n                            })\n                            .map(([k, v]) => {\n                                return (\n                                    <Chip\n                                        key={k}\n                                        sx={{ margin: 0.5 }}\n                                        color={\n                                            v.depth === 0\n                                                ? \"primary\"\n                                                : v.depth === 1\n                                                ? \"secondary\"\n                                                : \"default\"\n                                        }\n                                        label={k}\n                                    />\n                                );\n                            })}\n                    </Box>\n                    <Divider />\n                </Collapse>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LicenseGroup;\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Divider,\n    Collapse,\n    Button,\n    Box,\n    Grid,\n    Skeleton,\n} from \"@mui/material\";\nimport { TransitionGroup } from \"react-transition-group\";\n\n// local\nimport LicenseGroup from \"./LicenseGroup\";\nimport { LicenseMetricType } from \"hooks/metrics\";\n\ninterface ILicenseMetric {\n    /** Key value pairs of license names (keys) and license information (values).*/\n    metric: LicenseMetricType | null;\n}\n\n/**\n * A metric card that visualizes license data for all packages in the graph.\n */\nexport const LicenseMetric = ({ metric }: ILicenseMetric) => {\n    const [more, setMore] = React.useState(false);\n\n    const licenses = useMemo(\n        () =>\n            Object.entries(metric ?? {}).sort((a, b) => {\n                return Object.keys(b[1]).length - Object.keys(a[1]).length;\n            }),\n        [metric],\n    );\n\n    const totalLicenses = useMemo(\n        () =>\n            Object.entries(metric ?? {}).reduce((sum, [, val]) => {\n                return sum + Object.keys(val.packages).length;\n            }, 0),\n        [metric],\n    );\n\n    if (!metric) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div>\n            <Grid container>\n                <Grid item xs={1}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        OSI\n                    </Typography>\n                </Grid>\n                <Grid item xs>\n                    <Typography variant=\"h6\" gutterBottom>\n                        Dependency Licenses\n                    </Typography>\n                </Grid>\n            </Grid>\n\n            <Divider />\n            <TransitionGroup>\n                {licenses?.slice(0, 10).map(([key, value]) => {\n                    return (\n                        <Collapse key={key}>\n                            <LicenseGroup\n                                name={key}\n                                metadata={value.metadata}\n                                packages={value.packages}\n                                totalLicenses={totalLicenses}\n                            />\n                        </Collapse>\n                    );\n                })}\n            </TransitionGroup>\n\n            <Collapse in={more} timeout=\"auto\" unmountOnExit>\n                <TransitionGroup>\n                    {licenses.slice(10).map(([key, value]) => {\n                        return (\n                            <Collapse key={key}>\n                                <LicenseGroup\n                                    name={key}\n                                    metadata={value.metadata}\n                                    packages={value.packages}\n                                    totalLicenses={totalLicenses}\n                                />\n                            </Collapse>\n                        );\n                    })}\n                </TransitionGroup>\n            </Collapse>\n            <Box textAlign=\"center\">\n                <Button onClick={() => setMore(!more)} color=\"primary\">\n                    {more ? \"Less\" : \"More\"}\n                </Button>\n            </Box>\n        </div>\n    );\n};\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { Typography, Divider, Skeleton, Box } from \"@mui/material\";\n\n// local\nimport ProgressBar from \"components/Elements/ProgressBar\";\nimport { AdviseMetricType } from \"hooks/metrics\";\n\ninterface IAdviseMetric {\n    /** The metric object info of aggregated data */\n    metric: AdviseMetricType | null;\n}\n\n/**\n * A metric card that aggregates changes between the initial dependency\n * graph and the Thoth made dependency graph.\n */\nexport const AdviseMetric = ({ metric }: IAdviseMetric) => {\n    const justTotal = Object.values(metric?.justification ?? {}).reduce(\n        (a, b) => a + b,\n        0,\n    );\n\n    if (!metric) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <>\n            <Typography variant=\"body2\" gutterBottom>\n                {metric?.build}\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <Typography variant=\"h6\" mt={3} gutterBottom>\n                Justification Counts\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            {Object.entries(metric?.justification ?? {}).map(([key, value]) => {\n                return (\n                    <ProgressBar\n                        key={key}\n                        value={value}\n                        total={justTotal}\n                        label={key}\n                        mb={1}\n                    />\n                );\n            })}\n        </>\n    );\n};\n","import React from \"react\";\n\n// material-ui\nimport { Link, Stack, BoxProps } from \"@mui/material\";\n\ninterface IIconText extends BoxProps {\n    /** The text shown */\n    text: string;\n    /** The icon component to be displayed */\n    icon: React.ReactNode;\n    /** Optional link if text is selected */\n    link?: string;\n}\n\n/**\n * Text with an icon to the right of it.\n */\nconst IconText = ({ text, icon, link, ...props }: IIconText) => {\n    return (\n        <Stack {...props} direction=\"row\" spacing={1} alignItems=\"center\">\n            {icon}\n            <Link\n                underline=\"none\"\n                href={link ? link : undefined}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                variant=\"body2\"\n                align=\"center\"\n            >\n                {text}\n            </Link>\n        </Stack>\n    );\n};\n\nexport default IconText;\n\nIconText.propTypes = {};\n","import React from \"react\";\nimport { Button, Alert, AlertColor, AlertProps } from \"@mui/material\";\n\ninterface ICustomAlert extends AlertProps {\n    /** The alert content. */\n    info: {\n        /** Link to navigate to if alert is actioned on. */\n        link?: string;\n        /** Text displayed in the alert. */\n        message: string;\n        /** Severity (color) of alert: `[\"ERROR\", \"WARNING\", \"INFO\", \"SUCCESS\"]`. */\n        type: AlertColor;\n    };\n}\n\n/**\n * A custom alert card.\n */\nconst CustomAlert = ({ info, ...props }: ICustomAlert) => {\n    return (\n        <Alert\n            action={\n                info.link ? (\n                    <Button color=\"inherit\" size=\"small\" href={info?.link}>\n                        DETAILS\n                    </Button>\n                ) : undefined\n            }\n            severity={info.type}\n            {...props}\n        >\n            {info?.message}\n        </Alert>\n    );\n};\n\nexport default CustomAlert;\n","// React\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Chip,\n    ChipProps,\n    AlertColor,\n    Stack,\n    Paper,\n} from \"@mui/material\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport CustomAlert from \"./CustomAlert\";\n\n// utils\nimport { calcTime } from \"utils/calcTime\";\nimport {\n    AdviseDocumentRequestParams,\n    AdviseDocumentRequestResponseSuccess,\n} from \"../../api\";\n\ninterface IAdviseHeader {\n    /** the Advise document id*/\n    adviseDocument?: AdviseDocumentRequestResponseSuccess;\n    /** the Advise document logs*/\n    lastLog?: { [key: string]: string };\n}\n\n/**\n * Displays basic Advise document information and\n * displays any errors, info, or warnings that came up\n * in the document generation.\n */\nexport const AdviseHeader = ({ adviseDocument, lastLog }: IAdviseHeader) => {\n    // get status of the report\n    const [statusText, statusColor] = useMemo<\n        [string, ChipProps[\"color\"]]\n    >(() => {\n        // if report is done\n        if (adviseDocument?.result?.report) {\n            if (adviseDocument.result.report.ERROR) {\n                return [\"ERROR\", \"error\"];\n            } else {\n                return [\"COMPLETE\", \"success\"];\n            }\n        } else if (adviseDocument?.result?.error) {\n            return [\"ERROR\", \"error\"];\n        }\n        // if report is not done\n        else if (adviseDocument?.status?.state) {\n            return [adviseDocument.status.state.toUpperCase(), \"info\"];\n        } else {\n            return [\"UNKNOWN\", undefined];\n        }\n    }, [adviseDocument]);\n\n    return (\n        <>\n            <Paper elevation={0} sx={{ padding: 2, margin: 1 }}>\n                <Typography variant=\"h5\" mb={1}>\n                    <b>\n                        {adviseDocument?.metadata?.document_id ??\n                            (\n                                adviseDocument?.parameters as AdviseDocumentRequestParams\n                            )?.analysis_id}\n                    </b>\n                </Typography>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                    <Chip label={statusText} color={statusColor} />\n                    <IconText\n                        text={calcTime(\n                            adviseDocument?.status?.finished_at,\n                            adviseDocument?.status?.started_at,\n                            adviseDocument?.metadata?.datetime,\n                        )}\n                        icon={<AccessTimeIcon />}\n                    />\n                </Stack>\n            </Paper>\n            <>\n                {statusText === \"ERROR\" ? (\n                    <CustomAlert\n                        variant=\"filled\"\n                        sx={{ margin: 1, marginTop: 2 }}\n                        info={{\n                            message:\n                                adviseDocument?.result?.report?.ERROR ??\n                                adviseDocument?.result?.error_msg ??\n                                \"\",\n                            type: \"error\",\n                        }}\n                    />\n                ) : statusText !== \"COMPLETE\" ? (\n                    <CustomAlert\n                        variant=\"outlined\"\n                        sx={{ margin: 1, marginTop: 2 }}\n                        info={{\n                            message: lastLog?.message ?? \"\",\n                            type: lastLog?.levelname?.toLowerCase() as AlertColor,\n                        }}\n                    />\n                ) : undefined}\n            </>\n        </>\n    );\n};\n","import React from \"react\";\n\nimport {\n    TableHead,\n    TableRow,\n    TableSortLabel,\n    Box,\n    TableCell,\n} from \"@mui/material\";\n\nimport { visuallyHidden } from \"@mui/utils\";\n\nconst headCells = [\n    {\n        id: \"name\",\n        numeric: false,\n        label: \"Package\",\n    },\n    {\n        id: \"depth\",\n        numeric: true,\n        label: \"Depth\",\n    },\n    {\n        id: \"license\",\n        numeric: false,\n        label: \"License\",\n    },\n    {\n        id: \"dependencies\",\n        numeric: true,\n        label: \"Direct Dependencies\",\n    },\n];\n\ninterface IEnhancedTableHead {\n    /** the function used to sort an individual column */\n    onRequestSort: (c: string) => void;\n    /** the order in which the column is sorted on*/\n    order: \"asc\" | \"desc\";\n    /** The column in which to order the table by */\n    orderBy: string;\n}\n\n/**\n * A specific custom table header for packages.\n * It handles sorting individual columns.\n */\nfunction EnhancedTableHead({\n    order,\n    orderBy,\n    onRequestSort,\n}: IEnhancedTableHead) {\n    const createSortHandler = (property: string) => {\n        onRequestSort(property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding=\"normal\"\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={() => createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <Box component=\"span\" sx={visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </Box>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default EnhancedTableHead;\n","import React, { useContext, useMemo, useState } from \"react\";\n\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    CardHeader,\n    Chip,\n    Stack,\n    Typography,\n} from \"@mui/material\";\n\n// local\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\nimport WarningAmberOutlinedIcon from \"@mui/icons-material/WarningAmberOutlined\";\n\ninterface IPackageList {\n    graph?: Graph<Node<PackageNodeValue>>;\n}\n\ntype PackageList = {\n    name: string;\n    key: string;\n    summary?: string;\n    version?: string;\n    warnings: number;\n    errors: number;\n}[];\n\n/**\n * The table cells and total structure specific to\n * python packages.\n */\nexport function PackageList({ graph }: IPackageList) {\n    const { selected, setSelected } = useContext(SelectedPackageContext) ?? {\n        setSelected: () => console.log(\"missing callback\"),\n    };\n\n    const [search, setSearch] = useState<string>(\"\");\n\n    const handleSearch = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n        setSearch(event.target.value);\n    };\n\n    // format data\n    const packageList = useMemo(() => {\n        if (!graph) {\n            return [];\n        }\n\n        const packages: PackageList = [];\n        graph.nodes.forEach(node => {\n            if (node.value.depth === -1) {\n                return;\n            }\n            packages.push({\n                name: node.value.name ?? node.key,\n                key: node.key,\n                summary: node?.value?.metadata?.Summary ?? \"\",\n                version: node?.value.version,\n                warnings:\n                    node.value.justifications?.filter(j => j.type === \"WARNING\")\n                        ?.length ?? 0,\n                errors:\n                    node.value.justifications?.filter(j => j.type === \"ERROR\")\n                        ?.length ?? 0,\n            });\n        });\n\n        return packages;\n    }, [graph]);\n\n    if (!graph) {\n        return null;\n    }\n\n    return (\n        <Stack spacing={2}>\n            <SearchBar\n                onChange={handleSearch}\n                lefticon={<SearchRoundedIcon />}\n            />\n            {packageList\n                .filter(p => p.name.startsWith(search))\n                .map(p => {\n                    return (\n                        <Card\n                            elevation={0}\n                            key={p.key}\n                            sx={{\n                                backgroundColor:\n                                    selected === p.key\n                                        ? \"secondaryContainer.main\"\n                                        : undefined,\n                                color:\n                                    selected === p.key\n                                        ? \"secondaryContainer.contrast_text\"\n                                        : undefined,\n                            }}\n                        >\n                            <CardActionArea onClick={() => setSelected(p.key)}>\n                                <CardHeader\n                                    title={p.name}\n                                    subheader={`v${p.version}`}\n                                    action={\n                                        <Stack direction=\"row\" spacing={1}>\n                                            {p.warnings ? (\n                                                <Chip\n                                                    variant=\"outlined\"\n                                                    size=\"medium\"\n                                                    icon={\n                                                        <WarningAmberOutlinedIcon />\n                                                    }\n                                                    label={p.warnings}\n                                                    color=\"warning\"\n                                                />\n                                            ) : undefined}\n                                            {p.errors ? (\n                                                <Chip\n                                                    variant=\"outlined\"\n                                                    size=\"medium\"\n                                                    icon={\n                                                        <ErrorOutlineOutlinedIcon />\n                                                    }\n                                                    label={p.errors}\n                                                    color=\"error\"\n                                                />\n                                            ) : undefined}\n                                        </Stack>\n                                    }\n                                />\n                                {p.summary ? (\n                                    <CardContent>\n                                        <Typography variant=\"body2\">\n                                            {p.summary}\n                                        </Typography>\n                                    </CardContent>\n                                ) : undefined}\n                            </CardActionArea>\n                        </Card>\n                    );\n                })}\n        </Stack>\n    );\n}\n","import {\n    Box,\n    CircularProgress,\n    LinearProgress,\n    Typography,\n} from \"@mui/material\";\nimport React, { useMemo } from \"react\";\n\ninterface ILoading {\n    type: \"circular\" | \"bar\";\n    label?: string;\n    progress?: number;\n}\n\nconst Loading = ({ type, label, progress }: ILoading) => {\n    return useMemo(() => {\n        if (type === \"bar\") {\n            return (\n                <Box\n                    height=\"100vh\"\n                    flexDirection=\"column\"\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n                    <LinearProgress\n                        variant={progress ? \"determinate\" : undefined}\n                        value={progress}\n                    />\n                    <Typography variant=\"body2\">{label}</Typography>\n                </Box>\n            );\n        } else {\n            return (\n                <Box\n                    height=\"100vh\"\n                    flexDirection=\"column\"\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n                    <CircularProgress\n                        variant={progress ? \"determinate\" : undefined}\n                        value={progress}\n                    />\n                    <Typography variant=\"body2\">{label}</Typography>\n                </Box>\n            );\n        }\n    }, [type, label, progress]);\n};\n\nexport default Loading;\n","import React, { useContext, useState } from \"react\";\nimport { Grid, Box, Typography } from \"@mui/material\";\nimport { SelectedPackage } from \"../components\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { PackageList } from \"../components/PackageList\";\nimport Loading from \"components/Elements/Loading/Loading\";\nimport { StateContext } from \"stores/Global\";\n\ntype SelectedPackageType = {\n    selected: string;\n    setSelected: (c: string) => void;\n};\n\nexport const SelectedPackageContext = React.createContext<SelectedPackageType>(\n    {} as SelectedPackageType,\n);\n\ninterface IAdviseDetails {\n    graph?: Graph<Node<PackageNodeValue>>;\n}\n\nexport const AdviseDetails = ({ graph }: IAdviseDetails) => {\n    const [selected, setSelected] = useState<string>(\"\");\n    const state = useContext(StateContext);\n\n    if (!graph) {\n        return (\n            <Loading\n                type=\"circular\"\n                label={state?.loading?.[\"graph\"].text}\n                progress={\n                    ((state?.loading?.[\"graph\"].value ?? 0) /\n                        (state?.loading?.[\"graph\"].total ?? 1)) *\n                    100\n                }\n            />\n        );\n    }\n\n    if (graph.nodes.size === 1) {\n        return (\n            <Box\n                height=\"100vh\"\n                flexDirection=\"column\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h5\" align=\"center\">\n                    No packages found\n                </Typography>\n                <Typography variant=\"body2\" align=\"center\">\n                    The advise document encountered an error resulting in no\n                    Pipfile.lock\n                </Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <SelectedPackageContext.Provider value={{ selected, setSelected }}>\n            <Grid\n                container\n                spacing={0}\n                justifyContent=\"center\"\n                alignItems=\"flex-start\"\n            >\n                <Grid item sm={12} md={4} sx={{ padding: 1 }}>\n                    <PackageList graph={graph} />\n                </Grid>\n                <Grid item sm={12} md={8} sx={{ padding: 1 }}>\n                    {!selected || !graph ? (\n                        <Box\n                            height=\"100vh\"\n                            flexDirection=\"column\"\n                            display=\"flex\"\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                        >\n                            <Typography variant=\"h5\" align=\"center\">\n                                Choose a package\n                            </Typography>\n                            <Typography variant=\"body2\" align=\"center\">\n                                Click on a package from the packages found in\n                                the Pipfile.lock\n                            </Typography>\n                        </Box>\n                    ) : (\n                        <SelectedPackage graph={graph} />\n                    )}\n                </Grid>\n            </Grid>\n        </SelectedPackageContext.Provider>\n    );\n};\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { Typography } from \"@mui/material\";\n\ninterface ILockfileView {\n    /** The Pipfile.lock json object */\n    file: { default: { [key: string]: unknown } };\n}\n\n/**\n * Renders out a Pipfile.lock file and attaches\n * `<a>` tags to package names, which is used to\n *  scroll to certain spot in the lock file\n */\nexport const LockfileView = ({ file }: ILockfileView) => {\n    return (\n        <Typography variant=\"caption\">\n            <pre>\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: JSON.stringify(file, undefined, 4)?.replaceAll(\n                            new RegExp(\n                                '(\"' +\n                                    Object.keys(file?.default)?.join('\"|\"') +\n                                    '\")',\n                                \"g\",\n                            ),\n                            (match: string) => {\n                                return `<a id=\"${match.slice(\n                                    1,\n                                    -1,\n                                )}\">${match}</a>`;\n                            },\n                        ),\n                    }}\n                />\n            </pre>\n        </Typography>\n    );\n};\n","// react\nimport React from \"react\";\n\nimport { Typography, Grid } from \"@mui/material\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\nimport BookmarkIcon from \"@mui/icons-material/Bookmark\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\ninterface IPopup {\n    node: Node<PackageNodeValue>;\n}\n\n/**\n * Graph hover model appears when you hover over a node on the graph.\n */\nconst Popup = ({ node }: IPopup) => {\n    return (\n        <div>\n            <Grid container alignItems=\"center\">\n                <Grid item xs={6}>\n                    <Typography variant=\"h6\">\n                        <b>{node.value.id}</b>\n                    </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <Typography ml={2} variant=\"body1\">\n                        v{node.value.version ?? \"NaN\"}\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Typography gutterBottom variant=\"body2\">\n                {node.value?.metadata?.Summary ?? \"NaN\"}\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid item>\n                    <IconText\n                        text={node.value?.metadata?.License ?? \"NaN\"}\n                        icon={<GavelIcon />}\n                    />\n                </Grid>\n                <Grid item>\n                    <IconText\n                        ml={2}\n                        text={\n                            node.value?.latestVersion // TODO is not correct\n                                ? \"Latest version is installed\"\n                                : \"Installed version is NOT the latest.\"\n                        }\n                        icon={<BookmarkIcon />}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default Popup;\n","// react\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// utils and configs\nimport { options } from \"config\";\n\n// vis-network\nimport { Network, DataSet, Data } from \"vis-network/standalone\";\n\n// local\nimport Popup from \"../Popup\";\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\ninterface INetworkGraph {\n    graph: Graph<Node<PackageNodeValue>>;\n}\n\n/**\n * Renders a network graph visualization using `vis-network`.\n */\nconst NetworkGraph = ({ graph, ...props }: INetworkGraph) => {\n    const visJsRef = useRef<HTMLDivElement>(null);\n    const { selected } = useContext(SelectedPackageContext);\n\n    // create the graph\n    useEffect(() => {\n        if (!selected || !graph) {\n            return;\n        }\n\n        const selectedNode = graph.nodes.get(selected);\n\n        if (selectedNode) {\n            const nodes = graph.findAllNodesOnAllPaths(selectedNode, \"*App\");\n\n            const app_node = graph.nodes.get(\"*App\");\n            if (app_node) {\n                nodes.set(\"*App\", app_node);\n            }\n\n            // convert to vis graph format\n            const convertedNodes = new DataSet<PackageNodeValue>();\n            nodes.forEach(value => {\n                // popup element\n                const popup = document.createElement(\"div\");\n                ReactDOM.render(<Popup node={value} />, popup);\n\n                // default colors\n                let color = value.value.color ?? options.nodes.color.background;\n                let font = undefined;\n\n                // if node is root\n                if (value.key === \"*App\") {\n                    color = \"#4fc1ea\";\n                    font = { color: \"#4fc1ea\", strokeWidth: 3, size: 20 };\n                }\n                // if selected node\n                else if (value.key === selectedNode.key) {\n                    color = \"#f39200\";\n                }\n\n                convertedNodes.add({\n                    ...value.value,\n                    color: color,\n                    title:\n                        value.key === selectedNode.key || value.key === \"*App\"\n                            ? undefined\n                            : popup,\n                    font: font,\n                });\n            });\n\n            const visData: Data = {\n                nodes: convertedNodes,\n                edges: new DataSet(graph.visEdges),\n            };\n\n            const network =\n                visJsRef.current &&\n                new Network(visJsRef.current, visData, options);\n\n            // change cursor when hovering and grabbing\n            // Get the canvas HTML element\n            const networkCanvas = document\n                ?.getElementById(\"mynetwork\")\n                ?.getElementsByTagName(\"canvas\")[0];\n\n            // changes the cursor graphic depending on where and what the mouse is doing\n            const changeCursor = (newCursorStyle: string) => {\n                if (networkCanvas) {\n                    networkCanvas.style.cursor = newCursorStyle;\n                }\n            };\n\n            if (network) {\n                network.on(\"hoverNode\", function () {\n                    changeCursor(\"grab\");\n                });\n                network.on(\"blurNode\", function () {\n                    changeCursor(\"default\");\n                });\n                network.on(\"dragStart\", function () {\n                    changeCursor(\"grabbing\");\n                });\n                network.on(\"dragging\", function () {\n                    changeCursor(\"grabbing\");\n                });\n                network.on(\"dragEnd\", function () {\n                    changeCursor(\"grab\");\n                });\n            }\n        }\n    }, [selected, graph, visJsRef]);\n\n    return (\n        <div {...props} style={{ display: \"flex\", flexFlow: \"column nowrap\" }}>\n            <div\n                ref={visJsRef}\n                id=\"mynetwork\"\n                style={{ flex: \"1 1 auto\", height: \"50vh\" }}\n            />\n        </div>\n    );\n};\n\nexport default NetworkGraph;\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Collapse,\n    Grid,\n    IconButton,\n    Stack,\n    Typography,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\n\nimport DoneRoundedIcon from \"@mui/icons-material/DoneRounded\";\nimport CloseRoundedIcon from \"@mui/icons-material/CloseRounded\";\nimport { KeyboardArrowDown } from \"@mui/icons-material\";\n\ntype ScoreCardItemProp = {\n    tags: string;\n    name: string;\n    short: string;\n    risk: string;\n    passing?: boolean;\n    justification?: string;\n};\n\nconst ScorecardItem = ({\n    tags,\n    name,\n    short,\n    risk,\n    passing,\n    justification,\n}: ScoreCardItemProp) => {\n    const [selected, setSelected] = useState(false);\n\n    return (\n        <Box>\n            <Grid\n                container\n                alignItems=\"center\"\n                sx={{\n                    backgroundColor: selected\n                        ? \"surfaceVariant.main\"\n                        : undefined,\n                    borderRadius: \"16px\",\n                }}\n            >\n                <Grid item xs={11}>\n                    <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <IconButton onClick={() => setSelected(!selected)}>\n                            <KeyboardArrowDown\n                                sx={{\n                                    mr: -1,\n                                    transform: selected\n                                        ? \"rotate(0deg)\"\n                                        : \"rotate(-90deg)\",\n                                    transition: \"0.2s\",\n                                }}\n                            />\n                        </IconButton>\n                        <Typography variant=\"body1\" fontWeight=\"bolder\">\n                            {name}\n                        </Typography>\n                    </Stack>\n                </Grid>\n                <Grid item xs={1}>\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"flex-end\"\n                        sx={{ marginRight: 2 }}\n                    >\n                        {!passing ? (\n                            <CloseRoundedIcon color=\"error\" />\n                        ) : (\n                            <DoneRoundedIcon color=\"success\" />\n                        )}\n                    </Box>\n                </Grid>\n            </Grid>\n            <Collapse in={selected}>\n                <Grid\n                    container\n                    sx={{ marginLeft: 5, marginBottom: 1, paddingRight: 1 }}\n                >\n                    <Grid item xs={12} sx={{ marginBottom: 2 }}>\n                        <Typography variant=\"body2\">{short}</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography fontWeight=\"bolder\" variant=\"body2\">\n                            Reason\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} sx={{ marginBottom: 1 }}>\n                        <Typography variant=\"body2\">{justification}</Typography>\n                    </Grid>\n                    <Grid item xs={12} sx={{ marginBottom: 1 }}>\n                        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n                            <Typography variant=\"body2\">risk: </Typography>\n                            <Chip\n                                size=\"small\"\n                                label={risk}\n                                color={\n                                    risk === \"High\"\n                                        ? \"error\"\n                                        : risk == \"Medium\"\n                                        ? \"warning\"\n                                        : \"info\"\n                                }\n                            />\n                        </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n                            <Typography variant=\"body2\">tags: </Typography>\n                            {tags.split(\", \").map(tag => {\n                                return (\n                                    <Chip size=\"small\" key={tag} label={tag} />\n                                );\n                            })}\n                        </Stack>\n                    </Grid>\n                </Grid>\n            </Collapse>\n        </Box>\n    );\n};\n\nexport const ScorecardMetric = ({\n    metric,\n}: {\n    metric: {\n        tags: string;\n        name: string;\n        short: string;\n        risk: string;\n        passing?: boolean;\n        justification?: string;\n    }[];\n}) => {\n    return (\n        <Card\n            elevation={0}\n            sx={{\n                color: \"surface.contrastText\",\n                backgroundColor: \"surface.main\",\n                marginTop: 2,\n            }}\n        >\n            <CardHeader\n                title=\"Security Scorecards\"\n                subheader={`Scorecards give consumers of open-source projects an easy way to judge whether their dependencies are safe.`}\n                action={\n                    <IconButton\n                        href={\n                            \"https://github.com/ossf/scorecard/blob/main/docs/checks.md\"\n                        }\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <OpenInNewRoundedIcon />\n                    </IconButton>\n                }\n            />\n            <CardContent>\n                <Stack>\n                    {Object.values(metric).map(value => {\n                        return <ScorecardItem key={value.name} {...value} />;\n                    })}\n                </Stack>\n            </CardContent>\n        </Card>\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQueries, useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\nimport { UseQueryResult } from \"react-query/types/react/types\";\n\ntype path = paths[\"/python/package/version/metadata\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type PackageMetadataRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageMetadata = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    os_name?: requestParams[\"os_name\"],\n    os_version?: requestParams[\"os_version\"],\n    python_version?: requestParams[\"python_version\"],\n) => {\n    return axios.get<PackageMetadataRequestResponseSuccess>(\n        THOTH_URL + \"/python/package/version/metadata\",\n        {\n            params: {\n                name: name,\n                version: version,\n                index: index,\n                os_name: os_name,\n                os_version: os_version,\n                python_version: python_version,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageMetadata = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    os_name?: requestParams[\"os_name\"],\n    os_version?: requestParams[\"os_version\"],\n    python_version?: requestParams[\"python_version\"],\n    config?: { [key: string]: any },\n): UseQueryResult<\n    AxiosResponse<PackageMetadataRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n> => {\n    return useQuery<\n        AxiosResponse<PackageMetadataRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled:\n            !!name &&\n            !!version &&\n            !!index &&\n            !!os_name &&\n            !!os_version &&\n            !!python_version,\n        queryKey: [\n            \"packageMetadata\",\n            name,\n            version,\n            index,\n            os_name,\n            os_version,\n            python_version,\n        ],\n        queryFn: () =>\n            getPackageMetadata(\n                name,\n                version,\n                index,\n                os_name,\n                os_version,\n                python_version,\n            ),\n    });\n};\n\nexport const usePackagesMetadata = (\n    packages: requestParams[],\n    config?: { [key: string]: any },\n): UseQueryResult<\n    AxiosResponse<PackageMetadataRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n>[] => {\n    return useQueries(\n        packages.map(p => {\n            return {\n                ...config,\n                enabled:\n                    !!p.name &&\n                    !!p.version &&\n                    !!p.index &&\n                    !!p.os_name &&\n                    !!p.os_version &&\n                    !!p.python_version,\n                queryKey: [\n                    \"packageMetadata\",\n                    p.name,\n                    p.version,\n                    p.index,\n                    p.os_name,\n                    p.os_version,\n                    p.python_version,\n                ],\n                queryFn: () =>\n                    getPackageMetadata(\n                        p.name,\n                        p.version,\n                        p.index,\n                        p.os_name,\n                        p.os_version,\n                        p.python_version,\n                    ),\n            };\n        }),\n    ) as UseQueryResult<\n        AxiosResponse<PackageMetadataRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >[];\n};\n","import YAML from \"yaml\";\n\nexport function getFile(url: RequestInfo) {\n    return fetch(url)\n        .then(response => response.text())\n        .then(response => {\n            return response;\n        });\n}\n\nexport function getYamlFile(url: string) {\n    return getFile(url).then(text => YAML.parse(text));\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport { getYamlFile } from \"api\";\nimport { components } from \"lib/schema\";\n\nfunction getMatch(\n    name: string,\n    scorecards: components[\"schemas\"][\"Justification\"],\n) {\n    const matchLookup = {\n        Maintained: \"actively maintained\",\n        \"Dependency-Update-Tool\": \"automatic dependency updates\",\n        \"Binary-Artifacts\": \"binary artifacts\",\n        \"Branch-Protection\": \"branch protection\",\n        \"CI-Tests\": \"CI tests\",\n        \"CII-Best-Practices\": \"CII Best Practices\",\n        \"Code-Review\": \"code review\",\n        Contributors: \"contributors\",\n        Fuzzing: \"fuzzing\",\n        Packaging: \"published as a package\",\n        \"Pinned-Dependencies\": \"pinned dependencies\",\n        SAST: \"static source code analysis\",\n        \"Security-Policy\": \"security policy\",\n        \"Signed-Releases\": \"sign tags\",\n        \"Token-Permissions\": \"least privilege\",\n        Vulnerabilities: \"vulnerabilities\",\n        \"Dangerous-Workflow\": \"dangerous\",\n        License: \"license\",\n    };\n\n    const pattern = matchLookup[name as keyof typeof matchLookup];\n    return scorecards.find(scorecard => scorecard.message.includes(pattern));\n}\n\nexport const useScorecards = (\n    justifications: Map<string, components[\"schemas\"][\"Justification\"][number]>,\n) => {\n    const [scorecard, setScorecard] = useState<\n        {\n            tags: string;\n            name: string;\n            short: string;\n            risk: string;\n            passing?: boolean;\n            justification?: string;\n        }[]\n    >([]);\n\n    const scorecardJustifications = useMemo(() => {\n        if (justifications) {\n            return Array.from(justifications.values()).filter(s => {\n                if (\n                    s.link ===\n                    \"https://github.com/ossf/scorecard/blob/main/docs/checks.md\"\n                ) {\n                    justifications.delete(s.message);\n                    return true;\n                }\n                return false;\n            });\n        }\n    }, [justifications]);\n\n    useEffect(() => {\n        if (!justifications) {\n            return;\n        }\n\n        let active = true;\n        load();\n        return () => {\n            active = false;\n        };\n\n        async function load() {\n            const res = await getYamlFile(\n                \"https://raw.githubusercontent.com/ossf/scorecard/main/docs/checks/internal/checks.yaml\",\n            ).then(yaml => {\n                return Object.entries(yaml?.checks ?? {})\n                    .filter(([key]) =>\n                        getMatch(key, scorecardJustifications ?? []),\n                    )\n                    .map(([name, value]) => {\n                        const info = value as { [k: string]: unknown };\n                        const match = getMatch(\n                            name,\n                            scorecardJustifications ?? [],\n                        );\n                        return {\n                            tags: info?.tags as string,\n                            name: name as string,\n                            short: info?.short as string,\n                            risk: info?.risk as string,\n                            justification: match?.message as string,\n                            passing: match?.type !== \"WARNING\",\n                        };\n                    });\n            });\n            if (!active) {\n                return;\n            }\n            setScorecard(res);\n        }\n    }, [justifications]);\n\n    return scorecard;\n};\n","// React\nimport React, { useContext, useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Grid,\n    Box,\n    Link,\n    Stack,\n    CardHeader,\n    CardContent,\n    Card,\n    Divider,\n    IconButton,\n} from \"@mui/material\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\nimport ErrorRoundedIcon from \"@mui/icons-material/ErrorRounded\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport NetworkGraphView from \"../NetworkGraphView\";\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { components } from \"lib/schema\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { ScorecardMetric } from \"../JustificationMetrics\";\nimport { useScorecards } from \"./hooks/useScorecards\";\nimport { useLinkData } from \"./hooks/useLinkData\";\n\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport InfoRoundedIcon from \"@mui/icons-material/InfoOutlined\";\nimport WarningAmberRoundedIcon from \"@mui/icons-material/WarningAmberOutlined\";\nimport StarRoundedIcon from \"@mui/icons-material/StarRounded\";\n\ninterface ISelectedPackage {\n    graph: Graph<Node<PackageNodeValue>>;\n}\n\n/**\n * Renders the selected package context variable's data. It will preform\n * a search of the list of packages using the selected package variable.\n */\nexport const SelectedPackage = ({ graph }: ISelectedPackage) => {\n    const { selected, setSelected } = useContext(SelectedPackageContext);\n\n    const selectedPackage = useMemo<Node<PackageNodeValue> | undefined>(() => {\n        return graph.nodes.get(selected);\n    }, [selected]);\n\n    const dependents = useMemo<string[]>(() => {\n        const deps: string[] = [];\n\n        if (selectedPackage) {\n            [...selectedPackage.parents]\n                .filter(p => p !== \"*App\")\n                .forEach(node => {\n                    const nodeObj = graph.nodes.get(node);\n                    if (nodeObj) {\n                        deps.push(node);\n                    }\n                });\n        }\n\n        return deps;\n    }, [selectedPackage]);\n\n    const justifications = useMemo(() => {\n        const justs: Map<\n            string,\n            components[\"schemas\"][\"Justification\"][number]\n        > = new Map();\n\n        if (selectedPackage) {\n            selectedPackage?.value?.justifications?.forEach(just => {\n                justs.set(just.message, just);\n            });\n        }\n\n        return justs;\n    }, [selectedPackage]);\n\n    const scorecards = useScorecards(justifications);\n\n    const linkData = useLinkData(justifications);\n\n    const popular = useMemo(() => {\n        if (justifications) {\n            return Array.from(justifications.values()).find(s => {\n                if (s.message.includes(\"popularity on GitHub\")) {\n                    justifications.delete(s.message);\n                    return true;\n                }\n                return false;\n            });\n        }\n    }, [justifications]);\n\n    const browseLink = useMemo(() => {\n        if (justifications) {\n            const just = Array.from(justifications.values()).find(s => {\n                if (s.message.includes(\"Thoth Search UI\")) {\n                    justifications.delete(s.message);\n                    return true;\n                }\n                return false;\n            });\n\n            return just?.link;\n        }\n    }, [justifications]);\n\n    console.log(linkData);\n\n    const showError = useMemo(() => {\n        return (\n            <Stack direction=\"row\" alignItems=\"center\" sx={{ marginTop: 2 }}>\n                <ErrorRoundedIcon color=\"error\" sx={{ marginRight: \".5rem\" }} />\n                <Typography mb={0} color=\"error\" gutterBottom variant=\"body2\">\n                    The package metadata could not be fetched.\n                </Typography>\n            </Stack>\n        );\n    }, []);\n\n    return (\n        <Box>\n            <Card\n                elevation={0}\n                sx={{ padding: 2, backgroundColor: \"surface.main\" }}\n            >\n                <Grid container alignItems=\"center\" mb={1}>\n                    <Grid item>\n                        <Typography\n                            variant=\"h3\"\n                            sx={{ color: \"surface.contrastText\" }}\n                        >\n                            <Link underline=\"hover\" href={browseLink}>\n                                <b>{selectedPackage?.value?.name}</b>\n                            </Link>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography ml={2} variant=\"h6\">\n                            {selectedPackage?.value?.version}\n                        </Typography>\n                    </Grid>\n                </Grid>\n\n                <Grid container spacing={1}>\n                    <Grid item>\n                        <IconText\n                            text={\n                                selectedPackage?.value?.metadata?.License ??\n                                \"NaN\"\n                            }\n                            icon={<GavelIcon />}\n                        />\n                    </Grid>\n                    {Object.values(linkData).map(value => {\n                        return (\n                            <>\n                                <Grid item>\n                                    <Divider orientation=\"vertical\" />\n                                </Grid>\n                                <Grid key={value.label} item>\n                                    <IconText\n                                        text={value.label ?? \"\"}\n                                        icon={value.icon}\n                                        link={value.link}\n                                    />\n                                </Grid>\n                            </>\n                        );\n                    })}\n                </Grid>\n\n                <Typography sx={{ marginTop: 2 }} variant=\"body1\">\n                    {selectedPackage?.value?.metadata?.Summary}\n                </Typography>\n\n                {!selectedPackage?.value?.metadata && showError}\n            </Card>\n\n            {scorecards.length > 0 ? (\n                <ScorecardMetric metric={scorecards} />\n            ) : undefined}\n\n            {popular ? (\n                <Card\n                    elevation={0}\n                    sx={{\n                        color: \"surface.contrastText\",\n                        backgroundColor: \"surface.main\",\n                        marginTop: 2,\n                    }}\n                >\n                    <CardHeader\n                        title={popular.message}\n                        action={\n                            <IconButton\n                                href={popular.link}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={<StarRoundedIcon />}\n                    />\n                </Card>\n            ) : undefined}\n\n            {browseLink\n                ? Array.from(justifications.values()).map(just => {\n                      return (\n                          <Card\n                              key={just.message}\n                              elevation={0}\n                              sx={{\n                                  color: \"surface.contrastText\",\n                                  backgroundColor: \"surface.main\",\n                                  marginTop: 2,\n                              }}\n                          >\n                              <CardHeader\n                                  title={just.message}\n                                  action={\n                                      <IconButton\n                                          href={just.link}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                      >\n                                          <OpenInNewRoundedIcon />\n                                      </IconButton>\n                                  }\n                                  avatar={\n                                      just.type === \"ERROR\" ? (\n                                          <ErrorRoundedIcon color=\"error\" />\n                                      ) : just.type === \"WARNING\" ? (\n                                          <WarningAmberRoundedIcon color=\"warning\" />\n                                      ) : (\n                                          <InfoRoundedIcon color=\"info\" />\n                                      )\n                                  }\n                              />\n                          </Card>\n                      );\n                  })\n                : undefined}\n\n            <Card\n                elevation={0}\n                sx={{\n                    color: \"surface.contrastText\",\n                    backgroundColor: \"surface.main\",\n                    marginTop: 2,\n                }}\n            >\n                <CardHeader\n                    title=\"Dependency Graph\"\n                    subheader={\n                        <Typography variant=\"body1\" mb={2}>\n                            {[...(selectedPackage?.parents ?? [])].filter(\n                                p => p !== \"*App\",\n                            )?.length === 0\n                                ? selectedPackage?.value?.label +\n                                  \" is not a dependent of any package in this Python environment\"\n                                : \"There are \" +\n                                  [...(selectedPackage?.parents ?? [])].filter(\n                                      p => p !== \"*App\",\n                                  )?.length +\n                                  \" package(s) that have \" +\n                                  selectedPackage?.value?.label +\n                                  \" as a direct dependency: \"}\n                            {dependents.map((dep, i) => {\n                                return (\n                                    <>\n                                        <Link\n                                            key={dep + i}\n                                            underline=\"hover\"\n                                            onClick={() => setSelected(dep)}\n                                        >\n                                            {dep}\n                                        </Link>{\" \"}\n                                    </>\n                                );\n                            })}\n                        </Typography>\n                    }\n                />\n                <CardContent>\n                    <NetworkGraphView graph={graph} />\n                </CardContent>\n            </Card>\n        </Box>\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { components } from \"lib/schema\";\n\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\nimport ArticleRoundedIcon from \"@mui/icons-material/ArticleRounded\";\nimport NewReleasesRoundedIcon from \"@mui/icons-material/NewReleasesRounded\";\n\nexport const useLinkData = (\n    justifications: Map<string, components[\"schemas\"][\"Justification\"][number]>,\n) => {\n    const [linkData, setLinkData] = useState<{\n        [key: string]: {\n            label?: string;\n            icon?: React.ReactNode;\n            link?: string;\n        };\n    }>({\n        \"libraries.io\": {\n            label: \"libraries.io\",\n            icon: <OpenInNewRoundedIcon />,\n        },\n        \"released on PyPI\": {\n            label: \"PyPI\",\n            icon: <OpenInNewRoundedIcon />,\n        },\n        \"hosted on GitHub\": {\n            label: \"GitHub\",\n            icon: <GitHubIcon />,\n        },\n        \"Release notes\": {\n            label: \"Release\",\n            icon: <NewReleasesRoundedIcon />,\n        },\n        \"StackOverflow tags\": {\n            label: \"StackOverflow\",\n            icon: <OpenInNewRoundedIcon />,\n        },\n        \"project documentation\": {\n            label: \"Documentation\",\n            icon: <ArticleRoundedIcon />,\n        },\n    });\n\n    useEffect(() => {\n        const patterns = Object.keys(linkData);\n        let temp = linkData;\n\n        if (justifications) {\n            Array.from(justifications.values()).forEach(s => {\n                patterns.forEach(pattern => {\n                    if (s.message.includes(pattern)) {\n                        justifications.delete(s.message);\n                        temp = {\n                            ...temp,\n                            [pattern]: {\n                                ...temp[pattern],\n                                link: s?.link ?? \"\",\n                            },\n                        };\n                    }\n                });\n            });\n        }\n\n        Object.entries(temp).forEach(([key, value]) => {\n            if (!value.link) {\n                delete temp[key];\n            }\n        });\n\n        setLinkData(temp);\n    }, [justifications]);\n\n    return linkData;\n};\n","import React from \"react\";\nimport InfoCard from \"components/Elements/InfoCard\";\nimport {\n    AdviseMetric,\n    DependenciesMetric,\n    LicenseMetric,\n} from \"components/Metrics\";\nimport { Masonry } from \"@mui/lab\";\nimport { AllMetrics } from \"../hooks\";\nimport { AdviseHeader } from \"../components\";\nimport { Box } from \"@mui/material\";\nimport { AdviseDocumentRequestResponseSuccess } from \"../api\";\n\ninterface IAdviseSummary {\n    metrics: AllMetrics;\n    adviseDocument?: AdviseDocumentRequestResponseSuccess;\n    lastLog?: { [key: string]: string };\n}\n\nexport const AdviseSummary = ({\n    metrics,\n    adviseDocument,\n    lastLog,\n}: IAdviseSummary) => {\n    return (\n        <Box>\n            <AdviseHeader adviseDocument={adviseDocument} lastLog={lastLog} />\n            <Masonry\n                columns={{ xs: 1, md: 2 }}\n                spacing={2}\n                sx={{ margin: \"0 auto\" }}\n            >\n                <InfoCard\n                    cardMeta={{\n                        title: \"Thoth Advise Summary\",\n                    }}\n                    cardBody={<AdviseMetric metric={metrics?.advise} />}\n                />\n                <InfoCard\n                    cardMeta={{\n                        title: \"Dependencies Summary\",\n                    }}\n                    cardBody={\n                        <DependenciesMetric metric={metrics?.dependencies} />\n                    }\n                />\n                <InfoCard\n                    cardMeta={{\n                        title: \"Licenses Summary\",\n                    }}\n                    cardBody={<LicenseMetric metric={metrics?.licenses} />}\n                />\n            </Masonry>\n        </Box>\n    );\n};\n","import * as React from \"react\";\nimport useScrollTrigger from \"@mui/material/useScrollTrigger\";\nimport Box from \"@mui/material/Box\";\nimport Fab from \"@mui/material/Fab\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\nimport Zoom from \"@mui/material/Zoom\";\n\ninterface Props {\n    children: React.ReactElement;\n    window?: () => Window;\n}\n\nfunction ScrollTop(props: Props) {\n    const { children, window } = props;\n    const trigger = useScrollTrigger({\n        target: window ? window() : undefined,\n        disableHysteresis: true,\n        threshold: 100,\n    });\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        const anchor = (\n            (event.target as HTMLDivElement).ownerDocument || document\n        ).querySelector(\"#back-to-top-anchor\");\n\n        if (anchor) {\n            anchor.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n            });\n        }\n    };\n\n    return (\n        <Zoom in={trigger}>\n            <Box\n                onClick={handleClick}\n                role=\"presentation\"\n                sx={{ position: \"fixed\", bottom: 16, right: 16 }}\n            >\n                {children}\n            </Box>\n        </Zoom>\n    );\n}\n\nexport function ScrollToTop(props: Props) {\n    return (\n        <React.Fragment>\n            <div id=\"back-to-top-anchor\" />\n            {props.children}\n            <ScrollTop {...props}>\n                <Fab\n                    color=\"secondary\"\n                    size=\"small\"\n                    aria-label=\"scroll back to top\"\n                >\n                    <KeyboardArrowUpIcon />\n                </Fab>\n            </ScrollTop>\n        </React.Fragment>\n    );\n}\n","import React, { useMemo } from \"react\";\n\nimport {\n    Box,\n    Grid,\n    FormControl,\n    Stack,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    Typography,\n    TextField,\n    IconButton,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Paper,\n} from \"@mui/material\";\n\nimport AddRoundedIcon from \"@mui/icons-material/AddRounded\";\n\nimport {\n    AdviseDocumentRequestResponseSuccess,\n    useAdviseDocument,\n} from \"../api\";\nimport { LOCAL_STORAGE_KEY } from \"config\";\nimport { components } from \"lib/schema\";\n\nimport { Requirements } from \"../../../hooks\";\nimport { Variant } from \"@mui/material/styles/createTypography\";\nimport { Lockfile } from \"../../../utils/formatLockfile\";\nimport { ScrollToTop } from \"../../../components/Elements/ScrollToTop\";\n\ninterface IAdviseCompare {\n    adviseDocument?: AdviseDocumentRequestResponseSuccess;\n}\n\nexport const AdviseCompare = ({ adviseDocument }: IAdviseCompare) => {\n    const [comparison, setComparison] = React.useState(\n        adviseDocument?.metadata?.document_id ?? \"\",\n    );\n\n    const compareDoc = useAdviseDocument(comparison);\n\n    const [open, setOpen] = React.useState(false);\n    const [importText, setImportText] = React.useState(\"\");\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event?: any, reason?: string) => {\n        if (reason !== \"backdropClick\") {\n            setOpen(false);\n        }\n    };\n\n    const handleImport = () => {\n        const ids = localStorage.getItem(LOCAL_STORAGE_KEY) ?? \"\";\n\n        const split = ids.split(\",\");\n        if (!split.includes(importText)) {\n            split.push(importText);\n            localStorage.setItem(LOCAL_STORAGE_KEY, split.join(\",\"));\n        }\n\n        setImportText(\"\");\n        setOpen(false);\n    };\n\n    const handleChange = (event: SelectChangeEvent) => {\n        setComparison(event.target.value);\n    };\n\n    const localHistory: string[] = useMemo(() => {\n        const history: string[] = [];\n\n        if (\n            (\n                adviseDocument?.result?.parameters\n                    ?.project as components[\"schemas\"][\"ProjectDef\"]\n            )?.requirements_locked\n        ) {\n            history.push(\"Original Lockfile\");\n        }\n\n        const ids = localStorage.getItem(LOCAL_STORAGE_KEY);\n        if (ids) {\n            history.push(...ids.split(\",\").filter(s => s !== \"\"));\n        }\n\n        return history;\n    }, [importText === \"\"]);\n\n    const COMPARE_COLORS = {\n        old: {\n            text: \"errorContainer.contrastText\",\n            background: \"errorContainer.main\",\n        },\n        new: {\n            text: \"successContainer.contrastText\",\n            background: \"successContainer.main\",\n        },\n        change: {\n            text: \"warningContainer.contrastText\",\n            background: \"warningContainer.main\",\n        },\n        equal: {\n            text: undefined,\n            background: undefined,\n        },\n    };\n\n    const comparePaths = (\n        obj1: any,\n        obj2: any,\n        label?: string,\n        mapping = (obj: typeof obj1) => obj,\n    ) => {\n        // if not null\n        const obj1_mapped = obj1 ? mapping(obj1) : null;\n        const obj2_mapped = obj2 ? mapping(obj2) : null;\n\n        // compare if equal\n        if (obj1_mapped && obj2_mapped) {\n            if (obj1_mapped === obj2_mapped) {\n                return (\n                    <>\n                        {renderCompareLine(\n                            obj1_mapped as string,\n                            \"equal\",\n                            label,\n                        )}\n                        {renderCompareLine(\n                            obj2_mapped as string,\n                            \"equal\",\n                            label,\n                        )}\n                    </>\n                );\n            } else {\n                return (\n                    <>\n                        {renderCompareLine(\n                            obj1_mapped as string,\n                            \"change\",\n                            label,\n                        )}\n                        {renderCompareLine(\n                            obj2_mapped as string,\n                            \"change\",\n                            label,\n                        )}\n                    </>\n                );\n            }\n        } else if (obj1_mapped) {\n            return (\n                <>\n                    {renderCompareLine(obj1_mapped as string, \"old\", label)}\n                    {renderCompareLine(obj2_mapped as string, \"\", label)}\n                </>\n            );\n        } else if (obj2_mapped) {\n            return (\n                <>\n                    {renderCompareLine(obj1_mapped as string, \"\", label)}\n                    {renderCompareLine(obj2_mapped as string, \"new\", label)}\n                </>\n            );\n        } else {\n            return undefined;\n        }\n    };\n\n    const renderCompareLine = (\n        value: string,\n        compareType: \"old\" | \"new\" | \"equal\" | \"change\" | \"\",\n        label?: string,\n    ) => {\n        const borderStyles = {\n            height: \"100%\",\n            paddingBottom: 0.25,\n            paddingTop: 0.25,\n            borderRadius: 0,\n            borderStyle: \"hidden solid hidden solid\",\n            overflow: \"hidden\",\n        };\n        if (compareType) {\n            return (\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            backgroundColor:\n                                COMPARE_COLORS[compareType].background,\n                            ...borderStyles,\n                        }}\n                    >\n                        <Stack direction=\"row\">\n                            {compareType !== \"equal\" ? (\n                                <Typography\n                                    sx={{\n                                        textAlign: \"center\",\n                                        minWidth: \"2rem\",\n                                        color: COMPARE_COLORS[compareType].text,\n                                    }}\n                                    variant=\"body2\"\n                                >\n                                    <b>\n                                        {compareType === \"old\"\n                                            ? \"-\"\n                                            : compareType === \"new\"\n                                            ? \"+\"\n                                            : \"~\"}\n                                    </b>\n                                </Typography>\n                            ) : (\n                                <Box sx={{ minWidth: \"2rem\" }} />\n                            )}\n                            {label ? (\n                                <Typography\n                                    sx={{\n                                        marginRight: 1,\n                                        color: COMPARE_COLORS[compareType].text,\n                                    }}\n                                    variant=\"body2\"\n                                >\n                                    <b>{label + \":\"}</b>\n                                </Typography>\n                            ) : undefined}\n                            <Typography\n                                sx={{ color: COMPARE_COLORS[compareType].text }}\n                                display=\"inline\"\n                                variant=\"body2\"\n                            >\n                                {value}\n                            </Typography>\n                        </Stack>\n                    </Paper>\n                </Grid>\n            );\n        } else {\n            return (\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            backgroundColor: COMPARE_COLORS[\"equal\"].background,\n                            ...borderStyles,\n                        }}\n                    >\n                        <Box />\n                    </Paper>\n                </Grid>\n            );\n        }\n    };\n\n    const doubleRenderTypography = (\n        variant: Variant,\n        text: string,\n        styleOverrides: { [key: string]: string | number | undefined } = {},\n    ) => {\n        const headerStyles = {\n            paddingLeft: 4,\n            paddingBottom: 1,\n            paddingTop: 4,\n            borderRadius: 0,\n            borderStyle: \"hidden solid hidden solid\",\n            ...styleOverrides,\n        };\n        return (\n            <>\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            ...headerStyles,\n                        }}\n                    >\n                        <Typography variant={variant}>{text}</Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            ...headerStyles,\n                        }}\n                    >\n                        <Typography variant={variant}>{text}</Typography>\n                    </Paper>\n                </Grid>\n            </>\n        );\n    };\n\n    const compareArrays = (\n        array1: any[] = [],\n        array2: any[] = [],\n        mapping = (obj: any) => obj,\n    ) => {\n        const s1 = array1.map(e => JSON.stringify(e));\n        const s2 = array2.map(e => JSON.stringify(e));\n        const set1 = new Set(s1);\n        const set2 = new Set(s2);\n\n        const merged = [...new Set([...s1, ...s2])];\n\n        return merged.sort().map(key => {\n            const value = JSON.parse(key);\n            return comparePaths(\n                set1.has(key) ? value : undefined,\n                set2.has(key) ? value : undefined,\n                undefined,\n                mapping,\n            );\n        });\n    };\n\n    const createProjectCompare = (\n        proj1?: components[\"schemas\"][\"ProjectDef\"],\n        proj2?: components[\"schemas\"][\"ProjectDef\"],\n    ) => {\n        const runtimeEnvironment: (keyof components[\"schemas\"][\"RuntimeEnvironment\"])[] =\n            [\n                \"name\",\n                \"python_version\",\n                \"cuda_version\",\n                \"openblas_version\",\n                \"openmpi_version\",\n                \"cudnn_version\",\n                \"mkl_version\",\n                \"platform\",\n                \"base_image\",\n            ];\n        const dev_packages = [\n            ...new Set([\n                ...Object.keys(\n                    (proj1?.requirements as Requirements)?.[\"dev-packages\"] ??\n                        {},\n                ),\n                ...Object.keys(\n                    (proj2?.requirements as Requirements)?.[\"dev-packages\"] ??\n                        {},\n                ),\n            ]),\n        ];\n        const packages = [\n            ...new Set([\n                ...Object.keys(\n                    (proj1?.requirements as Requirements)?.packages ?? {},\n                ),\n                ...Object.keys(\n                    (proj2?.requirements as Requirements)?.packages ?? {},\n                ),\n            ]),\n        ];\n        const requirements_locked = [\n            ...new Set([\n                ...Object.keys(\n                    (proj1?.requirements_locked as Lockfile)?.default ?? {},\n                ),\n                ...Object.keys(\n                    (proj2?.requirements_locked as Lockfile)?.default ?? {},\n                ),\n            ]),\n        ];\n\n        return (\n            <>\n                {dev_packages.length > 0\n                    ? doubleRenderTypography(\"h6\", \"Pipfile Dev Packages\", {\n                          paddingTop: 0.5,\n                          paddingBottom: 0.5,\n                      })\n                    : undefined}\n                {dev_packages.map(key => {\n                    return comparePaths(\n                        (proj1?.requirements as Requirements)?.[\"dev-packages\"][\n                            key\n                        ],\n                        (proj2?.requirements as Requirements)?.[\"dev-packages\"][\n                            key\n                        ],\n                        key,\n                    );\n                })}\n\n                {packages.length > 0\n                    ? doubleRenderTypography(\"h6\", \"Pipfile Packages\", {\n                          paddingTop: 0.5,\n                          paddingBottom: 0.5,\n                      })\n                    : undefined}\n                {packages.map(key => {\n                    return comparePaths(\n                        (proj1?.requirements as Requirements)?.packages[key],\n                        (proj2?.requirements as Requirements)?.packages[key],\n                        key,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Pipfile.lock Sources\")}\n                {compareArrays(\n                    (proj1?.requirements_locked as Lockfile)?._meta?.sources,\n                    (proj2?.requirements_locked as Lockfile)?._meta?.sources,\n                    obj => {\n                        return `${obj.name} (${obj.url})`;\n                    },\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Pipfile.lock Packages\")}\n                {requirements_locked.map(key => {\n                    return comparePaths(\n                        (proj1?.requirements_locked as Lockfile)?.default[key],\n                        (proj2?.requirements_locked as Lockfile)?.default[key],\n                        key,\n                        obj => {\n                            return obj?.version;\n                        },\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Runtime Environment\")}\n                {runtimeEnvironment.map(field => {\n                    return comparePaths(\n                        proj1?.runtime_environment?.[field],\n                        proj2?.runtime_environment?.[field],\n                        field,\n                    );\n                })}\n\n                {comparePaths(\n                    proj1?.runtime_environment?.operating_system,\n                    proj1?.runtime_environment?.operating_system,\n                    \"operating_system\",\n                    obj => {\n                        return obj.name + \" \" + obj.version;\n                    },\n                )}\n                {comparePaths(\n                    proj1?.runtime_environment?.hardware,\n                    proj1?.runtime_environment?.hardware,\n                    \"hardware\",\n                    obj => {\n                        let text = \"\";\n                        text += obj.cpu_model ?? \" \";\n                        text += obj.cpu_family ?? \" \";\n                        text += obj.gpu_model ?? \" \";\n                        if (text.trim()) {\n                            return text;\n                        }\n                    },\n                )}\n            </>\n        );\n    };\n\n    const createCompare = (\n        doc1: AdviseDocumentRequestResponseSuccess,\n        doc2: AdviseDocumentRequestResponseSuccess,\n    ) => {\n        const metadataFields: (keyof AdviseDocumentRequestResponseSuccess[\"metadata\"])[] =\n            [\n                \"document_id\",\n                \"analyzer\",\n                \"analyzer_version\",\n                \"datetime\",\n                \"thoth_deployment_name\",\n            ];\n        const argumentFields: string[] = [\n            \"beam_width\",\n            \"constraints\",\n            \"count\",\n            \"dev\",\n            \"labels\",\n            \"library_usage\",\n            \"limit\",\n            \"limit_latest_versions\",\n            \"no_pretty\",\n            \"output\",\n            \"pipeline\",\n            \"plot\",\n            \"predictor\",\n            \"recommendation_type\",\n            \"requirements\",\n            \"requirements_format\",\n            \"requirements_locked\",\n            \"runtime_environment\",\n            \"seed\",\n            \"user_stack_scoring\",\n        ];\n        const distributionFields: (keyof AdviseDocumentRequestResponseSuccess[\"metadata\"][\"distribution\"])[] =\n            [\"codename\", \"id\", \"like\", \"version\"];\n        const osReleaseFields: (keyof AdviseDocumentRequestResponseSuccess[\"metadata\"][\"os_release\"])[] =\n            [\"id\", \"name\", \"platform_id\", \"version\"];\n\n        return (\n            <>\n                {doubleRenderTypography(\"h5\", \"Metadata\", { paddingTop: 0 })}\n                {metadataFields.map(field => {\n                    return comparePaths(\n                        doc1?.metadata?.[field],\n                        doc2.metadata?.[field],\n                        field,\n                    );\n                })}\n                {comparePaths(\n                    doc1?.result?.error_msg,\n                    doc2?.result?.error_msg,\n                    \"error_msg\",\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Arguments\")}\n                {argumentFields.map(field => {\n                    return comparePaths(\n                        (\n                            doc1?.metadata?.arguments?.advise as {\n                                [key: string]: any;\n                            }\n                        )?.[field],\n                        (\n                            doc2?.metadata?.arguments?.advise as {\n                                [key: string]: any;\n                            }\n                        )?.[field],\n                        field,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Distribution\")}\n                {distributionFields.map(field => {\n                    return comparePaths(\n                        doc1?.metadata?.distribution?.[field],\n                        doc2?.metadata?.distribution?.[field],\n                        field,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"OS Release\")}\n                {osReleaseFields.map(field => {\n                    return comparePaths(\n                        doc1?.metadata?.os_release?.[field],\n                        doc2?.metadata?.os_release?.[field],\n                        field as string,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Python\")}\n                {comparePaths(\n                    doc1?.metadata?.python,\n                    doc2?.metadata?.python,\n                    \"version\",\n                    obj => {\n                        return `${obj.major}.${obj.minor}.${obj.micro}`;\n                    },\n                )}\n                {comparePaths(\n                    doc1?.metadata?.python?.api_version,\n                    doc2?.metadata?.python?.api_version,\n                    \"api_version\",\n                )}\n                {comparePaths(\n                    doc1?.metadata?.python?.implementation_name,\n                    doc2?.metadata?.python?.implementation_name,\n                    \"implementation_name\",\n                )}\n                {comparePaths(\n                    doc1?.metadata?.python?.releaselevel,\n                    doc2?.metadata?.python?.releaselevel,\n                    \"release level\",\n                )}\n\n                {doubleRenderTypography(\"h5\", \"Result\")}\n                {comparePaths(\n                    doc1?.result?.report?.accepted_final_states_count,\n                    doc2?.result?.report?.accepted_final_states_count,\n                    \"accepted_final_states_count\",\n                )}\n                {comparePaths(\n                    doc1?.result?.report?.discarded_final_states_count,\n                    doc2?.result?.report?.discarded_final_states_count,\n                    \"discarded_final_states_count\",\n                )}\n                {comparePaths(\n                    doc1?.result?.report?.resolver_iterations,\n                    doc2?.result?.report?.resolver_iterations,\n                    \"resolver_iterations\",\n                )}\n                {comparePaths(\n                    doc1?.result?.report?.pipeline,\n                    doc2?.result?.report?.pipeline,\n                    \"pipeline\",\n                )}\n\n                {createProjectCompare(\n                    doc1?.result?.report?.products?.[0]?.project,\n                    doc2?.result?.report?.products?.[0]?.project,\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Advised Manifest Changes\")}\n                {compareArrays(\n                    doc1?.result?.report?.products?.[0]\n                        ?.advised_manifest_changes ?? [],\n                    doc2?.result?.report?.products?.[0]\n                        ?.advised_manifest_changes ?? [],\n                    obj => {\n                        let text = \"\";\n                        obj.forEach(\n                            (change: {\n                                patch: {\n                                    path: any;\n                                    op: any;\n                                    value: { name: any; value: any };\n                                };\n                            }) => {\n                                text += `[ ${change?.patch?.path}; ${change?.patch?.op}; ${change?.patch?.value?.name}: ${change?.patch?.value?.value} ]`;\n                            },\n                        );\n                        return text;\n                    },\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Stack Info\")}\n                {compareArrays(\n                    doc1?.result?.report?.stack_info,\n                    doc2?.result?.report?.stack_info,\n                    obj => {\n                        return obj.message;\n                    },\n                )}\n            </>\n        );\n    };\n\n    const compareJSX = useMemo(() => {\n        if (!adviseDocument || !compareDoc.data?.data) {\n            if (comparison === \"Original Lockfile\") {\n                return (\n                    <>\n                        {createProjectCompare(\n                            adviseDocument?.result?.report?.products?.[0]\n                                ?.project,\n                            (\n                                adviseDocument?.result?.parameters as {\n                                    project: components[\"schemas\"][\"ProjectDef\"];\n                                }\n                            )?.project,\n                        )}\n                        {doubleRenderTypography(\"body1\", \" \", {\n                            borderBottomStyle: \"solid\",\n                            borderRadius: undefined,\n                            borderTopLeftRadius: 0,\n                            borderTopRightRadius: 0,\n                        })}\n                    </>\n                );\n            }\n            return undefined;\n        }\n        return (\n            <>\n                {createCompare(adviseDocument, compareDoc.data?.data)}\n                {doubleRenderTypography(\"body1\", \" \", {\n                    borderBottomStyle: \"solid\",\n                    borderRadius: undefined,\n                    borderTopLeftRadius: 0,\n                    borderTopRightRadius: 0,\n                })}\n            </>\n        );\n    }, [adviseDocument, compareDoc.data?.data]);\n\n    if (!adviseDocument) {\n        return (\n            <Box\n                height=\"100vh\"\n                flexDirection=\"column\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h5\" align=\"center\">\n                    Compare not available\n                </Typography>\n                <Typography variant=\"body2\" align=\"center\">\n                    The adviser has not finished resolving packages\n                </Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <ScrollToTop>\n            <Box>\n                <Dialog disableEscapeKeyDown open={open} onClose={handleClose}>\n                    <DialogTitle>Import another Advise document</DialogTitle>\n                    <DialogContent>\n                        <Box\n                            component=\"form\"\n                            sx={{ display: \"flex\", flexWrap: \"wrap\" }}\n                        >\n                            <TextField\n                                onChange={event =>\n                                    setImportText(event.target.value)\n                                }\n                                label=\"Document ID\"\n                                variant=\"outlined\"\n                                size=\"small\"\n                            />\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => handleClose()}>Cancel</Button>\n                        <Button onClick={() => handleImport()}>Import</Button>\n                    </DialogActions>\n                </Dialog>\n                <Grid container mb={1} columnSpacing={10} sx={{ marginTop: 4 }}>\n                    <Grid item xs={6}>\n                        <Paper\n                            variant=\"outlined\"\n                            sx={{\n                                height: \"100%\",\n                                borderTopStyle: \"solid\",\n                                borderBottomLeftRadius: 0,\n                                borderBottomRightRadius: 0,\n                                paddingBottom: 4,\n                                paddingTop: 4,\n                                borderStyle: \"solid solid hidden solid\",\n                            }}\n                        >\n                            <Typography\n                                sx={{\n                                    textAlign: \"center\",\n                                    textOverflow: \"ellipsis\",\n                                    whiteSpace: \"nowrap\",\n                                    overflow: \"hidden\",\n                                }}\n                                fontWeight=\"bold\"\n                                variant=\"h6\"\n                            >\n                                Current Advise Document\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Paper\n                            variant=\"outlined\"\n                            sx={{\n                                height: \"100%\",\n                                borderTopStyle: \"solid\",\n                                borderBottomLeftRadius: 0,\n                                borderBottomRightRadius: 0,\n                                paddingBottom: 4,\n                                paddingTop: 4,\n                                borderStyle: \"solid solid hidden solid\",\n                            }}\n                        >\n                            <Stack\n                                direction=\"row\"\n                                spacing={1}\n                                sx={{ marginX: \"10%\" }}\n                            >\n                                <FormControl fullWidth>\n                                    <Select\n                                        value={comparison}\n                                        displayEmpty\n                                        onChange={handleChange}\n                                        size=\"small\"\n                                    >\n                                        <MenuItem disabled value=\"\">\n                                            <em>Select a comparison</em>\n                                        </MenuItem>\n                                        {localHistory.map(item => {\n                                            return (\n                                                <MenuItem\n                                                    key={item}\n                                                    value={item}\n                                                >\n                                                    {item}\n                                                </MenuItem>\n                                            );\n                                        })}\n                                    </Select>\n                                </FormControl>\n                                <IconButton onClick={handleClickOpen}>\n                                    <AddRoundedIcon />\n                                </IconButton>\n                            </Stack>\n                        </Paper>\n                    </Grid>\n                    {compareJSX}\n                </Grid>\n            </Box>\n        </ScrollToTop>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { components } from \"lib/schema\";\nimport { PackageNodeValue } from \"../../lib/interfaces/PackageNodeValue\";\n\nexport type AdviseMetricType = {\n    justification: Record<string, number>;\n    /** which build is being displayed (new or old) */\n    build: string;\n};\n\nexport const useAdviseMetric = (\n    graph?: Graph<Node<PackageNodeValue>>,\n    adviseDocument?: components[\"schemas\"][\"AdviserResultResponse\"],\n) => {\n    const [metric, setMetric] = useState<AdviseMetricType>();\n\n    useEffect(() => {\n        if (!graph || !adviseDocument?.metadata) {\n            return;\n        }\n\n        const base: AdviseMetricType = {\n            justification: {},\n            build: \"\",\n        };\n\n        //build environment\n        base.build = `We have analysed an application stack running on ${adviseDocument.metadata.os_release.name} ${adviseDocument.metadata.os_release.version}, running Python (${adviseDocument.metadata.python.implementation_name}) ${adviseDocument.metadata.python.major}.${adviseDocument.metadata.python.minor}.${adviseDocument.metadata.python.micro}. It was Adviser Job ID ${adviseDocument.metadata.document_id}, by ${adviseDocument.metadata.analyzer} v${adviseDocument.metadata.analyzer_version}.`;\n\n        //justification counts\n        adviseDocument?.result?.report?.products?.[0]?.justification.forEach(\n            justification => {\n                if (base.justification[justification.type]) {\n                    base.justification[justification.type] =\n                        base.justification[justification.type] + 1;\n                } else {\n                    base.justification[justification.type] = 1;\n                }\n            },\n        );\n        setMetric(base);\n    }, [graph, adviseDocument]);\n\n    return metric;\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type DependencyMetricType = {\n    /** summary object of all roots aggregated */\n    all: {\n        /** number of dependencies directly related to root packages */\n        direct?: number;\n        /** number of dependencies directly or indirectly related to the direct packages*/\n        indirect?: number;\n        /** number of dependencies that have no dependents*/\n        roots?: number;\n    };\n    /** an object of key (package name) value pairs of specific roots with direct and indirect parameters for each value */\n    roots: {\n        [key: string]: {\n            /** roots own direct packages */\n            direct?: number;\n            /** roots own indirect packages */\n            indirect?: number;\n        };\n    };\n};\n\nexport const useDependencyMetric = (graph?: Graph<Node<PackageNodeValue>>) => {\n    const [metric, setMetric] = useState<DependencyMetricType>();\n\n    useEffect(() => {\n        if (!graph) {\n            return;\n        }\n\n        const base: DependencyMetricType = {\n            all: {},\n            roots: {},\n        };\n\n        const roots: string[] = [];\n        graph.nodes.forEach(value => {\n            if (value.value.depth === 0) {\n                roots.push(value.key);\n            }\n        });\n\n        const visited = new Set();\n\n        // for each starting node\n        roots.forEach(root => {\n            const rootObj = graph.nodes.get(root);\n            if (!rootObj) {\n                return;\n            }\n\n            const bfs = graph.graphSearch(rootObj);\n            const visitedOrder = Array.from(bfs);\n\n            visitedOrder.forEach(node => {\n                if (node.key === \"*App\") {\n                    return;\n                }\n\n                if (visited.has(node.value.id)) {\n                    return;\n                } else {\n                    visited.add(node.value.id);\n                }\n\n                const depth =\n                    node.value.depth === 0\n                        ? \"roots\"\n                        : node.value.depth === 1\n                        ? \"direct\"\n                        : \"indirect\";\n\n                base.all[depth] = (base.all[depth] ?? 0) + 1;\n\n                if (depth !== \"roots\") {\n                    if (!base.roots[root]) {\n                        base.roots[root] = {};\n                    }\n                    base.roots[root][depth] =\n                        (base.roots?.[root]?.[depth] ?? 0) + 1;\n                }\n            });\n        });\n\n        setMetric(base);\n    }, [graph]);\n\n    return metric;\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type LicenseMetricType = {\n    /** The license name */\n    [key: string]: {\n        /** The packages that use this license as an object */\n        packages: {\n            [key: string]: {\n                depth: number;\n                specific?: string;\n            };\n        };\n        /** License specific information */\n        metadata: {\n            /** If license is approved by OSI standards */\n            isOsiApproved: boolean | null;\n        };\n    };\n};\n\nexport const useLicenseMetric = (graph?: Graph<Node<PackageNodeValue>>) => {\n    const [metric, setMetric] = useState<LicenseMetricType>();\n\n    useEffect(() => {\n        if (!graph) {\n            return;\n        }\n\n        let base: LicenseMetricType = {};\n\n        const roots: string[] = [];\n        graph.nodes.forEach(value => {\n            if (value.value.depth === 0) {\n                roots.push(value.key);\n            }\n        });\n\n        const visited = new Set();\n\n        // for each starting node\n        roots.forEach(root => {\n            const rootObj = graph.nodes.get(root);\n            if (!rootObj) {\n                return;\n            }\n\n            const bfs = graph.graphSearch(rootObj);\n            const visitedOrder = Array.from(bfs);\n\n            visitedOrder.forEach(node => {\n                if (node.key === \"*App\") {\n                    return;\n                }\n\n                if (visited.has(node.value.id)) {\n                    return;\n                } else {\n                    visited.add(node.value.id);\n                }\n\n                // licence metric\n                type PackageLicenses = {\n                    generalLicense: string;\n                    specificLicense?: string;\n                    isOsiApproved: boolean | null;\n                }[];\n                const packageLicenses: PackageLicenses = [];\n\n                // get general classification\n                node?.value?.metadata?.Classifier?.forEach(classifier => {\n                    const parsed = classifier.split(\" :: \");\n\n                    if (parsed[0] === \"License\") {\n                        if (parsed[1] === \"OSI Approved\") {\n                            packageLicenses.push({\n                                generalLicense:\n                                    parsed?.[2] ?? node.value.metadata?.License,\n                                specificLicense: node.value.metadata?.License,\n                                isOsiApproved: true,\n                            });\n                        } else {\n                            packageLicenses.push({\n                                generalLicense:\n                                    parsed?.[1] ?? node.value.metadata?.License,\n                                specificLicense: node.value.metadata?.License,\n                                isOsiApproved: false,\n                            });\n                        }\n                    }\n                });\n\n                if (packageLicenses.length === 0) {\n                    packageLicenses.push({\n                        generalLicense: node?.value?.metadata?.License ?? \"N/A\",\n                        specificLicense:\n                            node?.value?.metadata?.License ?? \"N/A\",\n                        isOsiApproved: null,\n                    });\n                }\n\n                // get specific classification\n                packageLicenses.forEach(license => {\n                    if (!base[license.generalLicense]) {\n                        base[license.generalLicense] = {\n                            packages: {},\n                            metadata: {\n                                isOsiApproved: license.isOsiApproved,\n                            },\n                        };\n                    }\n\n                    base = {\n                        ...base,\n                        [license.generalLicense]: {\n                            ...base[license.generalLicense],\n                            packages: {\n                                ...(base[license.generalLicense].packages ??\n                                    null),\n                                [node.value.id]: {\n                                    depth: node.value?.depth ?? 0,\n                                    specific: license.specificLicense,\n                                },\n                            },\n                        },\n                    };\n                });\n            });\n        });\n\n        setMetric(base);\n    }, [graph]);\n\n    return metric;\n};\n","import { useMemo } from \"react\";\nimport {\n    useLicenseMetric,\n    useDependencyMetric,\n    useAdviseMetric,\n    DependencyMetricType,\n    LicenseMetricType,\n    AdviseMetricType,\n} from \"hooks/metrics\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { AdviseDocumentRequestResponseSuccess } from \"../api\";\n\nexport type AllMetrics = {\n    advise: AdviseMetricType | null;\n    dependencies: DependencyMetricType | null;\n    licenses: LicenseMetricType | null;\n};\n\nexport function useMetrics(\n    graph?: Graph<Node<PackageNodeValue>>,\n    adviseDocument?: AdviseDocumentRequestResponseSuccess,\n) {\n    const adviseMetric = useAdviseMetric(graph, adviseDocument);\n    const dependencyMetric = useDependencyMetric(graph);\n    const licenseMetric = useLicenseMetric(graph);\n\n    return useMemo(() => {\n        const base: AllMetrics = {\n            advise: null,\n            dependencies: null,\n            licenses: null,\n        };\n\n        if (adviseMetric) {\n            base.advise = adviseMetric;\n        }\n        if (dependencyMetric) {\n            base.dependencies = dependencyMetric;\n        }\n        if (licenseMetric) {\n            base.licenses = licenseMetric;\n        }\n\n        return base;\n    }, [adviseMetric, dependencyMetric, licenseMetric]);\n}\n","import { useEffect, useRef } from \"react\";\n\nexport const useInterval = (\n    callback: undefined | (() => void),\n    delay: number | null,\n) => {\n    const savedCallback = useRef<undefined | (() => void)>();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n        function tick() {\n            if (savedCallback.current) {\n                savedCallback.current();\n            }\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n};\n","import { Node, NodeValue } from \"lib/interfaces/Node\";\n\n/**\n * Graph data structure implemented with an adjacent list\n */\nexport class Graph<NodeType extends Node<NodeValue>> {\n    nodes: Map<NodeType[\"key\"], NodeType>;\n    visEdges: {\n        id: number | string;\n        to: string;\n        from: string;\n    }[];\n\n    constructor() {\n        this.nodes = new Map();\n        this.visEdges = [];\n    }\n\n    /**\n     * Add a node to the graph.\n     */\n    addVertex(\n        key: NodeType[\"key\"],\n        value: NodeType[\"value\"],\n        Node: new (key: string, value: NodeType[\"value\"]) => NodeType,\n    ): NodeType {\n        let node = this.nodes.get(key);\n        if (node) {\n            return node;\n        }\n\n        node = new Node(key, value);\n        this.nodes.set(key, node);\n        return node;\n    }\n\n    /**\n     * Create a connection between the source node and the destination node.\n     * If the nodes don't exist, then it will make them on the fly.\n     */\n    addEdge(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n    ): [NodeType | undefined, NodeType | undefined] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n\n        if (sourceNode && destinationNode) {\n            sourceNode.addAdjacent(destinationNode);\n        }\n\n        return [sourceNode, destinationNode];\n    }\n\n    /**\n     * Generic graph search where we can pass a bfs or dfs\n     */\n    *graphSearch(first: NodeType, type = \"bfs\"): Generator<NodeType> {\n        const visited = new Set();\n        const visitList = [];\n\n        visitList.push(first);\n\n        while (visitList.length !== 0) {\n            const node = type === \"dfs\" ? visitList.pop() : visitList.shift();\n            if (node && !visited.has(node)) {\n                yield node;\n                visited.add(node);\n                node.getAdjacents().forEach(adj => visitList.push(adj));\n            }\n        }\n    }\n\n    /**\n     * Find a path between source and destination\n     * It might not be the optimal path\n     */\n    findPath(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n        path: Set<NodeType> = new Set(),\n    ): NodeType[] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n        const newPath = new Set(path);\n\n        if (!destinationNode || !sourceNode) return [];\n\n        newPath.add(sourceNode);\n\n        if (source === destination) {\n            return Array.from(newPath);\n        }\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const node of sourceNode.getAdjacents()) {\n            if (!newPath.has(node)) {\n                const nextPath = this.findPath(\n                    node.key, // TODO might still be node.value\n                    destination,\n                    newPath,\n                );\n                if (nextPath.length) {\n                    return nextPath;\n                }\n            }\n        }\n\n        return [];\n    }\n\n    findAllNodesOnAllPaths(\n        source: NodeType,\n        destinationKey: NodeType[\"key\"],\n        visited: Map<NodeType[\"key\"], NodeType> = new Map(),\n    ): Map<NodeType[\"key\"], NodeType> {\n        const visitList: (NodeType | undefined)[] = [];\n\n        visitList.push(source);\n\n        while (visitList.length !== 0) {\n            const node = visitList.pop();\n            if (node && node.key === destinationKey) {\n                continue;\n            }\n            if (node && !visited.has(node.key)) {\n                visited.set(node.key, node);\n                node.parents.forEach(parent =>\n                    visitList.push(this.nodes.get(parent)),\n                );\n            }\n        }\n\n        return visited;\n    }\n\n    /**\n     * Find all paths from source to destination\n     */\n    findAllPaths(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n        path: Set<NodeType> = new Set(),\n    ): NodeType[][] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n        const newPath = new Set(path);\n\n        if (!destinationNode || !sourceNode) return [];\n\n        newPath.add(sourceNode);\n\n        if (source === destination) {\n            return [Array.from(newPath)];\n        }\n\n        const paths: NodeType[][] = [];\n        sourceNode.getAdjacents().forEach(node => {\n            if (!newPath.has(node)) {\n                const nextPaths = this.findAllPaths(\n                    node.key, // TODO might need to use node.value.id\n                    destination,\n                    newPath,\n                );\n                nextPaths.forEach(nextPath => {\n                    paths.push(nextPath);\n                });\n            }\n        });\n        return paths;\n    }\n}\n","export interface NodeValue {\n    [key: string]: unknown;\n}\n\n/**\n * Graph node/vertex that hold adjacency nodes\n * For performance, uses a HashSet instead of array for adjacent.\n */\nexport class Node<GenericNodeValue extends NodeValue> {\n    /** Nodes connected (children) to this node **/\n    adjacents: Set<this>;\n    /** the unique identifier **/\n    key: string;\n    value: GenericNodeValue;\n    /** Nodes connected (parents) to this node **/\n    parents: Set<string>;\n\n    constructor(key: string, value: GenericNodeValue) {\n        this.adjacents = new Set(); // adjacency list\n        this.key = key; // key\n        this.value = value;\n        this.parents = new Set<string>();\n    }\n\n    /**\n     * Add node to adjacency list\n     * Runtime: O(1)\n     * @param {this} node\n     */\n    addAdjacent(node: this) {\n        this.adjacents.add(node);\n    }\n\n    /**\n     * Check if a Node is adjacent to other\n     * Runtime: O(1)\n     * @param {this} node\n     */\n    isAdjacent(node: this) {\n        return this.adjacents.has(node);\n    }\n\n    /**\n     * Get all adjacent nodes\n     */\n    getAdjacents() {\n        return Array.from(this.adjacents);\n    }\n}\n","import { useContext, useMemo } from \"react\";\n\nimport { usePackagesMetadata } from \"api\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { components, operations } from \"../lib/schema\";\nimport { PackageMetadata } from \"../lib/types/PackageMetadata\";\nimport { DispatchContext } from \"../stores/Global\";\n\nexport type Requirements = {\n    \"dev-packages\": { [key: string]: string };\n    packages: { [key: string]: string };\n    requires: {\n        python_version: string;\n    };\n    source: {\n        name: string;\n        url: string;\n        verify_ssl: boolean;\n    }[];\n};\n\n/**\n * Given a list of packages, create a graph using metadata information.\n */\nexport function useGraph(\n    data: operations[\"get_python_package_version_metadata\"][\"parameters\"][\"query\"][] = [],\n    knownRoots?: Requirements[\"packages\"],\n    justifications?: components[\"schemas\"][\"Justification\"],\n) {\n    const { updateLoading } = useContext(DispatchContext);\n    const allMetadata = usePackagesMetadata(data);\n\n    const isLoading = useMemo(() => {\n        updateLoading(\n            \"graph\",\n            \"Loading package metadata\",\n            allMetadata.filter(query => !query.isLoading).length,\n            allMetadata.length,\n        );\n        return allMetadata.some(query => query.isLoading);\n    }, [allMetadata]);\n\n    return useMemo(() => {\n        if (isLoading) {\n            return;\n        }\n        updateLoading(\"graph\");\n\n        // create graph\n        const tempGraph = new Graph<Node<PackageNodeValue>>();\n        const notRoot: unknown[] = [];\n\n        // add data to graph\n        allMetadata.forEach(query => {\n            // if could not find metadata\n            if (query.error) {\n                const error = query.error;\n                const params =\n                    error.response?.data?.parameters ??\n                    error.response?.config?.params;\n\n                const value: PackageNodeValue = {\n                    id: params.name.toLowerCase(),\n                    label: params.name + \" \" + params.version,\n                    name: params.name,\n                    version: params.version,\n                    metadata: null,\n                    depth: 0,\n                };\n\n                // add package to graph\n                tempGraph.addVertex(value.id, value, Node);\n            }\n            // metadata was found\n            else if (query.isSuccess) {\n                const metadata = query.data.data.metadata;\n                const value = {\n                    id: metadata.package_name.toLowerCase(),\n                    label:\n                        metadata.package_name + \" \" + metadata.package_version,\n                    name: metadata.package_name,\n                    version: metadata.package_version,\n                    metadata: metadata.importlib_metadata\n                        .metadata as PackageMetadata,\n                };\n\n                // add package to graph\n                tempGraph.addVertex(value.id, value, Node);\n            }\n        });\n\n        // set edges\n        allMetadata.forEach(query => {\n            if (query.status === \"error\" || !query.data?.data) {\n                return;\n            }\n\n            const currentNode = tempGraph.nodes.get(\n                query.data.data.metadata.package_name.toLowerCase(),\n            );\n\n            if (currentNode) {\n                Object.keys(query.data.data.metadata.dependencies).forEach(\n                    dep => {\n                        const adjacentNode = tempGraph.nodes.get(dep);\n\n                        // if package exists in lockfile\n                        if (adjacentNode) {\n                            // add edge connecting parent and dependency\n                            tempGraph.addEdge(\n                                currentNode.value.id,\n                                adjacentNode.value.id,\n                            );\n                            // set parent\n                            adjacentNode.parents.add(currentNode.value.id);\n                            notRoot.push(adjacentNode.value.id);\n                        }\n                    },\n                );\n            }\n        });\n\n        // add app node to graph\n        const app = tempGraph.addVertex(\n            \"*App\",\n            {\n                id: \"*App\",\n                label: \"App\",\n                depth: -1,\n            },\n            Node,\n        );\n\n        notRoot.push(\"*App\");\n\n        const visited = new Set();\n        const visitList: Node<PackageNodeValue>[] = [];\n\n        // get roots and connect to app\n        tempGraph.nodes.forEach((value, key) => {\n            if (\n                !notRoot.includes(key) ||\n                Object.keys(knownRoots ?? {}).includes(key)\n            ) {\n                value.value.depth = 0;\n                value.parents.add(\"*App\");\n                visitList.push(value);\n                tempGraph.addEdge(app.key, value.key);\n            }\n        });\n\n        const justifiedPackages = new Map();\n\n        if (justifications) {\n            justifications.forEach(\n                (\n                    justification: components[\"schemas\"][\"Justification\"][number] & {\n                        package_name?: string;\n                    },\n                ) => {\n                    const key = justification.package_name ?? \"*App\";\n                    if (justifiedPackages.has(key)) {\n                        justifiedPackages.set(key, [\n                            ...justifiedPackages.get(key),\n                            justification,\n                        ]);\n                    } else {\n                        justifiedPackages.set(key, [justification]);\n                    }\n                },\n            );\n        }\n\n        // set depth and parent packages using dfs\n        while (visitList.length !== 0) {\n            const node = visitList.pop();\n            if (node && !visited.has(node)) {\n                visited.add(node);\n\n                // check if there is a justification for change\n                if (justifiedPackages.has(node.key)) {\n                    node.value.justifications = justifiedPackages.get(node.key);\n                }\n\n                const adjs = node.getAdjacents();\n\n                for (let i = 0; i < adjs.length; i++) {\n                    // update depth\n                    adjs[i].value.depth = Math.min(\n                        (node.value?.depth ?? 0) + 1,\n                        adjs[i].value.depth ?? (node.value?.depth ?? 0) + 2,\n                    );\n                    visitList.push(adjs[i]);\n                }\n            }\n        }\n\n        const visGraphEdges = new Map();\n\n        // add edges from old graph\n        tempGraph.nodes.forEach(value => {\n            // set package edges\n            value.adjacents.forEach(adj => {\n                visGraphEdges.set(value.value.id + adj.value.id, {\n                    id: value.value.id + adj.value.id,\n                    to: value.value.id,\n                    from: adj.value.id,\n                });\n            });\n        });\n\n        // add edges to merged graph Object\n        tempGraph[\"visEdges\"] = Array.from(visGraphEdges.values());\n\n        return tempGraph;\n    }, [isLoading, knownRoots]);\n}\n","import React from \"react\";\n\ninterface IAdviseNotFound {\n    analysis_id: string;\n}\n\nexport const AdviseNotFound = ({ analysis_id }: IAdviseNotFound) => {\n    return <div>`&quot;{analysis_id}&quot;` not found</div>;\n};\n","import * as React from \"react\";\nimport { Stack } from \"@mui/material\";\n\ninterface IProps {\n    children: NonNullable<React.ReactNode>;\n}\n\n/**\n * Main layout adds margins and spacing to the whole app.\n */\nexport const MainLayout = ({ children }: IProps) => {\n    return (\n        <Stack\n            direction=\"column\"\n            justifyContent=\"flex-start\"\n            sx={{ marginX: \"16px\" }}\n        >\n            {children}\n        </Stack>\n    );\n};\n","import * as React from \"react\";\nimport { Box, Button, Chip, Stack, Typography } from \"@mui/material\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport Divider from \"@mui/material/Divider\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport AutoAwesomeMosaicRoundedIcon from \"@mui/icons-material/AutoAwesomeMosaicRounded\";\nimport ArticleRoundedIcon from \"@mui/icons-material/ArticleRounded\";\nimport CompareArrowsRoundedIcon from \"@mui/icons-material/CompareArrowsRounded\";\nimport TerminalRoundedIcon from \"@mui/icons-material/TerminalRounded\";\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\nimport CircleRoundedIcon from \"@mui/icons-material/CircleRounded\";\nimport { useMemo } from \"react\";\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\nimport WarningAmberOutlinedIcon from \"@mui/icons-material/WarningAmberOutlined\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\n\nconst drawerWidth = 360;\n\ninterface IProps {\n    children: React.ReactNode;\n    chipData: {\n        [key: string]: {\n            info: number;\n            warning: number;\n            error: number;\n        };\n    };\n}\n\ninterface ICustomListItem {\n    label: string;\n    to: string;\n    icon?: React.ReactNode;\n    selected: boolean;\n    chipData?: {\n        info: number;\n        warning: number;\n        error: number;\n    };\n    disabled?: boolean;\n}\n\nconst CustomListItem = ({\n    label,\n    to,\n    selected = false,\n    icon,\n    chipData,\n    disabled,\n}: ICustomListItem) => {\n    return (\n        <ListItem\n            sx={{\n                borderRadius: 100,\n                height: 48,\n                paddingLeft: 2,\n                paddingRight: 3,\n                marginRight: 1.5,\n                backgroundColor: selected\n                    ? \"secondaryContainer.main\"\n                    : undefined,\n            }}\n            button\n            disabled={disabled}\n            component={RouterLink}\n            to={to}\n            secondaryAction={\n                chipData ? (\n                    <Stack direction=\"row\" spacing={1}>\n                        {chipData.info ? (\n                            <Chip\n                                variant=\"outlined\"\n                                size=\"small\"\n                                icon={<InfoOutlinedIcon />}\n                                label={chipData.info}\n                                color=\"info\"\n                            />\n                        ) : undefined}\n                        {chipData.warning ? (\n                            <Chip\n                                variant=\"outlined\"\n                                size=\"small\"\n                                icon={<WarningAmberOutlinedIcon />}\n                                label={chipData.warning}\n                                color=\"warning\"\n                            />\n                        ) : undefined}\n                        {chipData.error ? (\n                            <Chip\n                                variant=\"outlined\"\n                                size=\"small\"\n                                icon={<ErrorOutlineOutlinedIcon />}\n                                label={chipData.error}\n                                color=\"error\"\n                            />\n                        ) : undefined}\n                    </Stack>\n                ) : undefined\n            }\n        >\n            {icon ? (\n                <ListItemIcon sx={{ minWidth: 3, marginRight: 1.5 }}>\n                    {icon}\n                </ListItemIcon>\n            ) : undefined}\n            <ListItemText\n                disableTypography\n                sx={{ marginLeft: icon ? undefined : 4.5 }}\n            >\n                <Typography\n                    sx={{\n                        color: selected\n                            ? \"secondaryContainer.contrast_text\"\n                            : \"surface.contrastText\",\n                    }}\n                    fontWeight=\"600\"\n                    variant=\"body2\"\n                >\n                    {label}\n                </Typography>\n            </ListItemText>\n        </ListItem>\n    );\n};\n\nexport const AdviserLayout = ({ children, chipData }: IProps) => {\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const currentTab = useMemo(() => {\n        return location.pathname.split(\"/\").at(-1);\n    }, [location.pathname]);\n\n    return (\n        <Box sx={{ display: \"flex\" }}>\n            <Drawer\n                sx={{\n                    width: drawerWidth,\n                    flexShrink: 0,\n                    \"& .MuiDrawer-paper\": {\n                        width: drawerWidth,\n                        boxSizing: \"border-box\",\n                    },\n                }}\n                variant=\"permanent\"\n                anchor=\"left\"\n            >\n                <Typography\n                    component={Button}\n                    onClick={() => navigate(\"/\")}\n                    variant=\"h5\"\n                    sx={{\n                        color: \"primary.main\",\n                        marginLeft: 3,\n                        marginBottom: 1,\n                        marginTop: 3,\n                        width: \"fit-content\",\n                    }}\n                >\n                    SEARCH UI\n                </Typography>\n                <List sx={{ paddingLeft: 1, paddingRight: 1.5 }}>\n                    <CustomListItem\n                        selected={currentTab === \"summary\"}\n                        label=\"Summary\"\n                        to=\"summary\"\n                        icon={<AutoAwesomeMosaicRoundedIcon />}\n                    />\n                    <CustomListItem\n                        label=\"Justifications\"\n                        to=\"justifications\"\n                        selected={currentTab === \"justifications\"}\n                        icon={<ArticleRoundedIcon />}\n                    />\n                    <CustomListItem\n                        label=\"Compare\"\n                        to=\"compare\"\n                        selected={currentTab === \"compare\"}\n                        icon={<CompareArrowsRoundedIcon />}\n                    />\n                    <CustomListItem\n                        label=\"Logs\"\n                        to=\"logs\"\n                        selected={currentTab === \"logs\"}\n                        icon={<TerminalRoundedIcon />}\n                    />\n                </List>\n                <Divider />\n                <List sx={{ paddingLeft: 1, paddingRight: 1.5 }}>\n                    <CustomListItem\n                        disabled\n                        label=\"Environment\"\n                        to=\"environment\"\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"environment\"}\n                    />\n                    <CustomListItem\n                        disabled\n                        label=\"Licenses\"\n                        to=\"licenses\"\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"licenses\"}\n                    />\n                    <CustomListItem\n                        disabled\n                        label=\"Dependency Tree\"\n                        to=\"dependency-tree\"\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"dependency-tree\"}\n                    />\n                    <CustomListItem\n                        label=\"Stack Info\"\n                        to=\"stack-info\"\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"stack-info\"}\n                        chipData={chipData[\"stack-info\"]}\n                    />\n                </List>\n            </Drawer>\n            <Box sx={{ width: \"100%\", overflowX: \"hidden\" }}>{children}</Box>\n        </Box>\n    );\n};\n","import * as React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@mui/material\";\n\ninterface IProps {\n    children: React.ReactNode;\n    goHome?: boolean;\n}\n\n/**\n * Layout is used in most of the app and allows for backwards navigation.\n */\nexport const NavigationLayout = ({ children, goHome = false }: IProps) => {\n    const navigate = useNavigate();\n\n    return (\n        <>\n            <Button\n                onClick={() => {\n                    if (goHome) {\n                        navigate(\"/\");\n                    } else {\n                        navigate(-1);\n                    }\n                }}\n            >\n                {goHome ? \"go home\" : \"go back\"}\n            </Button>\n            <div>{children}</div>\n        </>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { Chip } from \"@mui/material\";\nimport { ScrollToTop } from \"components/Elements/ScrollToTop\";\n\ninterface IAdviseLogs {\n    logs?: string | null;\n}\n\nexport function AdviseLogs({ logs }: IAdviseLogs) {\n    const rows = useMemo(() => {\n        return logs\n            ?.split(\"\\n\")\n            .slice(0, 20)\n            .map(line => {\n                let log;\n                try {\n                    log = JSON.parse(line);\n                } catch (e) {\n                    return {};\n                }\n\n                if (log) {\n                    return {\n                        name: log.name,\n                        levelname: log.levelname,\n                        module: log.module,\n                        lineno: log.lineno,\n                        funcname: log.funcname,\n                        created: log.created,\n                        asctime: log.asctime,\n                        msecs: log.msecs,\n                        relative_created: log.relative_created,\n                        process: log.process,\n                        message: log.message,\n                    };\n                } else {\n                    return {};\n                }\n            });\n    }, [logs]);\n    return (\n        <ScrollToTop>\n            <TableContainer\n                component={Paper}\n                variant=\"outlined\"\n                sx={{ marginY: 1 }}\n            >\n                <Table size=\"small\" aria-label=\"a dense table\" stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Level</TableCell>\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"left\">Function</TableCell>\n                            <TableCell align=\"right\">Line Number</TableCell>\n                            <TableCell align=\"right\">Process</TableCell>\n                            <TableCell align=\"left\">Message</TableCell>\n                            <TableCell align=\"right\">Time</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows?.map(row => (\n                            <TableRow\n                                key={row.created}\n                                sx={{\n                                    \"&:last-child td, &:last-child th\": {\n                                        border: 0,\n                                    },\n                                }}\n                            >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.levelname ? (\n                                        <Chip\n                                            color={\n                                                row?.levelname?.toLowerCase() ??\n                                                \"default\"\n                                            }\n                                            label={row.levelname}\n                                        />\n                                    ) : undefined}\n                                </TableCell>\n                                <TableCell align=\"left\">{row.name}</TableCell>\n                                <TableCell align=\"left\">\n                                    {row.funcname}\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    {row.lineno}\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    {row.process}\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {row.message}\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    {row.asctime}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </ScrollToTop>\n    );\n}\n","import React, { useState } from \"react\";\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Collapse,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\nimport { KeyboardArrowDown } from \"@mui/icons-material\";\n\nexport const StackInfoInstallErrorMetric = ({\n    url,\n    metric,\n}: {\n    url: string;\n    metric: (\n        | { package: string; index: string; versions: string[] }\n        | undefined\n    )[];\n}) => {\n    const [selected, setSelected] = useState<number | undefined>();\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    return (\n        <>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Installation Errors\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={\n                            <Chip\n                                icon={<ErrorOutlineOutlinedIcon />}\n                                label={metric.reduce(\n                                    (prev, cur) =>\n                                        prev + (cur?.versions?.length ?? 0),\n                                    0,\n                                )}\n                                color=\"error\"\n                            />\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Installation Errors\"\n                        subheader=\"The given package & version combinations were removed from the resolution process as they produced errors during installation in the given environment\"\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                    />\n                    <CardContent>\n                        <List dense>\n                            {metric.map((pkg, i) => {\n                                return (\n                                    <>\n                                        <ListItem\n                                            selected={selected === i}\n                                            secondaryAction={\n                                                <KeyboardArrowDown\n                                                    sx={{\n                                                        mr: -1,\n                                                        transform:\n                                                            selected === i\n                                                                ? \"rotate(0deg)\"\n                                                                : \"rotate(-90deg)\",\n                                                        transition: \"0.2s\",\n                                                    }}\n                                                />\n                                            }\n                                            key={\n                                                (pkg?.package ?? \"\") +\n                                                (pkg?.index ?? \"\")\n                                            }\n                                            button\n                                            sx={{ borderRadius: \"16px\" }}\n                                            onClick={() =>\n                                                setSelected(\n                                                    selected === i\n                                                        ? undefined\n                                                        : i,\n                                                )\n                                            }\n                                        >\n                                            <ListItemIcon>\n                                                <Chip\n                                                    label={pkg?.versions.length}\n                                                    color=\"error\"\n                                                />\n                                            </ListItemIcon>\n                                            <ListItemText\n                                                primary={pkg?.package}\n                                                secondary={pkg?.index}\n                                            />\n                                        </ListItem>\n                                        <Collapse in={selected === i}>\n                                            <ListItem>\n                                                <ListItemText\n                                                    inset\n                                                    secondary={metric[\n                                                        i\n                                                    ]?.versions.join(\", \")}\n                                                />\n                                            </ListItem>\n                                        </Collapse>\n                                    </>\n                                );\n                            })}\n                        </List>\n                    </CardContent>\n                </Card>\n            )}\n        </>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Collapse,\n    Divider,\n    Grid,\n    IconButton,\n    Stack,\n    Typography,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { KeyboardArrowDown } from \"@mui/icons-material\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\n\ninterface IStackInfoRulesMetric {\n    url: string;\n    metric: {\n        [key: string]: { package: string; constraint: string; index: string }[];\n    };\n}\n\nexport const StackInfoRulesMetric = ({\n    url,\n    metric,\n}: IStackInfoRulesMetric) => {\n    const [selected, setSelected] = useState<number | undefined>(0);\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    return (\n        <>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Solver Rules\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={\n                            <Chip\n                                icon={<ErrorOutlineOutlinedIcon />}\n                                label={Object.keys(metric).length}\n                                color=\"error\"\n                            />\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Solver Rules\"\n                        subheader=\"One or multiple packages were removed based on Python solver rules configured\"\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                    />\n                    <CardContent>\n                        <Stack spacing={2}>\n                            {Object.entries(metric).map(([rule, value], i) => {\n                                return (\n                                    <Box key={rule}>\n                                        <Button\n                                            sx={{ marginBottom: 1 }}\n                                            onClick={() =>\n                                                setSelected(\n                                                    selected === i\n                                                        ? undefined\n                                                        : i,\n                                                )\n                                            }\n                                        >\n                                            <Stack direction=\"row\" spacing={2}>\n                                                <Typography\n                                                    variant=\"body1\"\n                                                    fontWeight=\"bolder\"\n                                                >\n                                                    {rule}\n                                                </Typography>\n                                                <KeyboardArrowDown\n                                                    sx={{\n                                                        mr: -1,\n                                                        transform:\n                                                            selected === i\n                                                                ? \"rotate(0deg)\"\n                                                                : \"rotate(-90deg)\",\n                                                        transition: \"0.2s\",\n                                                    }}\n                                                />\n                                            </Stack>\n                                        </Button>\n                                        <Collapse in={selected === i}>\n                                            <Grid\n                                                container\n                                                sx={{\n                                                    marginLeft: 1,\n                                                    paddingRight: 1,\n                                                }}\n                                            >\n                                                <Grid item xs={5}>\n                                                    <Typography variant=\"body2\">\n                                                        Package\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    item\n                                                    xs={2}\n                                                    textAlign=\"center\"\n                                                >\n                                                    <Typography variant=\"body2\">\n                                                        Constraint\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    item\n                                                    xs={5}\n                                                    textAlign=\"right\"\n                                                >\n                                                    <Typography variant=\"body2\">\n                                                        Index\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    item\n                                                    xs={12}\n                                                    sx={{ marginBottom: 1 }}\n                                                >\n                                                    <Divider flexItem />\n                                                </Grid>\n                                                {value.map(pkg => {\n                                                    return (\n                                                        <React.Fragment\n                                                            key={\n                                                                pkg.package +\n                                                                pkg.index\n                                                            }\n                                                        >\n                                                            <Grid item xs={5}>\n                                                                {pkg.package}\n                                                            </Grid>\n                                                            <Grid\n                                                                item\n                                                                xs={2}\n                                                                textAlign=\"center\"\n                                                            >\n                                                                {pkg.constraint}\n                                                            </Grid>\n                                                            <Grid\n                                                                item\n                                                                xs={5}\n                                                                textAlign=\"right\"\n                                                            >\n                                                                {pkg.index}\n                                                            </Grid>\n                                                        </React.Fragment>\n                                                    );\n                                                })}\n                                            </Grid>\n                                        </Collapse>\n                                    </Box>\n                                );\n                            })}\n                        </Stack>\n                    </CardContent>\n                </Card>\n            )}\n        </>\n    );\n};\n","import React from \"react\";\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Grid,\n    IconButton,\n    Typography,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport DoneRoundedIcon from \"@mui/icons-material/DoneRounded\";\nimport CloseRoundedIcon from \"@mui/icons-material/CloseRounded\";\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\n\nexport const StackInfoEnvMetric = ({\n    url,\n    metric,\n}: {\n    url: string;\n    metric: { provided: boolean; message: string }[];\n}) => {\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    return (\n        <>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Environment Parameters\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={\n                            <Chip\n                                icon={<InfoOutlinedIcon />}\n                                label={\n                                    metric.filter(env => env.provided).length\n                                }\n                                color=\"info\"\n                            />\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Environment Parameters\"\n                        subheader={`The advisor input was provided with ${\n                            metric.filter(env => env.provided).length\n                        } environment parameters`}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                    />\n                    <CardContent>\n                        <Grid container>\n                            {metric.map(env => (\n                                <React.Fragment key={env.message}>\n                                    <Grid item xs={1}>\n                                        {env.provided ? (\n                                            <CloseRoundedIcon color=\"error\" />\n                                        ) : (\n                                            <DoneRoundedIcon color=\"success\" />\n                                        )}\n                                    </Grid>\n                                    <Grid item xs={11}>\n                                        <Typography variant=\"body2\">\n                                            {env.message}\n                                        </Typography>\n                                    </Grid>\n                                </React.Fragment>\n                            ))}\n                        </Grid>\n                    </CardContent>\n                </Card>\n            )}\n        </>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport {\n    Box,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Divider,\n    Grid,\n    IconButton,\n    Stack,\n    Typography,\n} from \"@mui/material\";\nimport WarningAmberOutlinedIcon from \"@mui/icons-material/WarningAmberOutlined\";\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\n\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { components } from \"lib/schema\";\n\nexport const StackInfoMetric = ({\n    metrics,\n}: {\n    metrics: Map<string, components[\"schemas\"][\"StackInfo\"]>;\n}) => {\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    const typeTotals = useMemo(() => {\n        return {\n            info: Array.from(metrics.values()).reduce(\n                (p, c) => p + (c[0].type === \"INFO\" ? 1 : 0),\n                0,\n            ),\n            warning: Array.from(metrics.values()).reduce(\n                (p, c) => p + (c[0].type === \"WARNING\" ? 1 : 0),\n                0,\n            ),\n            error: Array.from(metrics.values()).reduce(\n                (p, c) => p + (c[0].type === \"ERROR\" ? 1 : 0),\n                0,\n            ),\n        };\n    }, [metrics]);\n\n    const renderRow = (\n        key: string,\n        value: components[\"schemas\"][\"StackInfo\"],\n    ) => {\n        return (\n            <React.Fragment key={key}>\n                <Grid item xs={12} sx={{ marginY: 1 }}>\n                    <Divider flexItem />\n                </Grid>\n                <Grid item xs={1}>\n                    <Box display=\"flex\" alignContent=\"center\">\n                        {value[0].type === \"ERROR\" ? (\n                            <ErrorOutlineOutlinedIcon color=\"error\" />\n                        ) : value[0].type === \"WARNING\" ? (\n                            <WarningAmberOutlinedIcon color=\"warning\" />\n                        ) : (\n                            <InfoOutlinedIcon color=\"info\" />\n                        )}\n                    </Box>\n                </Grid>\n                <Grid item xs={10}>\n                    <Stack spacing={1}>\n                        {value.map((v: { message: string }) => (\n                            <Typography key={v.message} variant=\"body2\">\n                                {v.message}\n                            </Typography>\n                        ))}\n                    </Stack>\n                </Grid>\n                <Grid item xs={1}>\n                    <IconButton\n                        href={value[0].link}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <OpenInNewRoundedIcon />\n                    </IconButton>\n                </Grid>\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Other Stack Info\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        avatar={\n                            <Stack direction=\"row\" spacing={1}>\n                                {typeTotals.info ? (\n                                    <Chip\n                                        icon={<InfoOutlinedIcon />}\n                                        label={typeTotals.info}\n                                        color=\"info\"\n                                    />\n                                ) : undefined}\n                                {typeTotals.warning ? (\n                                    <Chip\n                                        icon={<WarningAmberOutlinedIcon />}\n                                        label={typeTotals.warning}\n                                        color=\"warning\"\n                                    />\n                                ) : undefined}\n                                {typeTotals.error ? (\n                                    <Chip\n                                        icon={<ErrorOutlineOutlinedIcon />}\n                                        label={typeTotals.error}\n                                        color=\"error\"\n                                    />\n                                ) : undefined}\n                            </Stack>\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader title=\"Other Stack Info\" />\n                    <CardContent>\n                        <Grid container alignItems=\"center\">\n                            <Grid item xs={12}>\n                                <Typography variant=\"body1\" fontWeight=\"bolder\">\n                                    Recommended Actions\n                                </Typography>\n                            </Grid>\n                            {Array.from(metrics.entries())\n                                .filter(([, value]) =>\n                                    value.some(\n                                        (v: { message: string }) =>\n                                            v.message.includes(\"use\") ||\n                                            v.message.includes(\"Use\"),\n                                    ),\n                                )\n                                .map(([key, value]) => renderRow(key, value))}\n                            <Grid item xs={12} sx={{ marginTop: 2 }}>\n                                <Typography variant=\"body1\" fontWeight=\"bolder\">\n                                    Other Information\n                                </Typography>\n                            </Grid>\n                            {Array.from(metrics.entries())\n                                .filter(([, value]) =>\n                                    value.some(\n                                        (v: { message: string }) =>\n                                            !v.message.includes(\"use\") ||\n                                            v.message.includes(\"Use\"),\n                                    ),\n                                )\n                                .map(([key, value]) => renderRow(key, value))}\n                        </Grid>\n                    </CardContent>\n                </Card>\n            )}\n        </>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport { components } from \"lib/schema\";\nimport {\n    StackInfoEnvMetric,\n    StackInfoInstallErrorMetric,\n    StackInfoMetric,\n    StackInfoRulesMetric,\n} from \"../components/StackInfoMetrics\";\nimport { Masonry } from \"@mui/lab\";\nimport { Box, Typography } from \"@mui/material\";\n\ninterface IAdviseStackInfo {\n    stack_info?: components[\"schemas\"][\"StackInfo\"];\n}\nconst stackInfoHandler = (\n    stack_info: components[\"schemas\"][\"StackInfo\"],\n    link: string,\n) => {\n    switch (link) {\n        case \"https://thoth-station.ninja/j/install_error\": {\n            const metric = stack_info\n                .filter(info => info.link === link)\n                .map(pkg => {\n                    const name_index_pattern = /(?<=').*?(?=')/g;\n                    const versions_pattern = /(?<=environment: ).*/;\n                    const name_index = pkg.message.match(name_index_pattern);\n                    const versions = pkg.message.match(versions_pattern);\n                    if (name_index && versions) {\n                        return {\n                            package: name_index?.[0],\n                            index: name_index?.[2],\n                            versions: versions?.[0].split(\", \"),\n                        };\n                    }\n                });\n            return <StackInfoInstallErrorMetric url={link} metric={metric} />;\n        }\n        case \"https://thoth-station.ninja/j/env\": {\n            const metric = stack_info\n                .filter(info => info.link === link)\n                .map(info => {\n                    return {\n                        provided: info.message.startsWith(\"No\"),\n                        message: info.message,\n                    };\n                });\n            return <StackInfoEnvMetric metric={metric} url={link} />;\n        }\n\n        case \"https://thoth-station.ninja/j/rules\": {\n            const rules = new Map<\n                string,\n                { package: string; constraint: string; index: string }[]\n            >();\n            stack_info\n                .filter(info => info.link === link)\n                .forEach(pkg => {\n                    const name_constraint_index_pattern = /(?<=').*?(?=')/g;\n                    const rule_pattern = /(?<=rule: ).*/;\n                    const name_constraint_index = pkg.message.match(\n                        name_constraint_index_pattern,\n                    );\n                    const rule = pkg.message.match(rule_pattern);\n                    if (name_constraint_index && rule) {\n                        rules.set(\n                            rule[0],\n                            (rules.get(rule[0]) ?? []).concat({\n                                package: name_constraint_index?.[0],\n                                constraint: name_constraint_index?.[2],\n                                index: name_constraint_index?.[4],\n                            }),\n                        );\n                    }\n                });\n            return (\n                <StackInfoRulesMetric\n                    metric={Object.fromEntries(rules)}\n                    url={link}\n                />\n            );\n        }\n    }\n};\n\nexport const AdviseStackInfo = ({ stack_info = [] }: IAdviseStackInfo) => {\n    const metrics = useMemo(() => {\n        if (!stack_info) {\n            return <></>;\n        }\n\n        const types = new Set<string>();\n        stack_info.forEach(i => types.add(i.link));\n\n        const cards = [];\n        Array.from(types.values()).forEach(type => {\n            const element = stackInfoHandler(stack_info, type);\n            if (element) {\n                cards.push(element);\n                types.delete(type);\n            }\n        });\n\n        // all others\n        const others = new Map<string, components[\"schemas\"][\"StackInfo\"]>();\n        stack_info\n            .filter(info => types.has(info.link))\n            .forEach(info => {\n                others.set(\n                    info.link,\n                    (others.get(info.link) ?? []).concat(info),\n                );\n            });\n        cards.push(<StackInfoMetric metrics={others} />);\n\n        return cards;\n    }, [stack_info]);\n\n    if (!metrics) {\n        return (\n            <Box\n                height=\"100vh\"\n                flexDirection=\"column\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h5\" align=\"center\">\n                    Stack info not available\n                </Typography>\n                <Typography variant=\"body2\" align=\"center\">\n                    The adviser has not finished resolving packages\n                </Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <Masonry\n            columns={{ xs: 1, sm: 1, md: 1, lg: 2, xl: 3 }}\n            spacing={2}\n            sx={{ margin: \"0 auto\" }}\n        >\n            {metrics}\n        </Masonry>\n    );\n};\n","import React, { useEffect, useMemo } from \"react\";\nimport { Route, Routes, useParams, Navigate } from \"react-router-dom\";\n\n// sub-routes\nimport { AdviseSummary } from \"./AdviseSummary\";\nimport { AdviseDetails } from \"./AdviseDetails\";\nimport { AdviseCompare } from \"./AdviseCompare\";\n\n// feature specific imports\nimport { useAdviseDocument, useAdviseLogs } from \"../api\";\nimport { formatLockfile } from \"utils/formatLockfile\";\nimport { useMetrics } from \"../hooks\";\nimport { Requirements, useGraph } from \"hooks\";\n\n// misc\nimport { AdviseNotFound } from \"./AdviseNotFound\";\nimport { AxiosResponse } from \"axios\";\nimport { components } from \"lib/schema\";\nimport { LOCAL_STORAGE_KEY } from \"config\";\nimport { AdviserLayout, MainLayout, NavigationLayout } from \"components/Layout\";\nimport Loading from \"../../../components/Elements/Loading/Loading\";\nimport { AdviseLogs } from \"./AdviseLogs\";\nimport { AdviseStackInfo } from \"./AdviseStackInfo\";\n\ntype statusResponse = components[\"schemas\"][\"AnalysisStatusResponse\"];\n\nexport const AdviseRoutes = () => {\n    // get document id\n    const { analysis_id } = useParams();\n\n    // api get thoth advise document\n    const adviseDocument = useAdviseDocument(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: (data: AxiosResponse<statusResponse>) => {\n            if (data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    useEffect(() => {\n        if (adviseDocument.isSuccess && analysis_id) {\n            const ids = localStorage.getItem(LOCAL_STORAGE_KEY) ?? \"\";\n\n            const split = ids.split(\",\");\n            if (!split.includes(analysis_id)) {\n                split.push(analysis_id);\n                localStorage.setItem(LOCAL_STORAGE_KEY, split.join(\",\"));\n            }\n        }\n    }, [adviseDocument.status]);\n\n    const logs = useAdviseLogs(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: () => {\n            if (adviseDocument.data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    // format advise graph data\n    const graphData = useMemo(() => {\n        if (\n            adviseDocument.isSuccess &&\n            adviseDocument.data.data?.result?.report?.products?.[0]?.project\n        ) {\n            const lockfile = adviseDocument.data.data?.result?.report\n                ?.products?.[0]?.project as components[\"schemas\"][\"ProjectDef\"];\n            return formatLockfile(lockfile);\n        }\n    }, [adviseDocument]);\n\n    const graph = useGraph(\n        graphData,\n        (\n            (\n                adviseDocument?.data?.data?.result?.report?.products?.[0]\n                    ?.project as components[\"schemas\"][\"ProjectDef\"]\n            )?.requirements as Requirements\n        )?.packages,\n        adviseDocument?.data?.data?.result?.report?.products?.[0]\n            ?.justification,\n    );\n\n    // compute metric data\n    const metrics = useMetrics(graph, adviseDocument.data?.data);\n\n    const loading = useMemo(() => {\n        if (adviseDocument.isLoading) {\n            return <Loading type=\"circular\" label=\"Fetching Advise Document\" />;\n        }\n\n        if (!adviseDocument.data) {\n            return (\n                <NavigationLayout>\n                    <AdviseNotFound analysis_id={analysis_id ?? \"no id\"} />\n                </NavigationLayout>\n            );\n        }\n    }, [adviseDocument.data, adviseDocument.status]);\n\n    const lastLog = useMemo(() => {\n        try {\n            return JSON.parse(\n                logs.data?.data?.log?.split(\"\\n\")?.at(-2) ?? \"{}\",\n            );\n        } catch (e) {\n            return {};\n        }\n    }, [logs.data]);\n\n    const stackInfoTotals = useMemo(() => {\n        if (!adviseDocument.data?.data?.result?.report?.stack_info) {\n            return {\n                info: 0,\n                warning: 0,\n                error: 0,\n            };\n        }\n        return {\n            info:\n                adviseDocument.data?.data.result.report?.stack_info.filter(\n                    t => t.type === \"INFO\",\n                ).length ?? 0,\n            warning:\n                adviseDocument.data?.data.result.report?.stack_info.filter(\n                    t => t.type === \"WARNING\",\n                ).length ?? 0,\n            error:\n                adviseDocument.data?.data.result.report?.stack_info.filter(\n                    t => t.type === \"ERROR\",\n                ).length ?? 0,\n        };\n    }, [adviseDocument.data?.data]);\n\n    return (\n        <AdviserLayout chipData={{ \"stack-info\": stackInfoTotals }}>\n            <MainLayout>\n                {loading ?? (\n                    <Routes>\n                        <Route\n                            path=\"summary\"\n                            element={\n                                <AdviseSummary\n                                    adviseDocument={adviseDocument?.data?.data}\n                                    metrics={metrics}\n                                    lastLog={lastLog}\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"justifications\"\n                            element={<AdviseDetails graph={graph} />}\n                        />\n                        <Route\n                            path=\"logs\"\n                            element={<AdviseLogs logs={logs.data?.data?.log} />}\n                        />\n                        <Route\n                            path=\"compare\"\n                            element={\n                                <AdviseCompare\n                                    adviseDocument={adviseDocument?.data?.data}\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"stack-info\"\n                            element={\n                                <AdviseStackInfo\n                                    stack_info={\n                                        adviseDocument.data?.data?.result\n                                            ?.report?.stack_info\n                                    }\n                                />\n                            }\n                        />\n                        <Route path=\"*\" element={<Navigate to=\"summary\" />} />\n                    </Routes>\n                )}\n            </MainLayout>\n        </AdviserLayout>\n    );\n};\n","import { components, operations } from \"lib/schema\";\n\nexport type Lockfile = {\n    default: {\n        [key: string]: {\n            version: string;\n            markers: string;\n            hashes: string[];\n        };\n    };\n    _meta: {\n        sources: {\n            name: string;\n            url: string;\n            verify_ssl: boolean;\n        }[];\n    };\n};\n\nexport function formatLockfile(\n    lockfile: components[\"schemas\"][\"ProjectDef\"],\n): operations[\"get_python_package_version_metadata\"][\"parameters\"][\"query\"][] {\n    return Object.entries(\n        (lockfile.requirements_locked as Lockfile).default,\n    ).map(([key, value]) => {\n        return {\n            name: key,\n            version: value.version.replace(\"==\", \"\"),\n            index: \"https://pypi.org/simple\", //TODO no hard code\n            os_name:\n                lockfile?.runtime_environment?.operating_system?.name ?? \"\",\n            os_version:\n                lockfile?.runtime_environment?.operating_system?.version ?? \"\",\n            python_version: lockfile?.runtime_environment?.python_version ?? \"\",\n        };\n    });\n}\n","import React, { useContext } from \"react\";\nimport Select from \"@mui/material/Select\";\nimport { Box, MenuItem, Typography } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SpecContext } from \"features/package/routes/PackageOverview\";\nimport { BoxTypeMap } from \"@mui/material/Box/Box\";\n\ninterface IParamDropdown {\n    options: { value: string }[];\n    type: string;\n    label?: string;\n    disabled?: boolean;\n    props?: BoxTypeMap;\n}\n\nexport const ParamDropdown = ({\n    options,\n    type,\n    label,\n    disabled,\n    ...props\n}: IParamDropdown) => {\n    const navigate = useNavigate();\n    const { specs, defaultSpecs } = useContext(SpecContext);\n\n    const handleChange = (event: { target: { value: string } }) => {\n        switch (type) {\n            case \"package_version\":\n                navigate(\n                    `/package/${specs.package_name}/${event.target.value}`,\n                );\n                break;\n            case \"index_url\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(event.target.value)}`,\n                );\n                break;\n            case \"os_name\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${event.target.value}`,\n                );\n\n                break;\n            case \"os_version\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${specs.os_name ?? defaultSpecs.os_name}/${\n                        event.target.value\n                    }`,\n                );\n                break;\n            case \"python_version\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${specs.os_name ?? defaultSpecs.os_name}/${\n                        specs.os_version ?? defaultSpecs.os_version\n                    }/${event.target.value}`,\n                );\n                break;\n        }\n    };\n\n    return (\n        <Box {...props}>\n            <Typography variant=\"body2\">{label}</Typography>\n            <Select\n                displayEmpty\n                fullWidth\n                value={specs[type as keyof typeof specs] ?? \"\"}\n                onChange={handleChange}\n                size=\"small\"\n                variant=\"outlined\"\n                disabled={disabled}\n                renderValue={value => {\n                    if (!value) {\n                        return (\n                            <em style={{ color: \"grey\" }}>\n                                {defaultSpecs?.[type as keyof typeof specs] ??\n                                    label}\n                            </em>\n                        );\n                    } else {\n                        return value;\n                    }\n                }}\n            >\n                <MenuItem disabled value=\"\">\n                    <em>{label}</em>\n                </MenuItem>\n                {options.map(option => {\n                    return (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.value}\n                        </MenuItem>\n                    );\n                })}\n            </Select>\n        </Box>\n    );\n};\n","import React, { useContext, useMemo, useState } from \"react\";\n\n// material-ui\nimport { Box, Grid, IconButton, Skeleton, Typography } from \"@mui/material\";\nimport ArrowLeftIcon from \"@mui/icons-material/ArrowLeft\";\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\n\n// utils\nimport { ParamDropdown } from \"../ParamDropdown\";\nimport { SpecContext } from \"../../routes/PackageOverview\";\nimport { components } from \"lib/schema\";\n\nexport interface IPackageHeader {\n    /** Package metadata object.*/\n    metadata?: {\n        /** Name of package. */\n        Name: string;\n        /** Description of package. */\n        Summary?: string;\n        /** License of package */\n        License?: string;\n    };\n    /** list of all versions of a package **/\n    allVersions?: components[\"schemas\"][\"PythonPackageVersionsResponse\"][\"versions\"];\n    /** list of all environments of a package, version, index **/\n    allEnvironments?: components[\"schemas\"][\"PythonPackageVersionEnvironmentsResponse\"][\"environments\"];\n}\n\n/**\n * A header for package metadata.\n */\nexport const PackageHeader = ({\n    metadata,\n    allVersions = [],\n    allEnvironments = [],\n}: IPackageHeader) => {\n    const { defaultSpecs, specs } = useContext(SpecContext);\n    const [showEnvParams, setShowEnvParams] = useState(false);\n\n    const versionOptions = useMemo(() => {\n        const dups = new Set();\n        return allVersions\n            .filter(version => {\n                if (!dups.has(version.package_version)) {\n                    dups.add(version.package_version);\n                    return true;\n                }\n                return false;\n            })\n            .map(version => {\n                return {\n                    value: version.package_version,\n                };\n            })\n            .sort((a, b) => (a.value.split(\".\") > b.value.split(\".\") ? 1 : -1));\n    }, [allVersions]);\n\n    const indexUrlOptions = useMemo(() => {\n        const dups = new Set();\n        return allVersions\n            .filter(version => {\n                if (specs.package_version) {\n                    return specs.package_version === version.package_version;\n                } else {\n                    return (\n                        defaultSpecs.package_version === version.package_version\n                    );\n                }\n            })\n            .filter(version => {\n                if (!dups.has(version.index_url)) {\n                    dups.add(version.index_url);\n                    return true;\n                }\n                return false;\n            })\n            .map(version => {\n                return {\n                    value: version.index_url,\n                };\n            });\n    }, [allVersions]);\n\n    const [osNameOptions, osVersionOptions, pythonVersionOptions] =\n        useMemo(() => {\n            const name = allEnvironments.map(env => {\n                return {\n                    value: env.os_name,\n                };\n            });\n            const version = allEnvironments\n                .filter(env => !specs.os_name || specs.os_name === env.os_name)\n                .map(env => {\n                    return {\n                        value: env.os_version,\n                    };\n                });\n            const pyVersion = allEnvironments\n                .filter(\n                    env =>\n                        (!specs.os_name || specs.os_name === env.os_name) &&\n                        (!specs.os_version ||\n                            specs.os_version === env.os_version),\n                )\n                .map(env => {\n                    return {\n                        value: env.python_version,\n                    };\n                });\n            return [name, version, pyVersion];\n        }, [allEnvironments, specs]);\n\n    if (!metadata) {\n        return (\n            <Box data-testid=\"package-header-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div>\n            <Grid container alignItems=\"flex-end\" spacing={1}>\n                <Grid item>\n                    <Typography variant=\"h4\" mr={2}>\n                        <b>{metadata?.Name}</b>\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <ParamDropdown\n                        options={versionOptions ?? []}\n                        type=\"package_version\"\n                        label={\"Version\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <ParamDropdown\n                        options={indexUrlOptions ?? []}\n                        type=\"index_url\"\n                        label={\"Index URL\"}\n                        disabled={specs.package_version === undefined}\n                    />\n                </Grid>\n                {showEnvParams ? (\n                    <React.Fragment>\n                        <Grid item>\n                            <ParamDropdown\n                                options={osNameOptions ?? []}\n                                type=\"os_name\"\n                                label={\"OS Name\"}\n                                disabled={specs.index_url === undefined}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <ParamDropdown\n                                options={osVersionOptions ?? []}\n                                type=\"os_version\"\n                                label={\"OS Version\"}\n                                disabled={specs.os_name === undefined}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <ParamDropdown\n                                options={pythonVersionOptions ?? []}\n                                type=\"python_version\"\n                                label={\"Python Version\"}\n                                disabled={specs.os_version === undefined}\n                            />\n                        </Grid>\n                    </React.Fragment>\n                ) : null}\n                <Grid item xs={1}>\n                    <IconButton\n                        onClick={() => setShowEnvParams(!showEnvParams)}\n                        data-testid=\"package-header-expand-button\"\n                    >\n                        {showEnvParams ? (\n                            <ArrowLeftIcon fontSize=\"large\" />\n                        ) : (\n                            <ArrowRightIcon fontSize=\"large\" />\n                        )}\n                    </IconButton>\n                </Grid>\n            </Grid>\n\n            <Typography gutterBottom variant=\"body1\" mt={2}>\n                {metadata?.Summary ?? \"NaN\"}\n            </Typography>\n            <div>\n                <IconText\n                    text={metadata?.License ?? \"NaN\"}\n                    icon={<GavelIcon />}\n                />\n            </div>\n        </div>\n    );\n};\n","import { Button, Grid, Menu, MenuItem, Typography } from \"@mui/material\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport React, { useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface IVersionDropdown {\n    node: {\n        name: string;\n        versions: string[];\n        specifier: string;\n    };\n}\n\nexport const VersionDropdown = ({ node }: IVersionDropdown) => {\n    const [open, setOpen] = React.useState<string | null | undefined>(null);\n    const [anchorEl, setAnchorEl] = React.useState<Element | null>(null);\n    const navigate = useNavigate();\n\n    const versionOptions = useMemo(() => {\n        const options: { [key: string]: string[] } = {};\n        const distribution = [0, 0];\n        const noDup = new Set();\n        node.versions.forEach(version => {\n            const split = version.split(\".\");\n            const key = split[0] + \".\" + (split[1] ?? \"\");\n\n            if (options[key] === undefined) {\n                options[key] = [];\n                distribution[0] += 1;\n            }\n            if (!noDup.has(version)) {\n                options[key].push(version);\n                distribution[1] += 1;\n                noDup.add(version);\n            }\n        });\n\n        // check if there are too many buckets\n        if (distribution[0] / distribution[1] > 0.25) {\n            // merge buckets\n            const buckets = Math.ceil(distribution[0] * 0.25);\n            const fixedOptions: { [key: string]: string[] } = {};\n            let currentKey: string;\n            Object.keys(options).forEach((key, index, array) => {\n                if (index % buckets === 0) {\n                    currentKey = `${key} - ${\n                        array[index + buckets - 1] ?? array.at(-1)\n                    }`;\n                    fixedOptions[currentKey] = [];\n                }\n                fixedOptions[currentKey].push(...options[array[index]]);\n            });\n            return fixedOptions;\n        }\n\n        return options;\n    }, [node]);\n\n    return (\n        <div>\n            <Button\n                onClick={event => {\n                    setOpen(node.name);\n                    setAnchorEl(event.currentTarget);\n                }}\n                variant=\"outlined\"\n                endIcon={<KeyboardArrowDownIcon />}\n            >\n                {node.specifier ?? \"ANY\"}\n            </Button>\n            <Menu\n                open={open === node.name}\n                anchorEl={anchorEl}\n                onClose={() => {\n                    setOpen(undefined);\n                    setAnchorEl(null);\n                }}\n                PaperProps={{\n                    style: {\n                        maxHeight: \"40%\",\n                        maxWidth: \"50%\",\n                    },\n                }}\n            >\n                <MenuItem disabled={true}>\n                    Select a version to navigate to:\n                </MenuItem>\n                <Grid container alignContent=\"flex-start\">\n                    {Object.entries(versionOptions).map(([key, value]) => {\n                        return (\n                            <Grid item xs key={key}>\n                                <MenuItem sx={{ mt: 2 }} disabled divider>\n                                    {key}\n                                </MenuItem>\n                                {value.map(version => {\n                                    return (\n                                        <MenuItem\n                                            key={version}\n                                            onClick={() =>\n                                                navigate(\n                                                    `/package/${node.name}/${version}`,\n                                                )\n                                            }\n                                        >\n                                            <Typography variant={\"body2\"}>\n                                                {version}\n                                            </Typography>\n                                        </MenuItem>\n                                    );\n                                })}\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </Menu>\n        </div>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport InfoCard from \"components/Elements/InfoCard\";\nimport { Box, Divider, Grid, Skeleton, Typography } from \"@mui/material\";\nimport { VersionDropdown } from \"./VersionDropdown\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { SimplePackageNodeValue } from \"lib/interfaces/SimplePackageNodeValue\";\n\ninterface IPackageDependencies {\n    graph?: Graph<Node<SimplePackageNodeValue>>;\n}\n\ntype PackageDependenciesMetric = {\n    name: string;\n    versions: string[];\n    specifier: string;\n    extra: string[];\n};\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const PackageDependencies = ({ graph }: IPackageDependencies) => {\n    const metric = useMemo(() => {\n        if (!graph?.nodes) {\n            return;\n        }\n\n        const root = graph.nodes.get(\"*App\");\n\n        if (root) {\n            const bfs = graph.graphSearch(root);\n            const visitedOrder = Array.from(bfs);\n\n            const metric: PackageDependenciesMetric[] = [];\n\n            visitedOrder.forEach(node => {\n                if (node.key !== \"*App\" && !node.value.metadata) {\n                    metric.push({\n                        name: node.value.label ?? node.key,\n                        versions: node.value.versions ?? [],\n                        specifier: node.value.specifier ?? \"*\",\n                        extra: node.value.extra ?? [],\n                    });\n                }\n            });\n\n            return metric;\n        }\n    }, [graph]);\n\n    if (!metric) {\n        return (\n            <Box data-testid=\"package-dependencies-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <InfoCard\n            cardMeta={{\n                title: \"Dependencies\",\n            }}\n            cardBody={\n                <div data-testid=\"package-dependencies-loaded\">\n                    <Grid container>\n                        <Grid item xs>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Package\n                            </Typography>\n                        </Grid>\n                        <Grid item xs>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Versions\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Extra\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                    <Divider />\n                    <Grid container rowSpacing={2} mt={1}>\n                        {metric.map(node => {\n                            return (\n                                <Grid container item xs={12} key={node.name}>\n                                    <Grid item xs>\n                                        <Typography\n                                            variant=\"body1\"\n                                            gutterBottom\n                                        >\n                                            {node.name}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs>\n                                        <VersionDropdown node={node} />\n                                    </Grid>\n                                    <Grid item xs={2}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            gutterBottom\n                                        >\n                                            {node.extra?.join(\", \")}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n            }\n        />\n    );\n};\n","import React from \"react\";\n\ninterface IPackageNotFound {\n    package_name: string;\n    package_version: string;\n}\n\nexport const PackageNotFound = ({\n    package_name,\n    package_version,\n}: IPackageNotFound) => {\n    return (\n        <div>\n            `&quot;{package_name}\n            {package_version ? \" \" + package_version : \"\"}&quot;` not found\n        </div>\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery, useInfiniteQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/versions\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type PackageVersionsRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageVersions = async (\n    name: requestParams[\"name\"],\n    page: requestParams[\"page\"] = 0,\n    per_page: requestParams[\"per_page\"] = 100,\n) => {\n    return axios.get<PackageVersionsRequestResponseSuccess>(\n        THOTH_URL + \"/python/package/versions\",\n        {\n            params: {\n                name: name,\n                page: page,\n                per_page: per_page,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageVersions = (\n    name: requestParams[\"name\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<PackageVersionsRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!name,\n        queryKey: [\"packageVersions\", name],\n        queryFn: () => getPackageVersions(name),\n    });\n};\n\nexport const useInfinitePackageVersions = (\n    name: requestParams[\"name\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useInfiniteQuery<\n        AxiosResponse<PackageVersionsRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!name,\n        queryKey: [\"packageVersions\", name],\n        queryFn: input => {\n            return getPackageVersions(name, input.pageParam);\n        },\n        getNextPageParam: lastPage => {\n            const parameters: requestParams = (\n                lastPage.data as typeof lastPage.data & {\n                    parameters: requestParams;\n                }\n            ).parameters;\n            return lastPage.data.versions.length === 0\n                ? undefined\n                : (parameters.page ?? 0) + 1;\n        },\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/version/environments\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport const getPackageEnvironments = async (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n) => {\n    return axios.get(THOTH_URL + \"/python/package/version/environments\", {\n        params: {\n            name: name,\n            version: version,\n            index: index,\n        },\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const usePackageEnvironments = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<AxiosResponse<requestResponseSuccess>, AxiosError>({\n        ...config,\n        enabled: !!name && !!version && !!index,\n        queryKey: [\"packageEnvironments\", name, version, index],\n        queryFn: () => getPackageEnvironments(name, version, index),\n    });\n};\n","import { useEffect, useState } from \"react\";\nimport {\n    PackageVersionsRequestResponseSuccess,\n    useInfinitePackageVersions,\n} from \"../api\";\n\nexport const useAllVersions = (package_name: string) => {\n    const versions = useInfinitePackageVersions(package_name);\n    const [allVersions, setAllVersions] = useState<\n        PackageVersionsRequestResponseSuccess[\"versions\"] | undefined\n    >([]);\n\n    useEffect(() => {\n        if (versions.isSuccess) {\n            // if has a next page, and is not currently fetching a page\n            if (versions.hasNextPage && !versions.isFetchingNextPage) {\n                versions.fetchNextPage().then();\n            } else if (!versions.hasNextPage && !versions.isFetchingNextPage) {\n                let merged: PackageVersionsRequestResponseSuccess[\"versions\"] =\n                    [];\n                versions.data.pages.forEach(page => {\n                    merged = [...merged, ...page.data.versions];\n                });\n                if (merged.length > 0) {\n                    merged = merged.reverse();\n                    setAllVersions(merged);\n                } else {\n                    setAllVersions(undefined);\n                }\n            }\n        }\n    }, [versions.data]);\n\n    return allVersions;\n};\n","import React from \"react\";\n\ninterface IErrorPage {\n    message: string;\n    type: string | number;\n    reason: string;\n}\n\nexport const ErrorPage = ({ message, type, reason }: IErrorPage) => {\n    return (\n        <div>\n            <p>\n                {type}\n                {\": \"}\n                {message}\n            </p>\n            <p>{reason}</p>\n        </div>\n    );\n};\n","// React\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// local\nimport { PackageDependencies, PackageHeader } from \"../components\";\n\n// material-ui\nimport { CircularProgress, Grid } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { usePackageMetadata } from \"api\";\nimport { PackageNotFound } from \"./PackageNotFound\";\nimport { useAllVersions, useSimpleGraph } from \"../hooks\";\nimport { usePackageEnvironments } from \"../api\";\nimport { ErrorPage } from \"routes/ErrorPage\";\nimport { PackageMetadata } from \"lib/types/PackageMetadata\";\n\ntype SpecDetails = {\n    package_name: string;\n    package_version?: string;\n    index_url?: string;\n    os_name?: string;\n    os_version?: string;\n    python_version?: string;\n};\n\nexport const SpecContext = React.createContext<{\n    specs: SpecDetails;\n    defaultSpecs: SpecDetails;\n}>({ specs: { package_name: \"\" }, defaultSpecs: { package_name: \"\" } });\n\n// The page that displays all analysis data\nexport const PackageOverview = () => {\n    const params = useParams<SpecDetails>();\n    const [defaultSpecs, setDefaultSpecs] = useState<SpecDetails>({\n        package_name: params.package_name ?? \"\",\n        package_version: undefined,\n        index_url: undefined,\n        os_name: undefined,\n        os_version: undefined,\n        python_version: undefined,\n    });\n\n    // what is on the url params\n    const specs = useMemo<SpecDetails>(() => {\n        return {\n            package_name: params.package_name ?? \"\",\n            package_version: params?.package_version,\n            index_url: params?.index_url\n                ? decodeURIComponent(params.index_url)\n                : undefined,\n            os_name: params?.os_name,\n            os_version: params?.os_version,\n            python_version: params?.python_version,\n        };\n    }, [params]);\n\n    // get all pages of versions/indexes and merge them together\n    const allVersions = useAllVersions(specs.package_name);\n\n    // get environments for specific package, version, index\n    const allEnvironments = usePackageEnvironments(\n        specs.package_name,\n        specs.package_version ?? defaultSpecs.package_version,\n        specs.index_url ?? defaultSpecs.index_url,\n        { useErrorBoundary: false },\n    );\n\n    // some params are optional but still need a default value\n    useEffect(() => {\n        const d: SpecDetails = {\n            package_name: params.package_name ?? \"\",\n            package_version: undefined,\n            index_url: undefined,\n            os_name: undefined,\n            os_version: undefined,\n            python_version: undefined,\n        };\n\n        // get default package version and index\n        // needs package name and versions list\n        if (specs.package_name) {\n            if (allVersions && allVersions.length > 0) {\n                d.package_version = allVersions.at(0)?.package_version;\n                d.index_url = allVersions.at(0)?.index_url;\n            }\n        }\n\n        // get default environment\n        // needs list of environments\n        if (\n            allEnvironments.data &&\n            allEnvironments.data.data.environments.length > 0\n        ) {\n            const filtered = allEnvironments.data.data.environments.filter(\n                env =>\n                    (!specs.os_name || specs.os_name === env.os_name) &&\n                    (!specs.os_version || specs.os_version === env.os_version),\n            );\n            if (filtered.length > 0) {\n                d.os_name = filtered.at(0)?.os_name;\n                d.os_version = filtered.at(0)?.os_version;\n                d.python_version = filtered.at(0)?.python_version;\n            }\n        }\n\n        if (\n            Object.entries(defaultSpecs).some(\n                ([key, val]) => d[key as keyof typeof d] !== val,\n            )\n        ) {\n            setDefaultSpecs(d);\n        }\n    }, [allVersions, allEnvironments, specs]);\n\n    // get package metadata\n    const metadata = usePackageMetadata(\n        specs.package_name,\n        specs.package_version ?? defaultSpecs.package_version,\n        specs.index_url ?? defaultSpecs.index_url,\n        specs.os_name ?? defaultSpecs.os_name,\n        specs.os_version ?? defaultSpecs.os_version,\n        specs.python_version ?? defaultSpecs.python_version,\n        { useErrorBoundary: false },\n    );\n\n    const graph = useSimpleGraph(metadata);\n\n    if (metadata.isLoading || allVersions?.length === 0) {\n        return (\n            <div\n                className=\"w-full h-48 flex justify-center items-center\"\n                data-testid=\"loading\"\n            >\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (!metadata.data) {\n        if (metadata?.error?.response?.data?.error) {\n            return (\n                <ErrorPage\n                    message={metadata.error.response.data.error}\n                    type={metadata.error.response.status}\n                    reason={`${\n                        metadata?.error?.config?.url\n                    } failed with params ${JSON.stringify(\n                        metadata?.error?.config?.params,\n                    )}`}\n                />\n            );\n        }\n        return (\n            <PackageNotFound\n                package_name={params.package_name ?? \"\"}\n                package_version={params.package_version ?? \"\"}\n            />\n        );\n    }\n\n    return (\n        <SpecContext.Provider value={{ specs, defaultSpecs }}>\n            <Grid container>\n                <Grid item xs={12} mb={3}>\n                    <PackageHeader\n                        metadata={\n                            metadata.data.data.metadata.importlib_metadata\n                                .metadata as PackageMetadata\n                        }\n                        allVersions={allVersions}\n                        allEnvironments={\n                            allEnvironments?.data?.data?.environments\n                        }\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <PackageDependencies graph={graph} />\n                </Grid>\n            </Grid>\n        </SpecContext.Provider>\n    );\n};\n","import { useEffect, useState } from \"react\";\n\n// utils\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\n\nimport { usePackageMetadata } from \"api\";\nimport { PackageMetadata } from \"lib/types/PackageMetadata\";\nimport { SimplePackageNodeValue } from \"lib/interfaces/SimplePackageNodeValue\";\n\nexport type PackageDependencyMetric = {\n    extra: string[];\n    extras: string[];\n    marker: string;\n    marker_evaluated: string;\n    marker_evaluation_error: string | null;\n    marker_evaluation_result: boolean;\n    specifier: string;\n    versions: string[];\n};\n\n/**\n * Given a list of packages, create a graph using metadata information.\n */\nexport function useSimpleGraph(\n    metadata: ReturnType<typeof usePackageMetadata>,\n) {\n    const [graph, setGraph] = useState<Graph<Node<SimplePackageNodeValue>>>();\n\n    useEffect(() => {\n        if (metadata.status !== \"success\") {\n            return;\n        }\n\n        // create graph\n        const tempGraph: Graph<Node<SimplePackageNodeValue>> = new Graph();\n\n        // add app node to graph\n        const app = tempGraph.addVertex(\n            \"*App\",\n            {\n                id: \"*App\",\n                label: \"App\",\n                depth: -1,\n            },\n            Node,\n        );\n\n        const root = tempGraph.addVertex(\n            metadata.data.data.metadata.package_name.toLowerCase(),\n            {\n                id: metadata.data.data.metadata.package_name.toLowerCase(),\n                label: metadata.data.data.metadata.package_name,\n                metadata: metadata.data.data.metadata.importlib_metadata\n                    .metadata as PackageMetadata,\n                depth: 0,\n            },\n            Node,\n        );\n\n        root.parents = new Set();\n        root.parents.add(\"*App\");\n        tempGraph.addEdge(app.key, root.key);\n\n        // add deps to graph\n        Object.entries(\n            metadata.data.data.metadata.dependencies as {\n                [key: string]: PackageDependencyMetric;\n            },\n        ).forEach(([name, value]) => {\n            // add package to graph\n            const node = tempGraph.addVertex(\n                name.toLowerCase(),\n                {\n                    id: name.toLowerCase(),\n                    label: name,\n                    metadata: null,\n                    versions: value.versions,\n                    specifier: value.specifier,\n                    extra: value.extra,\n                    depth: 1,\n                },\n                Node,\n            );\n            node.parents = new Set();\n\n            tempGraph.addEdge(root.key, node.key);\n\n            // set parent\n            node.parents.add(root.key);\n        });\n\n        setGraph(tempGraph);\n    }, [metadata.data]);\n\n    return graph;\n}\n","// React\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport { PackageOverview } from \"./PackageOverview\";\nimport { NotFound } from \"routes/NotFound\";\nimport { NavigationLayout } from \"components/Layout/NavigationLayout\";\n\n// The page that displays all analysis data\nexport const PackageRoutes = () => {\n    return (\n        <NavigationLayout>\n            <Routes>\n                <Route\n                    path=\"/:package_version/:index_url/:os_name/:os_version/:python_version\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url/:os_name\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url/:os_name/:os_version\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url\"\n                    element={<PackageOverview />}\n                />\n                <Route path=\"/:package_version\" element={<PackageOverview />} />\n                <Route path=\"/\" element={<PackageOverview />} />\n                <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n        </NavigationLayout>\n    );\n};\n","// React\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Typography, Chip, Button, Collapse, Stack } from \"@mui/material\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport FeedRoundedIcon from \"@mui/icons-material/FeedRounded\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\n\n// utils\nimport { calcTime } from \"utils/calcTime\";\nimport { components } from \"lib/schema\";\nimport { ChipProps } from \"@mui/material/Chip/Chip\";\n\ninterface IImageHeader {\n    imageDocument: components[\"schemas\"][\"AnalysisResultResponse\"] &\n        components[\"schemas\"][\"AnalysisStatusResponse\"];\n    logs?: components[\"schemas\"][\"AnalysisLogResponse\"][\"log\"];\n}\n\n/**\n * Displays basic Advise document information and\n * displays any errors, info, or warnings that came up\n * in the document generation.\n */\nexport const ImageHeader = ({ imageDocument, logs }: IImageHeader) => {\n    const [showLogs, setShowLogs] = React.useState(false);\n    const [selectedLine, setSelectedLine] = React.useState<\n        number | undefined\n    >();\n\n    // get status of the report\n    const [statusText, statusColor]: [string, ChipProps[\"color\"] | undefined] =\n        useMemo(() => {\n            if (imageDocument?.result) {\n                return [\"COMPLETE\", \"success\"];\n            }\n            // if report is not done\n            else if (imageDocument?.status?.state) {\n                return [imageDocument.status.state.toUpperCase(), \"info\"];\n            } else {\n                return [\"UNKNOWN\", undefined];\n            }\n        }, [imageDocument]);\n\n    return (\n        <div>\n            <Typography variant=\"h4\" mb={2}>\n                <b>\n                    {imageDocument?.metadata?.document_id ??\n                        imageDocument.parameters.analysis_id}\n                </b>\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n                <Chip label={statusText} color={statusColor} />\n                <IconText\n                    text={calcTime(\n                        imageDocument?.status?.finished_at,\n                        imageDocument?.status?.started_at,\n                        imageDocument?.metadata?.datetime,\n                    )}\n                    icon={<AccessTimeIcon />}\n                />\n                <Button\n                    sx={{ marginLeft: 2 }}\n                    onClick={() => setShowLogs(!showLogs)}\n                >\n                    <IconText text=\"Logs\" icon={<FeedRoundedIcon />} />\n                </Button>\n            </Stack>\n            <Collapse in={showLogs}>\n                {logs?.split(\"\\n\").map((line, i) => {\n                    return (\n                        <Typography\n                            key={i}\n                            noWrap={selectedLine !== i}\n                            onClick={() =>\n                                setSelectedLine(\n                                    selectedLine === i ? undefined : i,\n                                )\n                            }\n                            variant=\"body2\"\n                            sx={{\n                                backgroundColor:\n                                    selectedLine === i\n                                        ? \"lightyellow\"\n                                        : i % 2 === 0\n                                        ? \"lightgray\"\n                                        : \"unset\",\n                            }}\n                        >\n                            {line}\n                        </Typography>\n                    );\n                }) ?? \"Image log is not available.\"}\n            </Collapse>\n        </div>\n    );\n};\n","// react\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n// material-ui\nimport { Box, Skeleton } from \"@mui/material\";\nimport { components } from \"lib/schema\";\n\ninterface IDebInfo {\n    /** An object holding metric info. */\n    imageDocument: components[\"schemas\"][\"AnalysisResultResponse\"];\n}\n\nconst columns = [\n    { field: \"name\", headerName: \"Package Name\", flex: 1 },\n    { field: \"version\", headerName: \"Version\", flex: 0.5 },\n    { field: \"arch\", headerName: \"Architecture\", flex: 0.5 },\n];\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const DebInfo = ({ imageDocument }: IDebInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div style={{ height: 400, width: \"100%\" }}>\n            <DataGrid\n                disableSelectionOnClick\n                disableColumnSelector\n                hideFooterSelectedRowCount\n                getRowId={row => row.package_identifier}\n                density=\"compact\"\n                rows={imageDocument?.result?.[\"deb\"]}\n                columns={columns}\n                pageSize={50}\n                rowsPerPageOptions={[25, 50, 100]}\n            />\n        </div>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Box, Grid, Skeleton, Stack, Typography } from \"@mui/material\";\nimport { Chip } from \"@mui/material\";\nimport { ImageDocumentRequestResponseSuccess } from \"../../api\";\n\ninterface IPythonInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n}\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const PythonInfo = ({ imageDocument }: IPythonInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box data-testid=\"python-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    const files = useMemo(() => {\n        if (!imageDocument?.result?.[\"python-files\"]) {\n            return [];\n        }\n\n        const paths = new Map();\n        imageDocument.result[\"python-files\"].forEach(file => {\n            const split = file.filepath.split(\"/\", 4);\n            const key = split[1] + \"/\" + split[2] + \"/\" + split[3];\n            if (paths.has(key)) {\n                paths.set(key, paths.get(key) + 1);\n            } else {\n                paths.set(key, 1);\n            }\n        });\n        return Array.from(paths.entries()).map(([key, value]) => {\n            return {\n                path: key,\n                count: value,\n            };\n        });\n    }, [imageDocument]);\n\n    const interpreters = useMemo(() => {\n        return imageDocument.result[\"python-interpreters\"].filter(\n            interpreter => !!interpreter.version,\n        );\n    }, [imageDocument]);\n\n    return (\n        <Stack direction=\"column\" spacing={3}>\n            {interpreters?.length > 0 ? (\n                <Stack direction=\"row\" spacing={1} alignItems={\"center\"}>\n                    <Typography variant={\"h6\"}>\n                        Python interpreters:{\" \"}\n                    </Typography>\n                    {interpreters.map((interpreter, i) => {\n                        return (\n                            <Chip\n                                data-testid=\"python-info-chip\"\n                                key={(interpreter?.version ?? \"\") + i}\n                                label={interpreter.version}\n                            />\n                        );\n                    })}\n                </Stack>\n            ) : undefined}\n            <div data-testid=\"python-info-loaded\">\n                <Stack direction=\"row\" spacing={1} mb={1} alignItems={\"center\"}>\n                    <Typography variant={\"h6\"}>\n                        Total number of Python files:{\" \"}\n                    </Typography>\n                    <Typography variant={\"body1\"}>\n                        {files.reduce((prev, cur) => prev + cur.count, 0)}\n                    </Typography>\n                </Stack>\n                <Grid container>\n                    {files\n                        .sort((a, b) => b.count - a.count)\n                        .map(file => {\n                            return (\n                                <Grid\n                                    key={file.path}\n                                    item\n                                    xs={12}\n                                    lg={6}\n                                    xl={4}\n                                >\n                                    <Stack\n                                        ml={3}\n                                        direction=\"row\"\n                                        spacing={1}\n                                        alignItems={\"center\"}\n                                        justifyContent={\"space-between\"}\n                                    >\n                                        <Typography variant={\"body2\"}>\n                                            {file.path}:\n                                        </Typography>\n                                        <Typography variant={\"body2\"}>\n                                            <b>{file.count}</b>\n                                        </Typography>\n                                    </Stack>\n                                </Grid>\n                            );\n                        })}\n                </Grid>\n            </div>\n        </Stack>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Box, Grid, Skeleton, Stack, Typography } from \"@mui/material\";\nimport { Chip } from \"@mui/material\";\nimport {\n    ImageDocumentRequestResponseSuccess,\n    ImageMetadataRequestResponseSuccess,\n} from \"../../api\";\n\nexport interface IImageInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n    imageMetadata?: ImageMetadataRequestResponseSuccess;\n}\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const ImageInfo = ({ imageDocument, imageMetadata }: IImageInfo) => {\n    const params = useMemo(() => {\n        if (imageMetadata) {\n            return imageMetadata as ImageMetadataRequestResponseSuccess & {\n                labels: { [key: string]: string };\n            };\n        } else if (imageDocument?.result?.[\"skopeo-inspect\"]) {\n            return {\n                architecture:\n                    imageDocument.result[\"skopeo-inspect\"].Architecture,\n                created: imageDocument.result[\"skopeo-inspect\"].Created,\n                digest: imageDocument.result[\"skopeo-inspect\"].Digest,\n                docker_version:\n                    imageDocument.result[\"skopeo-inspect\"].DockerVersion,\n                labels: imageDocument.result[\"skopeo-inspect\"].Labels as {\n                    [key: string]: string;\n                },\n                layers: imageDocument.result[\"skopeo-inspect\"].Layers,\n                os: imageDocument.result[\"skopeo-inspect\"].Os,\n                repo_tags: imageDocument.result[\"skopeo-inspect\"].RepoTags,\n            };\n        }\n    }, [imageDocument, imageMetadata]);\n\n    if (!params) {\n        return (\n            <Box data-testid=\"image-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                    <Typography variant={\"body1\"}>\n                        <b>{params.labels?.[\"io.k8s.display-name\"]}</b>\n                    </Typography>\n                    <Chip label={params.labels?.name.split(\":\").at(-1)} />\n                </Stack>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant={\"h6\"} mb={1}>\n                    General information\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Summary\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.summary}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Description\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.description}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Provider\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.vendor}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Maintainer\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.maintainer}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Build date\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {new Date(\n                        params.labels?.[\"build-date\"] as string,\n                    ).toLocaleDateString()}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={12}>\n                <Typography variant={\"h6\"} mb={1}>\n                    Technical information\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Image name\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>{params.labels?.name}</Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Image version\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.version}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Architecture\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>{params.architecture}</Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Usage\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    <code>{params.labels?.usage}</code>\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Exposed Ports\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.[\"io.openshift.expose-services\"]}\n                </Typography>\n            </Grid>\n        </Grid>\n    );\n};\n","// react\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n// material-ui\nimport { Box, Skeleton } from \"@mui/material\";\nimport { ImageDocumentRequestResponseSuccess } from \"../../api\";\n\ninterface IRPMInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n}\n\ntype RPMDependency = {\n    arch: string;\n    dependencies: string[];\n    epoch: string | null;\n    name: string;\n    package_identifier: string;\n    release: string;\n    src: boolean;\n    version: string;\n};\n\nconst columns = [\n    { field: \"name\", headerName: \"Package Name\", flex: 1 },\n    { field: \"version\", headerName: \"Version\", flex: 0.5 },\n    { field: \"release\", headerName: \"Release\", flex: 0.25 },\n    {\n        field: \"dependencies\",\n        headerName: \"Dependencies\",\n        flex: 0.5,\n        valueGetter: (params: { row: RPMDependency }) =>\n            params.row?.dependencies?.length ?? 0,\n        sortable: false,\n    },\n    { field: \"epoch\", headerName: \"Epoch\", flex: 0.5 },\n    { field: \"arch\", headerName: \"Architecture\", flex: 0.5 },\n];\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const RPMInfo = ({ imageDocument }: IRPMInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box data-testid=\"rpm-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div\n            style={{ height: 400, width: \"100%\" }}\n            data-testid=\"rpm-info-loaded\"\n        >\n            <DataGrid\n                disableSelectionOnClick\n                disableColumnSelector\n                hideFooterSelectedRowCount\n                getRowId={row => row.package_identifier}\n                density=\"compact\"\n                rows={\n                    imageDocument?.result?.[\n                        \"rpm-dependencies\"\n                    ] as RPMDependency[]\n                }\n                columns={columns}\n                pageSize={50}\n                rowsPerPageOptions={[25, 50, 100]}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport InfoCard from \"components/Elements/InfoCard\";\nimport { DependenciesMetric, LicenseMetric } from \"components/Metrics\";\nimport { Masonry } from \"@mui/lab\";\nimport { DebInfo, PythonInfo, ImageInfo, RPMInfo } from \"../components\";\nimport {\n    ImageDocumentRequestResponseSuccess,\n    ImageMetadataRequestResponseSuccess,\n} from \"../api\";\nimport { ImageMetrics } from \"../hooks\";\n\ninterface IImageSummary {\n    imageDocument: ImageDocumentRequestResponseSuccess;\n    imageMetadata?: ImageMetadataRequestResponseSuccess;\n    metrics: ImageMetrics;\n}\n\nexport const ImageSummary = ({\n    metrics,\n    imageDocument,\n    imageMetadata,\n}: IImageSummary) => {\n    return (\n        <Masonry columns={{ xs: 1, md: 2 }} spacing={3} sx={{ mb: 3, mt: 1 }}>\n            {imageDocument || imageMetadata ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Image Details\",\n                        }}\n                        cardBody={\n                            <ImageInfo\n                                imageDocument={imageDocument}\n                                imageMetadata={imageMetadata}\n                            />\n                        }\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument?.result?.[\"python-interpreters\"]?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Details\",\n                        }}\n                        cardBody={<PythonInfo imageDocument={imageDocument} />}\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument?.result?.[\"rpm-dependencies\"]?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"RPM Details\",\n                        }}\n                        cardBody={<RPMInfo imageDocument={imageDocument} />}\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument.result?.deb?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Debian Details\",\n                        }}\n                        cardBody={<DebInfo imageDocument={imageDocument} />}\n                    />{\" \"}\n                </div>\n            ) : undefined}\n\n            {Object.keys(metrics?.dependencies?.all ?? {}).length !== 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Packages Dependencies\",\n                        }}\n                        cardBody={\n                            <DependenciesMetric\n                                metric={metrics?.dependencies}\n                            />\n                        }\n                    />\n                </div>\n            ) : undefined}\n\n            {Object.keys(metrics?.licenses ?? {}).length !== 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Packages Licenses\",\n                        }}\n                        cardBody={<LicenseMetric metric={metrics?.licenses} />}\n                    />{\" \"}\n                </div>\n            ) : undefined}\n        </Masonry>\n    );\n};\n","import axios, { AxiosResponse, AxiosError } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { paths } from \"lib/schema\";\nimport { THOTH_URL } from \"config\";\n\ntype path = paths[\"/analyze/{analysis_id}\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\nexport type ImageDocumentRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\nexport type ImageDocumentRequestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/analyze`\n *\n * @param analysis_id - the image document id (ex: `package-extract-211112223258-38af1a4746733b53`)\n */\nexport const getImageDocument = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get<ImageDocumentRequestResponseSuccess>(\n        THOTH_URL + \"/analyze/\" + analysis_id,\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useImageDocument = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<ImageDocumentRequestResponseSuccess>,\n        AxiosError<ImageDocumentRequestResponseFailure>\n    >({\n        ...config,\n        enabled: !!analysis_id,\n        queryKey: [\"ImageDocument\", analysis_id],\n        queryFn: () => getImageDocument(analysis_id),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/analyze/{analysis_id}/log\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/image/logs`\n *\n * @param analysis_id - the image document id (ex: `package-extract-211112223258-38af1a4746733b53`)\n */\nexport const getImageLogs = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get(THOTH_URL + \"/analyze/\" + analysis_id + \"/log\", {\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const useImageLogs = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!analysis_id,\n        queryKey: [\"ImageLogs\", analysis_id],\n        queryFn: () => getImageLogs(analysis_id),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/image/metadata\"][\"post\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type ImageMetadataRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\nexport type ImageMetadataRequestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"403\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/analyze`\n *\n * @param image the name of the image\n */\nexport const getImageMetadata = async (image: requestParams[\"image\"]) => {\n    return axios.post(\n        THOTH_URL + \"/image/metadata\",\n        {},\n        {\n            params: {\n                image: image,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useImageMetadata = (\n    image_name: requestParams[\"image\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<ImageMetadataRequestResponseSuccess>,\n        AxiosError<ImageMetadataRequestResponseFailure>\n    >({\n        ...config,\n        enabled: !!image_name,\n        queryKey: [\"ImageMetadata\", image_name],\n        queryFn: () => getImageMetadata(image_name),\n    });\n};\n","import React from \"react\";\n\ninterface IImageNotFound {\n    analysis_id?: string;\n}\n\nexport const ImageNotFound = ({ analysis_id }: IImageNotFound) => {\n    return <div> &quot;{analysis_id}&quot; not found</div>;\n};\n","import React, { useMemo } from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\n\n// sub-routes\nimport { ImageSummary } from \"./ImageSummary\";\n\n// feature specific imports\nimport { useImageDocument, useImageLogs, useImageMetadata } from \"../api\";\n\n// misc\nimport { CircularProgress } from \"@mui/material\";\nimport { ImageNotFound } from \"./ImageNotFound\";\nimport { NavigationLayout } from \"components/Layout/NavigationLayout\";\nimport { useGraph } from \"hooks\";\nimport { useMetrics } from \"../hooks\";\nimport { ImageHeader } from \"../components\";\nimport { formatImagePackages } from \"../utils\";\nimport { components } from \"lib/schema\";\nimport { AxiosResponse } from \"axios\";\nimport { postImageAnalyze } from \"../../home/api\";\n\nexport const ImageRoutes = () => {\n    // get document id\n    const { analysis_id } = useParams();\n    const { state } = useLocation();\n    const navigate = useNavigate();\n\n    // api get thoth image analysis document\n    const imageDocument = useImageDocument(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: (\n            data: AxiosResponse<\n                components[\"schemas\"][\"AnalysisStatusResponse\"]\n            >,\n        ) => {\n            if (data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    const imageMetadata = useImageMetadata(\n        (state as { image_name?: string })?.image_name ??\n            (\n                imageDocument.data?.data?.metadata?.arguments as {\n                    \"extract-image\": { image: string };\n                }\n            )?.[\"extract-image\"]?.image,\n    );\n\n    const logs = useImageLogs(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: () => {\n            if (imageDocument.data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    // format init graph data\n    const graphData = useMemo(() => {\n        if (imageDocument.data?.data?.metadata) {\n            const os = {\n                name:\n                    (imageDocument.data.data.result?.[\"operating-system\"]\n                        ?.id as string) ?? \"rhel\",\n                version:\n                    (\n                        imageDocument.data.data.result?.[\"operating-system\"]\n                            ?.version_id as string\n                    )?.split(\".\")[0] ?? \"8\",\n                python_version:\n                    imageDocument.data.data.metadata.python.major +\n                    \".\" +\n                    imageDocument.data.data.metadata.python.minor,\n            };\n            return formatImagePackages(\n                imageDocument.data.data.result[\"python-packages\"],\n                os,\n            );\n        }\n    }, [imageDocument.data]);\n\n    // create init graph\n    const graph = useGraph(graphData);\n\n    // compute metric data\n    const metrics = useMetrics(graph);\n\n    if (imageDocument?.isLoading) {\n        return (\n            <div className=\"w-full h-48 flex justify-center items-center\">\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (!imageDocument?.data) {\n        const name = (state as { image_name?: string })?.image_name;\n        if (name) {\n            postImageAnalyze(name).then(response => {\n                navigate(\"/image/\" + response.data.analysis_id, {\n                    state: { image_name: name },\n                });\n            });\n            return (\n                <div className=\"w-full h-48 flex justify-center items-center\">\n                    <CircularProgress />\n                </div>\n            );\n        }\n        return (\n            <div data-testid=\"image-not-loaded\">\n                <NavigationLayout>\n                    <ImageNotFound analysis_id={analysis_id} />\n                </NavigationLayout>\n            </div>\n        );\n    }\n\n    return (\n        <div data-testid=\"image-loaded\">\n            <NavigationLayout goHome={true}>\n                <ImageHeader\n                    imageDocument={imageDocument.data?.data}\n                    logs={logs.data?.data?.log}\n                />\n                <ImageSummary\n                    imageMetadata={imageMetadata.data?.data}\n                    metrics={metrics}\n                    imageDocument={imageDocument.data?.data}\n                />\n            </NavigationLayout>\n        </div>\n    );\n};\n","import { useMemo } from \"react\";\nimport {\n    useLicenseMetric,\n    useDependencyMetric,\n    DependencyMetricType,\n    LicenseMetricType,\n} from \"hooks/metrics\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type ImageMetrics = {\n    dependencies: DependencyMetricType | null;\n    licenses: LicenseMetricType | null;\n};\n\nexport function useMetrics(graph?: Graph<Node<PackageNodeValue>>) {\n    const dependencyMetric = useDependencyMetric(graph);\n    const licenseMetric = useLicenseMetric(graph);\n\n    return useMemo(() => {\n        const base: ImageMetrics = {\n            dependencies: null,\n            licenses: null,\n        };\n\n        if (dependencyMetric) {\n            base.dependencies = dependencyMetric;\n        }\n        if (licenseMetric) {\n            base.licenses = licenseMetric;\n        }\n\n        return base;\n    }, [dependencyMetric, licenseMetric]);\n}\n","type ImagePackages = {\n    package_name: string;\n    package_version: string;\n};\n\ntype OS = { name: string; version: string; python_version: string };\n\nexport function formatImagePackages(image_packages: ImagePackages[], os: OS) {\n    return image_packages.map(p => {\n        return {\n            name: p.package_name,\n            version: p.package_version,\n            index: \"https://pypi.org/simple\",\n            os_name: os.name,\n            os_version: os.version,\n            python_version: os.python_version,\n        };\n    });\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { Home } from \"features/home\";\nimport { NotFound } from \"routes/NotFound\";\nimport { AdviseRoutes } from \"features/advise\";\nimport { PackageRoutes } from \"features/package\";\nimport { ImageRoutes } from \"features/image\";\n\nexport const RouterConfig = () => {\n    return (\n        <BrowserRouter\n            basename={\n                process.env.REACT_APP_DEPLOYMENT === \"STAGE\"\n                    ? \"/search-stage\"\n                    : \"/search\"\n            }\n        >\n            <Routes>\n                <Route path={\"/\"} element={<Home />} />\n                <Route\n                    path={\"advise/:analysis_id/*\"}\n                    element={<AdviseRoutes />}\n                />\n                <Route\n                    path={\"package/:package_name/*\"}\n                    element={<PackageRoutes />}\n                />\n                <Route\n                    path={\"image/:analysis_id/*\"}\n                    element={<ImageRoutes />}\n                />\n                <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n        </BrowserRouter>\n    );\n};\n\nexport default RouterConfig;\n","import React from \"react\";\nimport { AppProvider } from \"providers/app\";\nimport RouterConfig from \"routes/RouterConfig\";\n\nfunction App() {\n    return (\n        <AppProvider>\n            <RouterConfig />\n        </AppProvider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}