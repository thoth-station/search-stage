{"version":3,"sources":["lib/react-query.ts","styles/Theme.tsx","stores/Global.tsx","providers/app.tsx","components/Elements/TabPanel/TabPanel.tsx","assets/thoth-logo.png","components/Elements/SearchBar/SearchBar.tsx","config/index.ts","features/home/api/postAdvise.ts","features/home/api/getPackageExists.ts","features/home/api/postImageAnalyze.ts","features/home/api/getContainerImages.ts","features/home/components/PackageSearch.tsx","features/home/components/ComboBox/ComboBox.tsx","components/Elements/GenericTable/GenericTable.tsx","features/advise/api/getPackageDependencies.ts","features/advise/api/getAdviseDocument.ts","features/advise/api/getAdviseLogs.ts","utils/timeSince.ts","utils/calcTime.ts","features/home/components/AdviseCreation.tsx","features/home/components/ImageSearch.tsx","assets/footer-logo.png","components/Footer/Footer.tsx","features/home/routes/index.tsx","routes/NotFound.tsx","components/Elements/InfoCard/InfoCard.tsx","components/Elements/ProgressBar/ProgressBar.tsx","components/Metrics/DependenciesMetric/DependenciesMetric.tsx","components/Metrics/LicenseMetric/LicenseGroup/LicenseGroup.tsx","components/Metrics/LicenseMetric/LicenseMetric.tsx","components/Metrics/AdviseMetric/AdviseMetric.tsx","components/Elements/IconText/IconText.tsx","features/advise/components/AdviseHeader/CustomAlert/CustomAlert.tsx","features/advise/components/AdviseHeader/AdviseHeader.tsx","features/advise/components/AdviseTableView/EnhancedTableHead/EnhancedTableHead.tsx","features/advise/components/PackageList/PackageList.tsx","components/Elements/Loading/Loading.tsx","features/advise/routes/AdviseDetails.tsx","features/advise/components/LockfileView/LockfileView.tsx","features/advise/components/Popup/Popup.tsx","features/advise/components/NetworkGraphView/NetworkGraphView.tsx","features/advise/components/JustificationMetrics/ScorecardMetric.tsx","api/getPackageMetadata.ts","api/getFile.ts","features/advise/components/SelectedPackage/hooks/useScorecards.ts","features/advise/components/SelectedPackage/SelectedPackage.tsx","features/advise/components/SelectedPackage/hooks/useLinkData.tsx","features/advise/routes/AdviseSummary.tsx","components/Elements/ScrollToTop/ScrollToTop.tsx","features/advise/routes/AdviseCompare.tsx","hooks/metrics/useAdviseMetric.ts","hooks/metrics/useDependencyMetric.ts","hooks/metrics/useLicenseMetric.ts","features/advise/hooks/useMetrics.ts","hooks/useInterval.ts","lib/interfaces/Graph.ts","lib/interfaces/Node.ts","hooks/useGraph.ts","features/advise/routes/AdviseNotFound.tsx","components/Layout/MainLayout.tsx","components/Layout/AdviserLayout.tsx","components/Layout/NavigationLayout.tsx","features/advise/routes/AdviseLogs.tsx","features/advise/components/StackInfoMetrics/StackInfoInstallErrorMetric.tsx","features/advise/components/StackInfoMetrics/StackInfoRulesMetric.tsx","features/advise/components/StackInfoMetrics/StackInfoEnvMetric.tsx","features/advise/components/StackInfoMetrics/StackInfoMetric.tsx","features/advise/routes/AdviseStackInfo.tsx","features/advise/routes/AdviseEnvironmentInfo.tsx","features/advise/routes/AdviseLicenses.tsx","features/advise/routes/index.tsx","utils/formatLockfile.ts","features/package/components/ParamDropdown/ParamDropdown.tsx","features/package/components/PackageHeader/PackageHeader.tsx","features/package/components/PackageDependencies/VersionDropdown.tsx","features/package/components/PackageDependencies/PackageDependencies.tsx","features/package/routes/PackageNotFound.tsx","features/package/api/getPackageVersions.ts","features/package/api/getPackageEnvironments.ts","routes/ErrorPage.tsx","features/package/routes/PackageOverview.tsx","features/package/hooks/useSimpleGraph.ts","features/package/routes/index.tsx","features/image/components/ImageHeader/ImageHeader.tsx","features/image/components/DebInfo/DebInfo.tsx","features/image/components/PythonInfo/PythonInfo.tsx","features/image/components/ImageInfo/ImageInfo.tsx","features/image/components/RPMInfo/RPMInfo.tsx","features/image/routes/ImageSummary.tsx","features/image/api/getImageDocument.ts","features/image/api/getImageLogs.ts","features/image/api/getImageMetadata.ts","features/image/routes/ImageNotFound.tsx","features/image/routes/index.tsx","features/image/hooks/useMetrics.ts","features/image/utils/formatImagePackages.ts","routes/RouterConfig.tsx","App.tsx","index.tsx"],"names":["queryClient","QueryClient","defaultOptions","queries","useErrorBoundary","refetchOnWindowFocus","refetchOnMount","retry","theme","createTheme","palette","primary","main","secondary","background","default","paper","text","shape","borderRadius","activeColor","customColor","value","argbFromHex","name","blend","responsiveFontSizes","components","MuiPopover","defaultProps","elevation","styleOverrides","paddingLeft","paddingRight","MuiDialog","PaperProps","MuiDrawer","borderStyle","backgroundColor","MuiLink","root","color","Theme","children","ThemeProvider","CssBaseline","StateContext","React","undefined","reducer","state","action","type","input","payload","loading","isLoading","total","DispatchContext","updateLoading","initState","Global","dispatch","actionMap","Provider","ErrorFallback","Button","onClick","window","location","assign","origin","AppProvider","FallbackComponent","client","TabPanel","index","props","role","hidden","id","SearchBar","onEnter","label","helpertext","boxprops","error","lefticon","righticon","Box","Typography","variant","sx","Paper","p","display","alignItems","borderColor","InputBase","ml","flex","placeholder","onChange","onKeyPress","ev","key","preventDefault","LOCAL_STORAGE_KEY","THOTH_URL","options","manipulation","enabled","interaction","hover","hoverConnectedEdges","selectConnectedEdges","selectable","edges","chosen","smooth","arrowStrikethrough","arrows","from","nodes","border","size","borderWidth","labelHighlightBold","font","strokeWidth","physics","hierarchicalRepulsion","damping","springLength","solver","minVelocity","postAdvise","pipfile","pipfileLock","runtime_environment","data","application_stack","requirements","requirements_format","requirements_lock","axios","post","params","recommendation_type","headers","accept","getPackageExists","a","get","then","res","versions","length","catch","postImageAnalyze","image","getContainerImages","page","per_page","PackageSearch","navigate","useNavigate","useState","searchQuery","setSearchQuery","searchError","setSearchError","handleAnalyze","Grid","container","justifyContent","alignSelf","item","xs","minHeight","spacing","md","e","target","handleChange","minWidth","filter","createFilterOptions","ComboBox","suggestions","help","required","setValue","suggestions_mapped","useMemo","map","suggestion","title","Autocomplete","event","newValue","inputValue","filterOptions","filtered","push","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","freeSolo","renderInput","TextField","fullWidth","helperText","descendingComparator","b","orderBy","getComparator","order","EnhancedTableHead","onRequestSort","TableHead","TableRow","headCell","TableCell","sortDirection","TableSortLabel","active","direction","property","GenericTable","rows","setOrder","setOrderBy","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","max","width","mb","TableContainer","Table","rowCount","TableBody","slice","sort","row","labelId","tabIndex","header","j","component","scope","align","IconButton","style","height","colSpan","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","className","CircularProgress","getAdviseDocument","analysis_id","useAdviseDocument","config","useQuery","startsWith","queryKey","queryFn","getAdviseLogs","timeSince","date","startTime","Date","seconds","floor","valueOf","interval","num","calcTime","finished_at","started_at","datetime","param","Error","headCells","lookupType","operating_system_name","operating_system_version","python_version","cuda_version","cudnn_version","mkl_version","openblas_version","openmpi_version","base_image","AdviseCreation","analysis_ids","useReducer","localHistory","ids","localStorage","getItem","split","s","adviseHistory","useQueries","doc","document_id","metadata","result","report","products","project","os_name","operating_system","os_version","version","status","isValid","valid","Object","keys","forEach","response","includes","Collapse","in","marginRight","mt","padding","marginBottom","multiline","sm","LoadingButton","ImageSearch","images","container_images","image_name","mr","package_extract_document_id","environment_name","Footer","marginTop","alt","src","logo","Stack","paddingX","textTransform","paddingBottom","Link","underline","href","Home","mode","setMode","useTheme","matches","useMediaQuery","breakpoints","up","maxWidth","margin","textAlign","ToggleButtonGroup","exclusive","newMode","ToggleButton","Divider","NotFound","InfoCard","cardMeta","cardBody","cardAction","Card","CardHeader","subheader","subTitle","CardContent","ProgressBar","LinearProgress","colorPrimary","bar","DependenciesMetric","metric","totalDependencies","all","direct","indirect","roots","gutterBottom","List","TransitionGroup","entries","t","ListItem","ListItemText","Skeleton","LicenseGroup","packages","totalLicenses","open","setOpen","isOsiApproved","timeout","unmountOnExit","my","depth","k","v","Chip","LicenseMetric","more","setMore","licenses","reduce","sum","val","AdviseMetric","justTotal","values","justification","build","IconText","icon","link","rel","CustomAlert","info","Alert","severity","message","AdviseHeader","adviseDocument","lastLog","ERROR","toUpperCase","statusText","statusColor","parameters","error_msg","levelname","toLowerCase","PackageList","graph","useContext","SelectedPackageContext","setSelected","console","log","selected","search","setSearch","packageList","node","summary","Summary","warnings","justifications","errors","maxHeight","overflow","dense","button","ListItemSecondaryAction","Loading","progress","flexDirection","createContext","AdviseDetails","flexGrow","overflowY","Popup","License","latestVersion","NetworkGraph","visJsRef","useRef","useEffect","selectedNode","findAllNodesOnAllPaths","app_node","set","convertedNodes","DataSet","popup","document","createElement","ReactDOM","render","add","visData","visEdges","network","current","Network","networkCanvas","getElementById","getElementsByTagName","changeCursor","newCursorStyle","cursor","on","flexFlow","ref","ScorecardItem","tags","short","risk","passing","KeyboardArrowDown","transform","transition","fontWeight","marginLeft","tag","ScorecardMetric","getPackageMetadata","usePackagesMetadata","getYamlFile","url","fetch","getFile","YAML","parse","getMatch","scorecards","pattern","Maintained","Contributors","Fuzzing","Packaging","SAST","Vulnerabilities","find","scorecard","SelectedPackage","selectedPackage","dependents","deps","parents","justs","Map","just","setScorecard","scorecardJustifications","Array","delete","load","yaml","checks","match","useScorecards","linkData","setLinkData","patterns","temp","useLinkData","popular","browseLink","showError","i","Fragment","orientation","avatar","dep","NetworkGraphView","AdviseSummary","metrics","advise","dependencies","ScrollTop","trigger","useScrollTrigger","disableHysteresis","threshold","Zoom","anchor","ownerDocument","querySelector","scrollIntoView","behavior","block","position","bottom","right","ScrollToTop","Fab","AdviseCompare","comparison","setComparison","compareDoc","importText","setImportText","handleClose","reason","history","requirements_locked","COMPARE_COLORS","old","new","change","equal","comparePaths","obj1","obj2","mapping","obj","obj1_mapped","obj2_mapped","renderCompareLine","compareType","borderStyles","paddingTop","toString","doubleRenderTypography","headerStyles","compareArrays","array1","array2","s1","JSON","stringify","s2","set1","Set","set2","merged","has","createProjectCompare","proj1","proj2","dev_packages","_meta","sources","field","hardware","cpu_model","cpu_family","gpu_model","trim","createCompare","doc1","doc2","arguments","distribution","os_release","python","major","minor","micro","api_version","implementation_name","releaselevel","accepted_final_states_count","discarded_final_states_count","resolver_iterations","pipeline","advised_manifest_changes","patch","path","op","stack_info","compareJSX","borderBottomStyle","borderTopLeftRadius","borderTopRightRadius","Dialog","disableEscapeKeyDown","onClose","DialogTitle","DialogContent","flexWrap","DialogActions","setItem","join","handleImport","columnSpacing","borderTopStyle","borderBottomLeftRadius","borderBottomRightRadius","textOverflow","whiteSpace","marginX","FormControl","Select","displayEmpty","MenuItem","disabled","useDependencyMetric","setMetric","base","visited","rootObj","bfs","graphSearch","useLicenseMetric","packageLicenses","Classifier","classifier","parsed","generalLicense","specificLicense","license","specific","useMetrics","adviseMetric","analyzer","analyzer_version","useAdviseMetric","dependencyMetric","licenseMetric","Graph","this","Node","source","destination","sourceNode","destinationNode","addAdjacent","first","visitList","pop","shift","getAdjacents","adj","newPath","nextPath","findPath","destinationKey","parent","paths","findAllPaths","adjacents","useGraph","knownRoots","allMetadata","setLoading","setGraph","query","every","tempGraph","notRoot","addVertex","isSuccess","package_name","package_version","importlib_metadata","currentNode","adjacentNode","addEdge","app","justifiedPackages","adjs","min","visGraphEdges","to","AdviseNotFound","MainLayout","marginY","openedMixin","transitions","create","easing","sharp","duration","enteringScreen","overflowX","closedMixin","leavingScreen","Drawer","styled","shouldForwardProp","prop","flexShrink","boxSizing","CustomListItem","chipData","hideOnClosed","hexFromArgb","light","colorContainer","onColorContainer","RouterLink","secondaryAction","warning","ListItemIcon","disableTypography","AdviserLayout","useLocation","currentTab","pathname","at","NavigationLayout","goHome","AdviseLogs","logs","line","module","lineno","funcname","created","asctime","msecs","relative_created","process","stickyHeader","StackInfoInstallErrorMetric","compact","down","titleTypographyProps","prev","cur","pkg","package","inset","StackInfoRulesMetric","rule","flexItem","constraint","StackInfoEnvMetric","env","provided","StackInfoMetric","typeTotals","c","renderRow","alignContent","some","AdviseStackInfo","types","cards","element","name_index","rules","name_constraint_index","concat","fromEntries","stackInfoHandler","others","Masonry","columns","lg","xl","EditableLabel","itemKey","itemSubKey","handleSubmit","editMode","fontStyle","AdviseEnvironmentInfo","currentRuntimeEnvironment","setCurrentRuntimeEnvironment","errorMessage","setErrorMessage","setEditMode","subKey","original","detail","group","platform","formatted_json","format","formatObj","subValue","dump","getIcon","subItem","verticalAlign","ListItemAvatar","fontSize","navigator","clipboard","writeText","AdviseLicenses","disablePadding","ListItemButton","pkgName","pkgData","AdviseRoutes","useParams","refetchInterval","useAdviseLogs","lockfile","replace","formatLockfile","stackInfoTotals","licenseTotals","ParamDropdown","SpecContext","specs","defaultSpecs","encodeURIComponent","index_url","renderValue","PackageHeader","allVersions","allEnvironments","showEnvParams","setShowEnvParams","versionOptions","dups","indexUrlOptions","osNameOptions","osVersionOptions","pythonVersionOptions","Name","VersionDropdown","anchorEl","setAnchorEl","noDup","currentKey","buckets","ceil","fixedOptions","array","currentTarget","endIcon","specifier","Menu","divider","PackageDependencies","visitedOrder","extra","rowSpacing","PackageNotFound","getPackageVersions","getPackageEnvironments","ErrorPage","PackageOverview","setDefaultSpecs","decodeURIComponent","usePackageEnvironments","d","environments","usePackageMetadata","useSimpleGraph","PackageRoutes","ImageHeader","imageDocument","showLogs","setShowLogs","selectedLine","setSelectedLine","noWrap","headerName","DebInfo","disableSelectionOnClick","disableColumnSelector","hideFooterSelectedRowCount","getRowId","package_identifier","density","pageSize","PythonInfo","files","file","filepath","interpreters","interpreter","ImageInfo","imageMetadata","architecture","Architecture","Created","digest","Digest","docker_version","DockerVersion","labels","Labels","layers","Layers","os","Os","repo_tags","RepoTags","description","vendor","maintainer","toLocaleDateString","usage","valueGetter","sortable","RPMInfo","ImageSummary","deb","getImageDocument","getImageLogs","getImageMetadata","ImageNotFound","ImageRoutes","useImageDocument","useImageLogs","version_id","image_packages","formatImagePackages","RouterConfig","basename","App","StrictMode"],"mappings":"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","file":"static/js/main.918c1bf9.chunk.js","sourcesContent":["import { QueryClient } from \"react-query\";\n\nconst queryConfig = {\n    queries: {\n        useErrorBoundary: true,\n        refetchOnWindowFocus: false,\n        refetchOnMount: false,\n        retry: false,\n    },\n};\n\nexport const queryClient = new QueryClient({ defaultOptions: queryConfig });\n","import React from \"react\";\n\n// material ui\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { createTheme, responsiveFontSizes } from \"@mui/material/styles\";\nimport { argbFromHex, customColor } from \"@material/material-color-utilities\";\n\nlet theme = createTheme();\n\n// key colors and theme\ntheme = createTheme(theme, {\n    palette: {\n        primary: {\n            main: \"#f39200\",\n        },\n        secondary: {\n            main: \"#4fc1ea\",\n        },\n        background: {\n            default: \"rgb(249, 249, 249)\",\n            paper: \"#fff\",\n        },\n        text: {\n            primary: \"#363636\",\n            secondary: \"#999999\",\n        },\n    },\n    shape: {\n        borderRadius: 12,\n    },\n});\n\nexport const activeColor = customColor(0, {\n    value: argbFromHex(theme.palette.primary.main),\n    name: \"active\",\n    blend: false,\n});\n\ntheme = responsiveFontSizes(theme);\n\ntheme = createTheme(theme, {\n    components: {\n        MuiPopover: {\n            defaultProps: {\n                elevation: 2,\n            },\n            styleOverrides: {\n                paper: {\n                    paddingLeft: 0,\n                    paddingRight: 0,\n                    borderRadius: \"4px\",\n                },\n            },\n        },\n        MuiDialog: {\n            defaultProps: {\n                PaperProps: {\n                    elevation: 3,\n                },\n            },\n        },\n        MuiDrawer: {\n            styleOverrides: {\n                paper: {\n                    borderStyle: \"hidden\",\n                    backgroundColor: theme.palette.background.default,\n                },\n            },\n        },\n        MuiLink: {\n            styleOverrides: {\n                root: {\n                    color: theme.palette.text.primary,\n                    \"&:hover\": {\n                        color: theme.palette.primary.main,\n                    },\n                },\n            },\n        },\n    },\n});\n\ninterface ITheme {\n    children?: JSX.Element;\n}\n\nfunction Theme({ children }: ITheme) {\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            {children}\n        </ThemeProvider>\n    );\n}\n\nexport default Theme;\n","import * as React from \"react\";\n\ninterface IGlobal {\n    children?: JSX.Element;\n}\n\nexport interface GlobalState {\n    notifications?: string[];\n    loading?: {\n        [key: string]: {\n            isLoading: boolean;\n            total?: number;\n            value?: number;\n            text?: string;\n        };\n    };\n}\n\nexport interface GlobalAction {\n    type: string;\n    payload: unknown;\n}\n\ntype LoadingPayload = {\n    name: string;\n    isLoading: boolean;\n    total?: number;\n    value?: number;\n    text?: string;\n};\n\nexport const StateContext = React.createContext<GlobalState | undefined>(\n    undefined,\n);\n\nfunction reducer(state: GlobalState, action: GlobalAction) {\n    switch (action.type) {\n        case \"loading\": {\n            const input = action.payload as LoadingPayload;\n            return {\n                ...state,\n                loading: {\n                    ...state.loading,\n                    [input.name]: {\n                        isLoading: input.isLoading,\n                        total: input.total,\n                        value: input.value,\n                        text: input.text,\n                    },\n                },\n            };\n        }\n        default:\n            return state;\n    }\n}\ninterface IActionMap {\n    updateLoading: (\n        name: string,\n        text?: string,\n        value?: number,\n        total?: number,\n    ) => void;\n}\n\nexport const DispatchContext = React.createContext<IActionMap>({\n    updateLoading: () => undefined,\n});\n\nconst initState: GlobalState = {};\n\nexport default function Global({ children }: IGlobal) {\n    // for state control\n    const [state, dispatch] = React.useReducer(reducer, initState);\n\n    const actionMap: IActionMap = {\n        updateLoading: (\n            name: string,\n            text?: string,\n            value?: number,\n            total?: number,\n        ) => {\n            if (state.loading?.[name]?.value === value) {\n                return;\n            }\n            if (!value || !total) {\n                dispatch({\n                    type: \"loading\",\n                    payload: {\n                        name: name,\n                        isLoading: false,\n                        value: 0,\n                        total: 1,\n                        text: text,\n                    },\n                });\n            } else {\n                dispatch({\n                    type: \"loading\",\n                    payload: {\n                        name: name,\n                        isLoading: true,\n                        value: value ?? 0,\n                        total: total ? total : 1,\n                        text: text,\n                    },\n                });\n            }\n        },\n    };\n\n    return (\n        <StateContext.Provider value={state}>\n            <DispatchContext.Provider value={actionMap}>\n                {children}\n            </DispatchContext.Provider>\n        </StateContext.Provider>\n    );\n}\n","import * as React from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { QueryClientProvider } from \"react-query\";\nimport { queryClient } from \"lib/react-query\";\nimport { Button } from \"@mui/material\";\nimport Theme from \"styles/Theme\";\nimport Global from \"stores/Global\";\n\ninterface IAppProvider {\n    children?: JSX.Element;\n}\n\nconst ErrorFallback = () => {\n    return (\n        <div>\n            <h2>Oops, something went wrong :( </h2>\n            <Button\n                onClick={() => window.location.assign(window.location.origin)}\n            >\n                Refresh\n            </Button>\n        </div>\n    );\n};\n\nexport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n    return (\n        <Theme>\n            <Global>\n                <ErrorBoundary FallbackComponent={ErrorFallback}>\n                    <QueryClientProvider client={queryClient}>\n                        {children}\n                    </QueryClientProvider>\n                </ErrorBoundary>\n            </Global>\n        </Theme>\n    );\n};\n","import React from \"react\";\n\ninterface IProps extends React.ComponentPropsWithoutRef<\"div\"> {\n    children: React.ReactNode;\n    /** The unique identifier of the tab. */\n    index: string | number;\n    /** The state variable passed in from the parent which is compared to the index */\n    value: string | number;\n}\n\n/**\n * A tab panel used to encapsulate different tab content.\n */\nconst TabPanel = ({ children, value, index, ...props }: IProps) => {\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...props}\n        >\n            {value === index && children}\n        </div>\n    );\n};\n\nexport default TabPanel;\n","export default __webpack_public_path__ + \"static/media/thoth-logo.1a28a729.png\";","import React from \"react\";\n\n// material ui\nimport {\n    Typography,\n    Box,\n    Paper,\n    InputBase,\n    InputBaseProps,\n} from \"@mui/material\";\nimport { SxProps } from \"@mui/system\";\n\ninterface IProps extends InputBaseProps {\n    /** The error text or default label text */\n    label?: string;\n    /** callback function when textbox ENTER is pressed */\n    onEnter?: () => void;\n    /** helper text for the search bar */\n    helpertext?: string;\n    /** if there is an error or not */\n    error?: boolean;\n    /** icon displayed on the left of the text box */\n    lefticon?: React.ReactNode;\n    /** icon displayed on the right of the text box */\n    righticon?: React.ReactNode;\n    /** Props added to the text box */\n    boxprops?: SxProps;\n}\n\n/**\n *\n */\nconst SearchBar = ({\n    onEnter,\n    label,\n    helpertext,\n    boxprops,\n    error = false,\n    lefticon,\n    righticon,\n    ...props\n}: IProps) => {\n    return (\n        <Box>\n            <Typography\n                variant={\"body1\"}\n                sx={{ color: error ? \"error.main\" : \"text.secondary\" }}\n            >\n                {label}\n            </Typography>\n            <Paper\n                variant=\"outlined\"\n                sx={{\n                    p: \"8px 4px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    borderColor: error ? \"red\" : undefined,\n                    paddingLeft: 2,\n                    paddingRight: 2,\n                    ...boxprops,\n                }}\n            >\n                {lefticon}\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder={helpertext}\n                    error={error}\n                    onChange={props.onChange}\n                    onKeyPress={ev => {\n                        if (onEnter && ev.key === \"Enter\") {\n                            onEnter();\n                            ev.preventDefault();\n                        }\n                    }}\n                    {...props}\n                />\n                {righticon}\n            </Paper>\n        </Box>\n    );\n};\n\nexport default SearchBar;\n","const useProd = true;\nexport const LOCAL_STORAGE_KEY = \"THOTH_SEARCH_ADVISE_HISTORY\";\nexport const THOTH_URL =\n    !useProd &&\n    (process.env.REACT_APP_DEPLOYMENT === \"STAGE\" ||\n        process.env.NODE_ENV === \"development\")\n        ? \"https://stage.thoth-station.ninja/api/v1\"\n        : \"https://khemenu.thoth-station.ninja/api/v1\";\n\n/**\n * used for vis-js graph render engine\n */\nexport const options = {\n    manipulation: {\n        enabled: false,\n    },\n    interaction: {\n        hover: true,\n        hoverConnectedEdges: false,\n        selectConnectedEdges: false,\n        selectable: true,\n    },\n    edges: {\n        chosen: false,\n        smooth: false,\n        color: {\n            color: \"#5c6470\",\n        },\n        arrowStrikethrough: false,\n        arrows: {\n            from: {\n                enabled: true,\n                type: \"triangle\",\n            },\n        },\n    },\n\n    nodes: {\n        chosen: false,\n        color: {\n            background: \"#5c6470\",\n            border: \"#fff\",\n            hover: {\n                background: \"#f39200\",\n                border: \"#fff\",\n            },\n        },\n        shape: \"dot\",\n        size: 10,\n        borderWidth: 2,\n        labelHighlightBold: false,\n        font: {\n            color: \"#393e46\",\n            strokeWidth: 2,\n            size: 15,\n        },\n    },\n    physics: {\n        hierarchicalRepulsion: {\n            damping: 0.1,\n            springLength: 200,\n        },\n        solver: \"hierarchicalRepulsion\",\n        minVelocity: 0.15,\n    },\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/advise/python\"][\"post\"];\ntype requestBody = path[\"requestBody\"][\"content\"][\"application/json\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\n\nexport const postAdvise = (\n    pipfile: requestBody[\"application_stack\"][\"requirements\"],\n    pipfileLock: requestBody[\"application_stack\"][\"requirements_lock\"],\n    runtime_environment: requestBody[\"runtime_environment\"],\n) => {\n    const data = {\n        application_stack: {\n            requirements: pipfile,\n            requirements_format: \"pipenv\",\n            requirements_lock: pipfileLock,\n        },\n        runtime_environment: runtime_environment,\n    };\n\n    return axios.post<requestResponseSuccess>(\n        THOTH_URL + \"/advise/python\",\n        data,\n        {\n            params: {\n                recommendation_type: \"stable\",\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/versions\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport const getPackageExists = async (name: requestParams[\"name\"]) => {\n    return axios\n        .get<requestResponseSuccess>(THOTH_URL + \"/python/package/versions\", {\n            params: {\n                name: name,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        })\n        .then(res => {\n            return res.data.versions.length > 0;\n        })\n        .catch(() => false);\n};\n","import axios from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"../../../lib/schema\";\n\ntype path = paths[\"/analyze\"][\"post\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\n\nexport const postImageAnalyze = (image: requestParams[\"image\"]) => {\n    return axios.post<requestResponseSuccess>(\n        THOTH_URL + \"/analyze\",\n        {},\n        {\n            params: {\n                image: image,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useInfiniteQuery, useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/container-images\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"];\n\nexport const getContainerImages = async (\n    page: requestParams[\"page\"] = 0,\n    per_page: requestParams[\"per_page\"] = 100,\n) => {\n    return axios.get<requestResponseSuccess>(THOTH_URL + \"/container-images\", {\n        params: {\n            page: page,\n            per_page: per_page,\n        },\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const useContainerImages = (config: { [key: string]: unknown }) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"container-images\"],\n        queryFn: () => getContainerImages(),\n    });\n};\n\nexport const useInfiniteContainerImages = (config: {\n    [key: string]: unknown;\n}) => {\n    return useInfiniteQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"container-images\"],\n        queryFn: input => {\n            return getContainerImages(input.pageParam);\n        },\n        getNextPageParam: (lastPage: AxiosResponse<requestResponseSuccess>) => {\n            return lastPage.data.container_images.length === 0\n                ? undefined\n                : lastPage.data.parameters.page + 1;\n        },\n    });\n};\n","import { Button, Grid, Typography } from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getPackageExists } from \"../api\";\n\nexport const PackageSearch = () => {\n    const navigate = useNavigate();\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [searchError, setSearchError] = useState(\"\");\n\n    const handleAnalyze = async () => {\n        // if no query\n        if (searchQuery === \"\") {\n            return;\n        }\n\n        const exists = await getPackageExists(searchQuery);\n\n        if (exists) {\n            navigate(\"/package/\" + searchQuery);\n        } else {\n            setSearchError(\"Thoth does not know about that package\");\n        }\n    };\n\n    const handleChange = (\n        e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n        setSearchQuery(e.target.value);\n        if (searchError !== \"\") {\n            setSearchError(\"\");\n        }\n    };\n\n    return (\n        <Grid container justifyContent=\"center\">\n            <Grid alignSelf=\"flex-start\" item xs={12}>\n                <Typography\n                    color=\"error\"\n                    variant=\"body1\"\n                    sx={{ minHeight: 30 }}\n                >\n                    {searchError ?? \"\"}\n                </Typography>\n            </Grid>\n            <Grid container spacing={2} item xs={12}>\n                <Grid item xs={12} md={10}>\n                    <SearchBar\n                        error={searchError !== \"\"}\n                        onChange={e => handleChange(e)}\n                        helpertext={\"Search for a Python package\"}\n                        type=\"search\"\n                        lefticon={<SearchRoundedIcon />}\n                        onEnter={handleAnalyze}\n                    />\n                </Grid>\n                <Grid item xs={12} md={2}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => handleAnalyze()}\n                        sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                    >\n                        <b>Analyze</b>\n                    </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { useMemo } from \"react\";\n\ninterface IComboBox {\n    suggestions: string[];\n    label: string;\n    help: string;\n    required: boolean;\n    error: boolean;\n    value: string | { title: string; inputValue?: string };\n    setValue: (e: { title: string; inputValue?: string } | null) => void;\n}\n\nconst filter = createFilterOptions<{ title: string; inputValue?: string }>();\n\nexport default function ComboBox({\n    suggestions,\n    label,\n    help,\n    required,\n    error,\n    value,\n    setValue,\n}: IComboBox) {\n    const suggestions_mapped = useMemo<\n        { title: string; inputValue?: string }[]\n    >(() => {\n        return suggestions.map(suggestion => {\n            return {\n                title: suggestion,\n            };\n        });\n    }, [suggestions]);\n\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(event, newValue) => {\n                if (typeof newValue === \"string\") {\n                    setValue({ title: newValue });\n                } else if (newValue && newValue.inputValue) {\n                    // Create a new value from the user input\n                    setValue({ title: newValue.inputValue });\n                } else {\n                    setValue(newValue);\n                }\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n\n                if (params.inputValue !== \"\") {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        title: `Add \"${params.inputValue}\"`,\n                    });\n                }\n\n                return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            id=\"free-solo-with-text-demo\"\n            options={suggestions_mapped ?? []}\n            getOptionLabel={option => {\n                // Value selected with enter, right from the input\n                if (typeof option === \"string\") {\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    return option.inputValue;\n                }\n                // Regular option\n                return option.title;\n            }}\n            renderOption={(props, option) => <li {...props}>{option.title}</li>}\n            freeSolo\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    fullWidth\n                    label={label}\n                    required={required}\n                    error={error}\n                    helperText={help}\n                />\n            )}\n        />\n    );\n}\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\nimport Paper from \"@mui/material/Paper\";\nimport ArrowForwardRoundedIcon from \"@mui/icons-material/ArrowForwardRounded\";\nimport { IconButton } from \"@mui/material\";\nimport { CircularProgress } from \"@mui/material\";\n\nfunction descendingComparator(\n    a: { [key: string]: any },\n    b: { [key: string]: any },\n    orderBy: string,\n) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order: \"desc\" | \"asc\", orderBy: string) {\n    return order === \"desc\"\n        ? (a: { [key: string]: any }, b: { [key: string]: any }) =>\n              descendingComparator(a, b, orderBy)\n        : (a: { [key: string]: any }, b: { [key: string]: any }) =>\n              -descendingComparator(a, b, orderBy);\n}\n\ninterface IGenericTable {\n    headers: {\n        id: string;\n        label: string;\n    }[];\n    rows: { [key: string]: unknown }[];\n    action?: (row: any) => void;\n}\n\ninterface IEnhancedTableHead {\n    order: \"asc\" | \"desc\";\n    orderBy: IGenericTable[\"headers\"][number][\"id\"];\n    onRequestSort: (property: IGenericTable[\"headers\"][number][\"id\"]) => void;\n    rowCount: number;\n    headers: IGenericTable[\"headers\"];\n}\n\nfunction EnhancedTableHead(props: IEnhancedTableHead) {\n    const { order, orderBy, onRequestSort, headers } = props;\n    const createSortHandler = (property: typeof headers[number][\"id\"]) => {\n        onRequestSort(property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headers.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={() => createSortHandler(headCell.id)}\n                        >\n                            <b>{headCell.label}</b>\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                <TableCell />\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default function GenericTable({ headers, rows, action }: IGenericTable) {\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState<typeof headers[number][\"id\"]>(\n        headers[0].id,\n    );\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleRequestSort = (property: typeof headers[number][\"id\"]) => {\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n        setOrderBy(property);\n    };\n\n    const handleChangePage = (\n        event: any,\n        newPage: React.SetStateAction<number>,\n    ) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: { target: { value: string } }) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows =\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    if (!rows) {\n        return (\n            <div className=\"w-full h-48 flex justify-center items-center\">\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    return (\n        <Box sx={{ width: \"100%\" }}>\n            <Paper sx={{ width: \"100%\", mb: 2 }} variant=\"outlined\">\n                <TableContainer>\n                    <Table sx={{ minWidth: 750 }} size=\"medium\">\n                        <EnhancedTableHead\n                            order={order as IEnhancedTableHead[\"order\"]}\n                            orderBy={orderBy}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                            headers={headers}\n                        />\n                        <TableBody>\n                            {rows\n                                .slice()\n                                .sort(\n                                    getComparator(\n                                        order as IEnhancedTableHead[\"order\"],\n                                        orderBy,\n                                    ),\n                                )\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage,\n                                )\n                                .map((row, index) => {\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            tabIndex={-1}\n                                            key={labelId}\n                                        >\n                                            {headers.map((header, j) => {\n                                                if (j === 0) {\n                                                    return (\n                                                        <TableCell\n                                                            component=\"th\"\n                                                            id={labelId}\n                                                            scope=\"row\"\n                                                            key={header.id + j}\n                                                        >\n                                                            {\n                                                                row[\n                                                                    header.id\n                                                                ] as string\n                                                            }\n                                                        </TableCell>\n                                                    );\n                                                } else {\n                                                    return (\n                                                        <TableCell\n                                                            key={header.id + j}\n                                                            align=\"left\"\n                                                        >\n                                                            {\n                                                                row[\n                                                                    header.id\n                                                                ] as string\n                                                            }\n                                                        </TableCell>\n                                                    );\n                                                }\n                                            })}\n\n                                            {action ? (\n                                                <TableCell align=\"right\">\n                                                    <IconButton\n                                                        onClick={() =>\n                                                            action(row)\n                                                        }\n                                                    >\n                                                        <ArrowForwardRoundedIcon />\n                                                    </IconButton>\n                                                </TableCell>\n                                            ) : undefined}\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow\n                                    style={{\n                                        height: 53 * emptyRows,\n                                    }}\n                                >\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 50]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </Box>\n    );\n}\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQueries, useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/dependencies\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageDependencies = (\n    name: requestParams[\"name\"],\n    version: requestParams[\"version\"],\n    index: requestParams[\"index\"] = \"https://pypi.org/simple\",\n) => {\n    return axios.get<requestResponseSuccess>(\n        THOTH_URL + \"/python/package/dependencies\",\n        {\n            params: {\n                name: name,\n                version: version,\n                index: index,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageDependencies = (\n    name: requestParams[\"name\"],\n    version: requestParams[\"version\"],\n    config: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"packageDependencies\", name, version],\n        queryFn: () => getPackageDependencies(name, version),\n    });\n};\n\nexport const usePackagesDependencies = (\n    packages: {\n        name: requestParams[\"name\"];\n        version: requestParams[\"version\"];\n    }[],\n    config: { [key: string]: unknown },\n) => {\n    return useQueries(\n        packages.map(p => {\n            return {\n                ...config,\n                queryKey: [\"packageDependencies\", p.name, p.version],\n                queryFn: () => getPackageDependencies(p.name, p.version),\n            };\n        }),\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQueries, useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\nimport { UseQueryResult } from \"react-query/types/react/types\";\n\ntype path = paths[\"/advise/python/{analysis_id}\"][\"get\"];\nexport type AdviseDocumentRequestParams = path[\"parameters\"][\"path\"];\nexport type AdviseDocumentRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n/**\n * An async function that returns a promise for `{base_url}/advise/python`\n *\n * @param analysis_id - the advise document id (ex: `adviser-211112223258-38af1a4746733b53`)\n */\nexport const getAdviseDocument = (\n    analysis_id?: AdviseDocumentRequestParams[\"analysis_id\"],\n) => {\n    return axios.get<AdviseDocumentRequestResponseSuccess>(\n        THOTH_URL + \"/advise/python/\" + analysis_id,\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useAdviseDocument = (\n    analysis_id?: AdviseDocumentRequestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n): UseQueryResult<\n    AxiosResponse<AdviseDocumentRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n> => {\n    return useQuery({\n        ...config,\n        enabled: !!analysis_id && analysis_id.startsWith(\"adviser\"),\n        queryKey: [\"adviseDocument\", analysis_id],\n        queryFn: () => getAdviseDocument(analysis_id),\n    });\n};\n\nexport const useAdviseDocuments = (\n    analysis_ids: AdviseDocumentRequestParams[\"analysis_id\"][],\n    config?: { [key: string]: unknown },\n): UseQueryResult<\n    AxiosResponse<AdviseDocumentRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n>[] => {\n    return useQueries(\n        analysis_ids.map(id => {\n            return {\n                ...config,\n                queryKey: [\"adviseDocument\", id],\n                queryFn: () => getAdviseDocument(id),\n            };\n        }),\n    ) as UseQueryResult<\n        AxiosResponse<AdviseDocumentRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >[];\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/advise/python/{analysis_id}/log\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n/**\n * An async function that returns a promise for `{base_url}/advise/python/logs`\n *\n * @param analysis_id - the advise document id (ex: `adviser-211112223258-38af1a4746733b53`)\n */\nexport const getAdviseLogs = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get<requestResponseSuccess>(\n        THOTH_URL + \"/advise/python/\" + analysis_id + \"/log\",\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useAdviseLogs = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        queryKey: [\"adviseLogs\", analysis_id],\n        queryFn: () => getAdviseLogs(analysis_id),\n    });\n};\n","/**\n * Get the time between now and a date in a string format.\n *\n * @param date\n */\nexport default function timeSince(date: Date) {\n    const startTime = new Date();\n    const seconds = Math.floor((startTime.valueOf() - date.valueOf()) / 1000);\n\n    let interval = seconds / 3.154e7;\n\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" year\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 2.628e6;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" month\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 86400;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" day\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 3600;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" hour\" + (num !== 1 ? \"s\" : \"\");\n    }\n    interval = seconds / 60;\n    if (interval > 1) {\n        const num = Math.floor(interval);\n        return num + \" minute\" + (num !== 1 ? \"s\" : \"\");\n    }\n    const num = Math.floor(seconds);\n\n    return num + \" second\" + (num !== 1 ? \"s\" : \"\");\n}\n","import timeSince from \"utils/timeSince\";\n\n/**\n * Given either a date and time, calculated time since that date.\n * This is used to calculate how long ago an Advisor document was generated or has been generating.\n * It is specific to the document formatting\n *\n * @param finished_at - for when the advise document is completed\n * @param started_at - the time at which the document was started (is preceded by finished at)\n * @param datetime - fallback to datetime\n * @returns {string} - English version of date\n */\nexport const calcTime = (\n    finished_at?: string | null,\n    started_at?: string | null,\n    datetime?: string | null,\n) => {\n    // if status says finished\n    if (finished_at) {\n        return \"Advise finished \" + timeSince(new Date(finished_at)) + \" ago.\";\n    }\n    // if status is pending\n    else if (started_at) {\n        return \"Advise started \" + timeSince(new Date(started_at)) + \" ago.\";\n    }\n    // if status is nulled so use metadata end date\n    else if (datetime) {\n        return (\n            \"Advise finished \" + timeSince(new Date(datetime + \"Z\")) + \" ago.\"\n        );\n    } else {\n        return \"Time started/finished not available\";\n    }\n};\n","import {\n    Button,\n    Collapse,\n    Grid,\n    Paper,\n    TextField,\n    Typography,\n} from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport React, { useMemo, useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { postAdvise } from \"../api\";\nimport ComboBox from \"./ComboBox/ComboBox\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport { components } from \"lib/schema\";\nimport GenericTable from \"../../../components/Elements/GenericTable/GenericTable\";\nimport { useAdviseDocuments } from \"../../advise/api\";\nimport { LOCAL_STORAGE_KEY } from \"../../../config\";\nimport { calcTime } from \"../../../utils/calcTime\";\n\ninterface IAdviseState {\n    error: { [key: string]: string | undefined };\n    id?: string;\n    pipfile?: string;\n    pipfileLock?: string;\n    loading: boolean;\n    lookupType: string;\n    operating_system_name: string;\n    operating_system_version: string;\n    python_version: string;\n    cuda_version: string;\n    cudnn_version: string;\n    mkl_version: string;\n    name: string;\n    openblas_version: string;\n    openmpi_version: string;\n    base_image: string;\n}\n\nfunction reducer(state: IAdviseState, action: { [key: string]: any }) {\n    switch (action.type) {\n        case \"loading\":\n            return { ...state, loading: action.payload };\n        case \"error\":\n            return {\n                ...state,\n                error: { ...state.error, [action.param]: action.payload },\n            };\n        case \"clear-error\":\n            state.error = {};\n            return state;\n        case \"input\":\n            return {\n                ...state,\n                [action.param]: action.payload,\n                error: { ...state.error, [action.param]: undefined },\n            };\n        default:\n            throw new Error(\"Advise state dispatch error\");\n    }\n}\n\nconst headCells = [\n    {\n        id: \"document_id\",\n        label: \"Document ID\",\n    },\n    {\n        id: \"status\",\n        label: \"Status\",\n    },\n    {\n        id: \"name\",\n        label: \"Name\",\n    },\n    {\n        id: \"os_name\",\n        label: \"OS Name\",\n    },\n    {\n        id: \"os_version\",\n        label: \"OS Version\",\n    },\n    {\n        id: \"python_version\",\n        label: \"Python Version\",\n    },\n    {\n        id: \"date\",\n        label: \"Last Run\",\n    },\n];\n\nexport const initState: IAdviseState = {\n    error: {},\n    loading: false,\n    lookupType: \"id\",\n    operating_system_name: \"ubi\",\n    operating_system_version: \"8\",\n    python_version: \"3.8\",\n    cuda_version: \"\",\n    cudnn_version: \"\",\n    mkl_version: \"\",\n    name: \"\",\n    openblas_version: \"\",\n    openmpi_version: \"\",\n    base_image: \"\",\n};\n\nexport const AdviseCreation = () => {\n    const navigate = useNavigate();\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    const localHistory: string[] = useMemo(() => {\n        const ids = localStorage.getItem(LOCAL_STORAGE_KEY);\n        if (ids) {\n            return ids.split(\",\").filter(s => s !== \"\");\n        } else {\n            return [];\n        }\n    }, []);\n\n    const adviseHistory = useAdviseDocuments(localHistory);\n\n    const rows = useMemo(() => {\n        if (adviseHistory) {\n            return adviseHistory.map(doc => {\n                const status = () => {\n                    if (doc.data?.data?.status) {\n                        return doc.data?.data?.status.state;\n                    } else if (doc.data?.data.result.report?.products) {\n                        return \"success\";\n                    } else {\n                        return \"error\";\n                    }\n                };\n                return {\n                    document_id: doc.data?.data?.metadata?.document_id,\n                    name: doc.data?.data?.result?.report?.products?.[0].project\n                        .runtime_environment?.name,\n                    os_name:\n                        doc.data?.data?.result?.report?.products?.[0].project\n                            .runtime_environment?.operating_system?.name,\n                    os_version:\n                        doc.data?.data?.result?.report?.products?.[0].project\n                            .runtime_environment?.operating_system?.version,\n                    python_version:\n                        doc.data?.data?.result?.report?.products?.[0].project\n                            .runtime_environment?.python_version,\n                    status: status(),\n                    date: calcTime(\n                        doc.data?.data?.status?.finished_at,\n                        doc.data?.data?.status?.started_at,\n                        doc.data?.data?.metadata?.datetime,\n                    ),\n                };\n            });\n        } else {\n            return [];\n        }\n    }, [adviseHistory]);\n\n    const tableRowAction = (row: { document_id: string }) => {\n        navigate(\"/advise/\" + row.document_id);\n    };\n\n    const isValid = () => {\n        if (state.lookupType === \"id\") {\n            if (!state.id || state.id === \"\") {\n                dispatch({\n                    type: \"error\",\n                    param: \"id\",\n                    payload: \"Field cant be empty\",\n                });\n                return false;\n            }\n        } else {\n            let valid = true;\n            if (!state.pipfile) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfile\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n            if (!state.pipfileLock) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfileLock\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n            if (!state.name) {\n                valid = false;\n                dispatch({\n                    type: \"error\",\n                    param: \"name\",\n                    payload: \"Field cant be empty\",\n                });\n            }\n\n            return valid;\n        }\n\n        return true;\n    };\n\n    const handleAnalyze = async () => {\n        if (state.loading || !isValid()) {\n            return;\n        }\n\n        if (state.lookupType === \"id\") {\n            navigate(\"/advise/\" + state.id);\n        } else {\n            dispatch({ type: \"loading\", payload: true });\n            const runtime_environment: components[\"schemas\"][\"RuntimeEnvironment\"] =\n                {\n                    operating_system: {\n                        name: state.operating_system_name,\n                        version: state.operating_system_version,\n                    },\n                    python_version: state.python_version,\n                    base_image: state.base_image,\n                    cuda_version: state.cuda_version,\n                    cudnn_version: state.cudnn_version,\n                    mkl_version: state.mkl_version,\n                    name: state.name,\n                    openblas_version: state.openblas_version,\n                    openmpi_version: state.openmpi_version,\n                };\n\n            (\n                Object.keys(runtime_environment) as Array<\n                    keyof typeof runtime_environment\n                >\n            ).forEach(key => {\n                if (runtime_environment[key] === \"\") {\n                    delete runtime_environment[key];\n                }\n            });\n            if (\n                runtime_environment?.[\"operating_system\"]?.[\"name\"] === \"\" ||\n                runtime_environment?.[\"operating_system\"]?.[\"version\"] === \"\"\n            ) {\n                delete runtime_environment[\"operating_system\"];\n            }\n\n            if (!state.pipfile) {\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfile\",\n                    payload: \"Pipfile is required\",\n                });\n            } else if (!state.pipfileLock) {\n                dispatch({\n                    type: \"error\",\n                    param: \"pipfileLock\",\n                    payload: \"Pipfile.lock is required\",\n                });\n            } else {\n                postAdvise(\n                    state.pipfile,\n                    state.pipfileLock,\n                    runtime_environment,\n                )\n                    .then(response => {\n                        dispatch({ type: \"loading\", payload: false });\n                        navigate(\n                            \"/advise/\" + response.data.analysis_id + \"/summary\",\n                        );\n                    })\n                    .catch(error => {\n                        dispatch({ type: \"loading\", payload: false });\n                        if (error?.response?.status === 400) {\n                            if (\n                                error?.response?.data?.error?.includes(\n                                    \"Pipfile.lock\",\n                                )\n                            ) {\n                                dispatch({\n                                    type: \"error\",\n                                    param: \"pipfileLock\",\n                                    payload: error?.response?.data?.error,\n                                });\n                            } else if (\n                                error?.response?.data?.error?.includes(\n                                    \"Pipfile\",\n                                )\n                            ) {\n                                dispatch({\n                                    type: \"error\",\n                                    param: \"pipfile\",\n                                    payload: error?.response?.data?.error,\n                                });\n                            }\n                        }\n                    });\n            }\n        }\n    };\n\n    return (\n        <>\n            <Collapse in={state.lookupType === \"id\"}>\n                <>\n                    <Grid container justifyContent=\"center\">\n                        <Grid item xs={12}>\n                            <Typography\n                                color=\"error\"\n                                variant=\"body1\"\n                                sx={{ minHeight: 30 }}\n                            >\n                                {state.error?.id}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing={2}>\n                            <Grid item xs={12} md={10}>\n                                <SearchBar\n                                    error={state.error?.id !== undefined}\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"id\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    helpertext={\"Analysis ID\"}\n                                    type=\"search\"\n                                    boxprops={{ marginRight: 2 }}\n                                    lefticon={<SearchRoundedIcon />}\n                                    onEnter={handleAnalyze}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={2}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => handleAnalyze()}\n                                    sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                                >\n                                    <b>Analyze</b>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"manual\",\n                            })\n                        }\n                    >\n                        New Advise\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"history\",\n                            })\n                        }\n                    >\n                        History\n                    </Button>\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"history\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Local Thoth Advise History\n                    </Typography>\n                    <GenericTable\n                        headers={headCells}\n                        rows={rows}\n                        action={tableRowAction}\n                    />\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"manual\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Advise Parameters\n                    </Typography>\n                    <Paper\n                        sx={{\n                            backgroundColor: \"white\",\n                            padding: 3,\n                            marginBottom: 5,\n                        }}\n                        variant=\"outlined\"\n                    >\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <SearchBar\n                                    label={\n                                        state.error?.pipfile\n                                            ? state.error?.pipfile\n                                            : \"Pipfile contents\"\n                                    }\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"pipfile\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    error={state.error?.pipfile !== undefined}\n                                    multiline\n                                    rows={8}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <SearchBar\n                                    label={\n                                        state.error?.pipfileLock\n                                            ? state.error?.pipfileLock\n                                            : \"Pipfile.lock contents\"\n                                    }\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"pipfileLock\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    error={\n                                        state.error?.pipfileLock !== undefined\n                                    }\n                                    multiline\n                                    rows={8}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Grid container mt={4} spacing={2}>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"base_image\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.base_image}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Base Image\"\n                                    required={false}\n                                    helperText=\"A base container image used to run the application.\"\n                                    error={\n                                        state.error?.base_image !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"cuda_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.cuda_version}\n                                    suggestions={[\"9.0\"]}\n                                    label=\"CUDA Version\"\n                                    required={false}\n                                    help=\"Nvidia CUDA version which the application uses.\"\n                                    error={\n                                        state.error?.cuda_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"cudnn_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.cudnn_version}\n                                    suggestions={[\"8\"]}\n                                    label=\"cuDNN Version\"\n                                    required={false}\n                                    help=\"NVIDIA cuDNN version used, if any.\"\n                                    error={\n                                        state.error?.cudnn_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"mkl_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.mkl_version}\n                                    suggestions={[\"2021.1.1\"]}\n                                    label=\"MKL Version\"\n                                    required={false}\n                                    help=\"Intel® Math Kernel Library version used, if any.\"\n                                    error={\n                                        state.error?.mkl_version !== undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"name\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.name}\n                                    suggestions={[\"ubi:8-prod\"]}\n                                    label=\"Name\"\n                                    required={true}\n                                    help=\"User defined name of the runtime environment.\"\n                                    error={state.error?.name !== undefined}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"openblas_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.openblas_version}\n                                    suggestions={[\"0.3.13\"]}\n                                    label=\"OpenBLAS Version\"\n                                    required={false}\n                                    help=\"OpenBLAS version used, if any.\"\n                                    error={\n                                        state.error?.openblas_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"openmpi_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.openmpi_version}\n                                    suggestions={[\"4.1\"]}\n                                    label=\"Open MPI Version\"\n                                    required={false}\n                                    help=\"Open MPI version used, if any.\"\n                                    error={\n                                        state.error?.openmpi_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"operating_system_name\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.operating_system_name}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Operating System Name\"\n                                    required={false}\n                                    helperText=\"Operating system name used.\"\n                                    error={\n                                        state.error?.operating_system_name !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <TextField\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"operating_system_version\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    value={state.operating_system_version}\n                                    sx={{ minWidth: \"100%\" }}\n                                    label=\"Operating System Version\"\n                                    required={false}\n                                    helperText=\"Operating system version used.\"\n                                    error={\n                                        state.error\n                                            ?.operating_system_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6} md={4}>\n                                <ComboBox\n                                    setValue={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"python_version\",\n                                            payload: e?.title ?? \"\",\n                                        })\n                                    }\n                                    value={state.python_version}\n                                    suggestions={[\n                                        \"2.7\",\n                                        \"3.6\",\n                                        \"3.7\",\n                                        \"3.8\",\n                                        \"3.9\",\n                                    ]}\n                                    label=\"Python Version\"\n                                    required={false}\n                                    help=\"Python version on which the application runs on.\"\n                                    error={\n                                        state.error?.python_version !==\n                                        undefined\n                                    }\n                                />\n                            </Grid>\n                            <Grid container item xs={12} spacing={2}>\n                                <Grid item xs={6} md={6}>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        onClick={() =>\n                                            dispatch({\n                                                type: \"input\",\n                                                param: \"lookupType\",\n                                                payload: \"id\",\n                                            })\n                                        }\n                                        sx={{\n                                            minHeight: \"100%\",\n                                            minWidth: \"100%\",\n                                        }}\n                                    >\n                                        <b>Cancel</b>\n                                    </Button>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <LoadingButton\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => handleAnalyze()}\n                                        loading={state.loading}\n                                        sx={{\n                                            minHeight: \"100%\",\n                                            minWidth: \"100%\",\n                                        }}\n                                    >\n                                        <b>Analyze</b>\n                                    </LoadingButton>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </>\n            </Collapse>\n        </>\n    );\n};\n","import { Button, Collapse, Grid, Typography } from \"@mui/material\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport React, { useMemo, useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { postImageAnalyze, useContainerImages } from \"../api\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport GenericTable from \"components/Elements/GenericTable/GenericTable\";\nimport timeSince from \"utils/timeSince\";\n\ninterface ImageSearchState {\n    error: { [key: string]: string | undefined };\n    loading: boolean;\n    lookupType: string;\n    id: string;\n}\n\nfunction reducer(state: ImageSearchState, action: { [key: string]: any }) {\n    switch (action.type) {\n        case \"loading\":\n            return { ...state, loading: action.payload };\n        case \"error\":\n            return {\n                ...state,\n                error: { ...state.error, [action.param]: action.payload },\n            };\n        case \"clear-error\":\n            state.error = {};\n            return state;\n        case \"input\":\n            return {\n                ...state,\n                [action.param]: action.payload,\n                error: { ...state.error, [action.param]: undefined },\n            };\n        default:\n            throw new Error(\"Image state dispatch error\");\n    }\n}\n\nconst headCells = [\n    {\n        id: \"environment_name\",\n        label: \"Image Name\",\n    },\n    {\n        id: \"os_name\",\n        label: \"OS Name\",\n    },\n    {\n        id: \"os_version\",\n        label: \"OS Version\",\n    },\n    {\n        id: \"python_version\",\n        label: \"Python Version\",\n    },\n    {\n        id: \"date\",\n        label: \"Last Updated\",\n    },\n];\n\nconst initState: ImageSearchState = {\n    error: {},\n    loading: false,\n    lookupType: \"id\",\n    id: \"\",\n};\n\nexport const ImageSearch = () => {\n    const navigate = useNavigate();\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    const images = useContainerImages({ useErrorBoundary: false });\n\n    const rows = useMemo(() => {\n        if (images?.data?.data?.container_images) {\n            return images?.data?.data?.container_images.map(image => {\n                return {\n                    ...image,\n                    date: timeSince(new Date(image.datetime)) + \" ago\",\n                };\n            });\n        } else {\n            return [];\n        }\n    }, [images?.data]);\n\n    const tableRowAction = (row: {\n        package_extract_document_id: string;\n        environment_name: string;\n    }) => {\n        navigate(\"/image/\" + row.package_extract_document_id, {\n            state: { image_name: row.environment_name },\n        });\n    };\n\n    const handleAnalyze = async () => {\n        if (state.loading) {\n            return;\n        }\n\n        if (state.id.includes(\"package-extract\")) {\n            navigate(\"/image/\" + state.id);\n            return;\n        }\n\n        dispatch({ type: \"loading\", payload: true });\n\n        postImageAnalyze(state.id)\n            .then(response => {\n                dispatch({ type: \"loading\", payload: false });\n                navigate(\"/image/\" + response.data.analysis_id, {\n                    state: { image_name: state.id },\n                });\n            })\n            .catch(error => {\n                dispatch({ type: \"loading\", payload: false });\n                if (error?.response?.status === 400) {\n                    dispatch({\n                        type: \"error\",\n                        param: \"id\",\n                        payload:\n                            error?.response?.data?.error ??\n                            \"An unknown error occurred\",\n                    });\n                }\n            });\n    };\n\n    return (\n        <>\n            <Collapse in={state.lookupType === \"id\"}>\n                <>\n                    <Grid container justifyContent=\"center\">\n                        <Grid item xs={12}>\n                            <Typography\n                                color=\"error\"\n                                variant=\"body1\"\n                                sx={{ minHeight: 30 }}\n                            >\n                                {state.error?.id}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing={2}>\n                            <Grid item xs={12} md={10}>\n                                <SearchBar\n                                    error={state.error?.id != undefined}\n                                    onChange={e =>\n                                        dispatch({\n                                            type: \"input\",\n                                            param: \"id\",\n                                            payload: e.target.value,\n                                        })\n                                    }\n                                    helpertext={\"Analysis ID or image name\"}\n                                    type=\"search\"\n                                    boxprops={{ mr: 2 }}\n                                    lefticon={<SearchRoundedIcon />}\n                                    onEnter={handleAnalyze}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={2}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={handleAnalyze}\n                                    sx={{ minHeight: \"100%\", minWidth: \"100%\" }}\n                                >\n                                    <b>Analyze</b>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        onClick={() =>\n                            dispatch({\n                                type: \"input\",\n                                param: \"lookupType\",\n                                payload: \"lookup\",\n                            })\n                        }\n                    >\n                        Lookup Thoth Images\n                    </Button>\n                </>\n            </Collapse>\n\n            <Collapse in={state.lookupType === \"lookup\"}>\n                <>\n                    <Typography variant={\"h6\"} mt={3} mb={1} ml={2}>\n                        Available Thoth Container Images\n                    </Typography>\n                    <GenericTable\n                        headers={headCells}\n                        rows={rows}\n                        action={tableRowAction}\n                    />\n                </>\n            </Collapse>\n        </>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/footer-logo.7d0f9037.png\";","import React from \"react\";\n\nimport { Box, Link, Paper, Stack, Typography } from \"@mui/material\";\nimport logo from \"assets/footer-logo.png\";\n\nexport const Footer = () => {\n    return (\n        <Paper\n            variant=\"outlined\"\n            sx={{ padding: 4, marginTop: 10, marginBottom: 5 }}\n        >\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"flex-start\">\n                <img\n                    style={{ paddingLeft: 2, paddingRight: 2, height: \"40px\" }}\n                    alt=\"Red Hat Sponsor Logo\"\n                    src={logo}\n                />\n                <Stack sx={{ paddingX: 2 }}>\n                    <Typography\n                        sx={{\n                            textTransform: \" uppercase\",\n                            paddingBottom: \"20px\",\n                        }}\n                        variant=\"h6\"\n                    >\n                        Useful links\n                    </Typography>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://github.com/orgs/thoth-station/projects/\"\n                    >\n                        GitHub project board\n                    </Link>\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"http://bit.ly/thoth-on-youtube\"\n                    >\n                        YouTube channel\n                    </Link>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://twitter.com/ThothStation\"\n                    >\n                        Twitter\n                    </Link>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://github.com/thoth-station\"\n                    >\n                        GitHub organization\n                    </Link>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://www.kaggle.com/thothstation\"\n                    >\n                        Kaggle datasets\n                    </Link>\n                </Stack>\n\n                <Stack sx={{ paddingX: 2 }}>\n                    <Typography\n                        sx={{\n                            textTransform: \" uppercase\",\n                            paddingBottom: \"20px\",\n                        }}\n                        variant=\"h6\"\n                    >\n                        Info\n                    </Typography>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://thoth-station.ninja/docs/developers/adviser/landing_page.html#landing-page\"\n                    >\n                        Thoth&apos;s landing page\n                    </Link>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://thoth-station.ninja/docs/developers/adviser/\"\n                    >\n                        Main documentation page\n                    </Link>\n                </Stack>\n\n                <Stack sx={{ paddingX: 2 }}>\n                    <Typography\n                        sx={{\n                            textTransform: \" uppercase\",\n                            paddingBottom: \"20px\",\n                        }}\n                        variant=\"h6\"\n                    >\n                        Friends\n                    </Typography>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://github.com/AICoE/aicoe-ci\"\n                    >\n                        AICoE-CI\n                    </Link>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"https://www.operate-first.cloud/\"\n                    >\n                        Operate First\n                    </Link>\n\n                    <Link\n                        underline=\"hover\"\n                        sx={{ paddingBottom: 1 }}\n                        href=\"http://opendatahub.io/\"\n                    >\n                        Open Data Hub\n                    </Link>\n                </Stack>\n            </Box>\n        </Paper>\n    );\n};\n","// react\nimport React, { useState } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Grid,\n    Divider,\n    ToggleButtonGroup,\n    ToggleButton,\n    Box,\n} from \"@mui/material\";\n\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\n// local\nimport TabPanel from \"components/Elements/TabPanel\";\nimport logo from \"assets/thoth-logo.png\";\n\nimport { PackageSearch, AdviseCreation, ImageSearch } from \"../components\";\nimport { Footer } from \"../../../components/Footer\";\n\nexport const Home = () => {\n    // utility states\n    const [mode, setMode] = useState<string>(\"package\");\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n\n    // change mode view\n    const handleMode = (event: any, newMode: string) => {\n        if (newMode) {\n            setMode(newMode);\n        }\n    };\n\n    return (\n        <Grid\n            container\n            justifyContent=\"center\"\n            sx={{ paddingX: 2, maxWidth: \"1000px\", margin: \"auto\" }}\n        >\n            <Grid item>\n                <Box sx={{ marginTop: 10 }}>\n                    <img\n                        alt=\"Thoth Logo\"\n                        src={logo}\n                        height={!matches ? \"auto\" : 300}\n                        width={\"100%\"}\n                    />\n                </Box>\n            </Grid>\n            <Grid container item justifyContent=\"center\" mt={5} spacing={0}>\n                <Grid item xs={12} alignItems=\"left\" mb={3}>\n                    <Typography variant=\"h4\">\n                        <b>Thoth Search</b>\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} alignItems=\"left\">\n                    <Typography variant=\"subtitle1\">\n                        Thoth Search is a tool that runs analysis on a Python\n                        application. It utilizes package metadata and Thoth\n                        Adviser to analyse and recommend a software stack. You\n                        can run analysis on an entire Python application using a\n                        properly formatted Pipfile and Pipfile.lock.\n                        Alternatively, you can analyse a single Python package\n                        to see what Thoth knows about the package.\n                    </Typography>\n                </Grid>\n                <Grid item textAlign=\"center\" xs={12} mt={3} mb={4}>\n                    <ToggleButtonGroup\n                        value={mode}\n                        exclusive\n                        onChange={handleMode}\n                        size={!matches ? \"small\" : \"large\"}\n                    >\n                        <ToggleButton value=\"package\">\n                            <b>package</b>\n                        </ToggleButton>\n                        <ToggleButton value=\"environment\">\n                            <b>environment</b>\n                        </ToggleButton>\n                        <ToggleButton value=\"image\">\n                            <b>image</b>\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </Grid>\n\n                <Grid item xs={12} sx={{ marginBottom: 3 }}>\n                    <Divider />\n                    <TabPanel value={mode} index=\"package\">\n                        <PackageSearch />\n                    </TabPanel>\n                    <TabPanel value={mode} index=\"environment\">\n                        <AdviseCreation />\n                    </TabPanel>\n                    <TabPanel value={mode} index=\"image\">\n                        <ImageSearch />\n                    </TabPanel>\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Footer />\n            </Grid>\n        </Grid>\n    );\n};\n","import React from \"react\";\n\nexport const NotFound = () => {\n    return <div>404</div>;\n};\n","// react\nimport React from \"react\";\n\ninterface IProps {\n    /** card header info */\n    cardMeta: {\n        /** card title */\n        title: string;\n        /** optional subtitle */\n        subTitle?: string;\n    };\n    /** optional card action component (usually some button) */\n    cardAction?: React.ReactNode;\n    /** Card body content */\n    cardBody: React.ReactNode;\n}\nimport { Card, CardContent, CardHeader, Typography } from \"@mui/material\";\n\n/** Card template for metric cards. */\nconst InfoCard = ({ cardMeta, cardBody, cardAction }: IProps) => {\n    return (\n        <Card variant=\"outlined\" sx={{ margin: 0 }}>\n            <CardHeader\n                action={cardAction}\n                title={<Typography variant=\"h5\">{cardMeta.title}</Typography>}\n                subheader={cardMeta.subTitle}\n            />\n            <CardContent>{cardBody}</CardContent>\n        </Card>\n    );\n};\n\nexport default InfoCard;\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { LinearProgress, Typography, Grid } from \"@mui/material\";\nimport { GridProps } from \"@mui/material/Grid/Grid\";\n\ninterface IProps extends GridProps {\n    /** the amount (numerator) for the bar */\n    value: number;\n    /** the total (denominator) for the bar */\n    total: number;\n    /** optional label */\n    label?: string;\n    /** action used on card */\n    action?: JSX.Element;\n}\n\n/**\n * A horizontal bar for showing a percent of a total.\n */\nconst ProgressBar = ({ value, total, label, action, ...props }: IProps) => {\n    return (\n        <Grid container spacing={1} alignItems=\"center\" {...props}>\n            <Grid item xs={5}>\n                <Typography variant=\"body2\">{label}</Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <Typography variant=\"body2\">{value}</Typography>\n            </Grid>\n            <Grid item xs>\n                <LinearProgress\n                    variant=\"determinate\"\n                    value={total > 0 ? (value / total) * 100 : 0}\n                    sx={{\n                        root: {\n                            height: 10,\n                            borderRadius: 5,\n                        },\n                        colorPrimary: {\n                            backgroundColor: \"theme.palette.grey[200]\",\n                        },\n                        bar: {\n                            borderRadius: 5,\n                            backgroundColor: \"#1a90ff\",\n                        },\n                    }}\n                />\n            </Grid>\n            <Grid item xs={1}>\n                <div>{action ?? null}</div>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ProgressBar;\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { TransitionGroup } from \"react-transition-group\";\n\nimport {\n    Typography,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    Grid,\n    Collapse,\n    Box,\n    Skeleton,\n} from \"@mui/material\";\n\nimport { DependencyMetricType } from \"hooks/metrics\";\nimport ProgressBar from \"components/Elements/ProgressBar\";\n\ninterface IDependenciesMetric {\n    metric: DependencyMetricType | null;\n}\n\n/**\n * A metric card that displays direct, indirect, and root packages of a dependency graph.\n */\nexport const DependenciesMetric = ({ metric }: IDependenciesMetric) => {\n    const totalDependencies =\n        (metric?.all?.direct ?? 0) +\n        (metric?.all?.indirect ?? 0) +\n        (metric?.all?.roots ?? 0);\n\n    if (!metric?.all || !metric?.roots) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                All Packages\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <ProgressBar\n                value={metric?.all?.roots ?? 0}\n                total={totalDependencies}\n                label={\"Root\"}\n                mb={1}\n            />\n            <ProgressBar\n                value={metric?.all?.direct ?? 0}\n                total={totalDependencies}\n                label={\"Direct\"}\n                mb={1}\n            />\n            <ProgressBar\n                value={metric?.all?.indirect ?? 0}\n                total={totalDependencies}\n                label={\"Indirect\"}\n            />\n            <Typography variant=\"h6\" gutterBottom mt={2}>\n                Root Packages\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <List component=\"nav\">\n                <TransitionGroup>\n                    {Object.entries(metric?.roots ?? {})?.map(([key]) => {\n                        const t =\n                            (metric?.roots[key].direct ?? 0) +\n                            (metric?.roots[key].indirect ?? 0);\n                        return (\n                            <Collapse key={key}>\n                                <div>\n                                    <ListItem>\n                                        <Grid container alignItems=\"center\">\n                                            <Grid item xs>\n                                                <ListItemText primary={key} />\n                                            </Grid>\n                                            <Grid item xs>\n                                                <Grid\n                                                    container\n                                                    direction=\"column\"\n                                                >\n                                                    <Grid item xs>\n                                                        <ProgressBar\n                                                            value={\n                                                                metric?.roots?.[\n                                                                    key\n                                                                ]?.direct ?? 0\n                                                            }\n                                                            total={t}\n                                                            label={\"Direct\"}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs>\n                                                        <ProgressBar\n                                                            value={\n                                                                metric?.roots?.[\n                                                                    key\n                                                                ]?.indirect ?? 0\n                                                            }\n                                                            total={t}\n                                                            label={\"Indirect\"}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </ListItem>\n                                    <Divider\n                                        variant={\"middle\"}\n                                        sx={{ mb: 1 }}\n                                    />\n                                </div>\n                            </Collapse>\n                        );\n                    })}\n                </TransitionGroup>\n            </List>\n        </>\n    );\n};\n","import React from \"react\";\n\n// material-ui\nimport { Divider, Collapse, Chip, Grid, Box } from \"@mui/material\";\nimport ExpandLess from \"@mui/icons-material/ExpandLess\";\nimport ExpandMore from \"@mui/icons-material/ExpandMore\";\nimport CheckRoundedIcon from \"@mui/icons-material/CheckRounded\";\nimport HelpOutlineRoundedIcon from \"@mui/icons-material/HelpOutlineRounded\";\n\n// local\nimport ProgressBar from \"components/Elements/ProgressBar\";\nimport { LicenseMetricType } from \"hooks/metrics\";\n\ninterface ILicenseGroup {\n    /** The license name */\n    name: string;\n    metadata: LicenseMetricType[keyof LicenseMetricType][\"metadata\"];\n    packages: LicenseMetricType[keyof LicenseMetricType][\"packages\"];\n    /** The total number of packages that have licenses. (used to add a total to the metric bar) */\n    totalLicenses: number;\n}\n\n/**\n * A custom list item displaying the number of packages under a particular license.\n */\nconst LicenseGroup = ({\n    name,\n    metadata,\n    packages,\n    totalLicenses,\n}: ILicenseGroup) => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <Grid container>\n            <Grid item xs={1}>\n                {metadata?.isOsiApproved === null ? (\n                    <HelpOutlineRoundedIcon />\n                ) : metadata?.isOsiApproved ? (\n                    <CheckRoundedIcon />\n                ) : null}\n            </Grid>\n            <Grid item xs>\n                <Box onClick={() => setOpen(!open)}>\n                    <ProgressBar\n                        key={name}\n                        value={Object.keys(packages).length ?? 0}\n                        total={totalLicenses}\n                        label={name}\n                        action={open ? <ExpandLess /> : <ExpandMore />}\n                    />\n                </Box>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                    <Box my={1}>\n                        {Object.entries(packages)\n                            .sort((a, b) => {\n                                return a[1].depth - b[1].depth;\n                            })\n                            .map(([k, v]) => {\n                                return (\n                                    <Chip\n                                        key={k}\n                                        sx={{ margin: 0.5 }}\n                                        color={\n                                            v.depth === 0\n                                                ? \"primary\"\n                                                : v.depth === 1\n                                                ? \"secondary\"\n                                                : \"default\"\n                                        }\n                                        label={k}\n                                    />\n                                );\n                            })}\n                    </Box>\n                    <Divider />\n                </Collapse>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LicenseGroup;\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Divider,\n    Collapse,\n    Button,\n    Box,\n    Grid,\n    Skeleton,\n} from \"@mui/material\";\nimport { TransitionGroup } from \"react-transition-group\";\n\n// local\nimport LicenseGroup from \"./LicenseGroup\";\nimport { LicenseMetricType } from \"hooks/metrics\";\n\ninterface ILicenseMetric {\n    /** Key value pairs of license names (keys) and license information (values).*/\n    metric: LicenseMetricType | null;\n}\n\n/**\n * A metric card that visualizes license data for all packages in the graph.\n */\nexport const LicenseMetric = ({ metric }: ILicenseMetric) => {\n    const [more, setMore] = React.useState(false);\n\n    const licenses = useMemo(\n        () =>\n            Object.entries(metric ?? {}).sort((a, b) => {\n                return Object.keys(b[1]).length - Object.keys(a[1]).length;\n            }),\n        [metric],\n    );\n\n    const totalLicenses = useMemo(\n        () =>\n            Object.entries(metric ?? {}).reduce((sum, [, val]) => {\n                return sum + Object.keys(val.packages).length;\n            }, 0),\n        [metric],\n    );\n\n    if (!metric) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div>\n            <Grid container>\n                <Grid item xs={1}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        OSI\n                    </Typography>\n                </Grid>\n                <Grid item xs>\n                    <Typography variant=\"h6\" gutterBottom>\n                        Dependency Licenses\n                    </Typography>\n                </Grid>\n            </Grid>\n\n            <Divider />\n            <TransitionGroup>\n                {licenses?.slice(0, 10).map(([key, value]) => {\n                    return (\n                        <Collapse key={key}>\n                            <LicenseGroup\n                                name={key}\n                                metadata={value.metadata}\n                                packages={value.packages}\n                                totalLicenses={totalLicenses}\n                            />\n                        </Collapse>\n                    );\n                })}\n            </TransitionGroup>\n\n            <Collapse in={more} timeout=\"auto\" unmountOnExit>\n                <TransitionGroup>\n                    {licenses.slice(10).map(([key, value]) => {\n                        return (\n                            <Collapse key={key}>\n                                <LicenseGroup\n                                    name={key}\n                                    metadata={value.metadata}\n                                    packages={value.packages}\n                                    totalLicenses={totalLicenses}\n                                />\n                            </Collapse>\n                        );\n                    })}\n                </TransitionGroup>\n            </Collapse>\n            <Box textAlign=\"center\">\n                <Button onClick={() => setMore(!more)} color=\"primary\">\n                    {more ? \"Less\" : \"More\"}\n                </Button>\n            </Box>\n        </div>\n    );\n};\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { Typography, Divider, Skeleton, Box } from \"@mui/material\";\n\n// local\nimport ProgressBar from \"components/Elements/ProgressBar\";\nimport { AdviseMetricType } from \"hooks/metrics\";\n\ninterface IAdviseMetric {\n    /** The metric object info of aggregated data */\n    metric: AdviseMetricType | null;\n}\n\n/**\n * A metric card that aggregates changes between the initial dependency\n * graph and the Thoth made dependency graph.\n */\nexport const AdviseMetric = ({ metric }: IAdviseMetric) => {\n    const justTotal = Object.values(metric?.justification ?? {}).reduce(\n        (a, b) => a + b,\n        0,\n    );\n\n    if (!metric) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <>\n            <Typography variant=\"body2\" gutterBottom>\n                {metric?.build}\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            <Typography variant=\"h6\" mt={3} gutterBottom>\n                Justification Counts\n            </Typography>\n            <Divider sx={{ mb: 1 }} />\n            {Object.entries(metric?.justification ?? {}).map(([key, value]) => {\n                return (\n                    <ProgressBar\n                        key={key}\n                        value={value}\n                        total={justTotal}\n                        label={key}\n                        mb={1}\n                    />\n                );\n            })}\n        </>\n    );\n};\n","import React from \"react\";\n\n// material-ui\nimport { Link, Stack, BoxProps, Typography } from \"@mui/material\";\n\ninterface IIconText extends BoxProps {\n    /** The text shown */\n    text: string;\n    /** The icon component to be displayed */\n    icon: React.ReactNode;\n    /** Optional link if text is selected */\n    link?: string;\n}\n\n/**\n * Text with an icon to the right of it.\n */\nconst IconText = ({ text, icon, link, ...props }: IIconText) => {\n    return (\n        <Stack {...props} direction=\"row\" spacing={1} alignItems=\"center\">\n            {icon}\n            {link ? (\n                <Link\n                    underline=\"none\"\n                    href={link ? link : undefined}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    variant=\"body2\"\n                    align=\"center\"\n                >\n                    {text}\n                </Link>\n            ) : (\n                <Typography variant=\"body2\" align=\"center\">\n                    {text}\n                </Typography>\n            )}\n        </Stack>\n    );\n};\n\nexport default IconText;\n\nIconText.propTypes = {};\n","import React from \"react\";\nimport { Button, Alert, AlertColor, AlertProps } from \"@mui/material\";\n\ninterface ICustomAlert extends AlertProps {\n    /** The alert content. */\n    info: {\n        /** Link to navigate to if alert is actioned on. */\n        link?: string;\n        /** Text displayed in the alert. */\n        message: string;\n        /** Severity (color) of alert: `[\"ERROR\", \"WARNING\", \"INFO\", \"SUCCESS\"]`. */\n        type: AlertColor;\n    };\n}\n\n/**\n * A custom alert card.\n */\nconst CustomAlert = ({ info, ...props }: ICustomAlert) => {\n    return (\n        <Alert\n            action={\n                info.link ? (\n                    <Button color=\"inherit\" size=\"small\" href={info?.link}>\n                        DETAILS\n                    </Button>\n                ) : undefined\n            }\n            severity={info.type}\n            {...props}\n        >\n            {info?.message}\n        </Alert>\n    );\n};\n\nexport default CustomAlert;\n","// React\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Chip,\n    ChipProps,\n    AlertColor,\n    Stack,\n    Paper,\n} from \"@mui/material\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport CustomAlert from \"./CustomAlert\";\n\n// utils\nimport { calcTime } from \"utils/calcTime\";\nimport {\n    AdviseDocumentRequestParams,\n    AdviseDocumentRequestResponseSuccess,\n} from \"../../api\";\n\ninterface IAdviseHeader {\n    /** the Advise document id*/\n    adviseDocument?: AdviseDocumentRequestResponseSuccess;\n    /** the Advise document logs*/\n    lastLog?: { [key: string]: string };\n}\n\n/**\n * Displays basic Advise document information and\n * displays any errors, info, or warnings that came up\n * in the document generation.\n */\nexport const AdviseHeader = ({ adviseDocument, lastLog }: IAdviseHeader) => {\n    // get status of the report\n    const [statusText, statusColor] = useMemo<\n        [string, ChipProps[\"color\"]]\n    >(() => {\n        // if report is done\n        if (adviseDocument?.result?.report) {\n            if (adviseDocument.result.report.ERROR) {\n                return [\"ERROR\", \"error\"];\n            } else {\n                return [\"COMPLETE\", \"success\"];\n            }\n        } else if (adviseDocument?.result?.error) {\n            return [\"ERROR\", \"error\"];\n        }\n        // if report is not done\n        else if (adviseDocument?.status?.state) {\n            return [adviseDocument.status.state.toUpperCase(), \"info\"];\n        } else {\n            return [\"UNKNOWN\", undefined];\n        }\n    }, [adviseDocument]);\n\n    return (\n        <>\n            <Paper variant=\"outlined\" sx={{ padding: 2 }}>\n                <Typography variant=\"h5\" mb={1}>\n                    <b>\n                        {adviseDocument?.metadata?.document_id ??\n                            (\n                                adviseDocument?.parameters as AdviseDocumentRequestParams\n                            )?.analysis_id}\n                    </b>\n                </Typography>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                    <Chip label={statusText} color={statusColor} />\n                    <IconText\n                        text={calcTime(\n                            adviseDocument?.status?.finished_at,\n                            adviseDocument?.status?.started_at,\n                            adviseDocument?.metadata?.datetime,\n                        )}\n                        icon={<AccessTimeIcon />}\n                    />\n                </Stack>\n            </Paper>\n            <>\n                {statusText === \"ERROR\" ? (\n                    <CustomAlert\n                        variant=\"filled\"\n                        sx={{ margin: 1, marginTop: 2 }}\n                        info={{\n                            message:\n                                adviseDocument?.result?.report?.ERROR ??\n                                adviseDocument?.result?.error_msg ??\n                                \"\",\n                            type: \"error\",\n                        }}\n                    />\n                ) : statusText !== \"COMPLETE\" ? (\n                    <CustomAlert\n                        variant=\"outlined\"\n                        sx={{ margin: 1, marginTop: 2 }}\n                        info={{\n                            message: lastLog?.message ?? \"\",\n                            type: lastLog?.levelname?.toLowerCase() as AlertColor,\n                        }}\n                    />\n                ) : undefined}\n            </>\n        </>\n    );\n};\n","import React from \"react\";\n\nimport {\n    TableHead,\n    TableRow,\n    TableSortLabel,\n    Box,\n    TableCell,\n} from \"@mui/material\";\n\nimport { visuallyHidden } from \"@mui/utils\";\n\nconst headCells = [\n    {\n        id: \"name\",\n        numeric: false,\n        label: \"Package\",\n    },\n    {\n        id: \"depth\",\n        numeric: true,\n        label: \"Depth\",\n    },\n    {\n        id: \"license\",\n        numeric: false,\n        label: \"License\",\n    },\n    {\n        id: \"dependencies\",\n        numeric: true,\n        label: \"Direct Dependencies\",\n    },\n];\n\ninterface IEnhancedTableHead {\n    /** the function used to sort an individual column */\n    onRequestSort: (c: string) => void;\n    /** the order in which the column is sorted on*/\n    order: \"asc\" | \"desc\";\n    /** The column in which to order the table by */\n    orderBy: string;\n}\n\n/**\n * A specific custom table header for packages.\n * It handles sorting individual columns.\n */\nfunction EnhancedTableHead({\n    order,\n    orderBy,\n    onRequestSort,\n}: IEnhancedTableHead) {\n    const createSortHandler = (property: string) => {\n        onRequestSort(property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding=\"normal\"\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={() => createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <Box component=\"span\" sx={visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </Box>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default EnhancedTableHead;\n","import React, { useContext, useMemo, useState } from \"react\";\n\nimport {\n    Chip,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    Stack,\n    Typography,\n} from \"@mui/material\";\n\n// local\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport SearchRoundedIcon from \"@mui/icons-material/SearchRounded\";\nimport SearchBar from \"components/Elements/SearchBar\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\nimport WarningAmberOutlinedIcon from \"@mui/icons-material/WarningAmberOutlined\";\n\ninterface IPackageList {\n    graph?: Graph<Node<PackageNodeValue>>;\n}\n\ntype PackageList = {\n    name: string;\n    key: string;\n    summary?: string;\n    version?: string;\n    warnings: number;\n    errors: number;\n}[];\n\n/**\n * The table cells and total structure specific to\n * python packages.\n */\nexport function PackageList({ graph }: IPackageList) {\n    const { selected, setSelected } = useContext(SelectedPackageContext) ?? {\n        setSelected: () => console.log(\"missing callback\"),\n    };\n\n    const [search, setSearch] = useState<string>(\"\");\n\n    const handleSearch = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n        setSearch(event.target.value);\n    };\n\n    // format data\n    const packageList = useMemo(() => {\n        if (!graph) {\n            return [];\n        }\n\n        const packages: PackageList = [];\n        graph.nodes.forEach(node => {\n            if (node.value.depth === -1) {\n                return;\n            }\n            packages.push({\n                name: node.value.name ?? node.key,\n                key: node.key,\n                summary: node?.value?.metadata?.Summary ?? \"\",\n                version: node?.value.version,\n                warnings:\n                    node.value.justifications?.filter(j => j.type === \"WARNING\")\n                        ?.length ?? 0,\n                errors:\n                    node.value.justifications?.filter(j => j.type === \"ERROR\")\n                        ?.length ?? 0,\n            });\n        });\n\n        return packages;\n    }, [graph]);\n\n    if (!graph) {\n        return null;\n    }\n\n    return (\n        <Stack spacing={2} sx={{ maxHeight: \"100%\" }}>\n            <SearchBar\n                onChange={handleSearch}\n                lefticon={<SearchRoundedIcon />}\n            />\n            <List sx={{ overflow: \"scroll\" }} dense>\n                {packageList\n                    .filter(p => p.name.startsWith(search))\n                    .map(p => {\n                        return (\n                            <ListItem\n                                key={p.key}\n                                button\n                                onClick={() => setSelected(p.key)}\n                                selected={selected === p.key}\n                                // divider\n                                sx={{\n                                    borderRadius: 1.5,\n                                    // marginY: 0.5,\n                                    // backgroundColor:\n                                    //     selected === p.key\n                                    //         ? hexFromArgb(\n                                    //               activeColor.light\n                                    //                   .colorContainer,\n                                    //           )\n                                    //         : undefined,\n                                    // color:\n                                    //     selected === p.key\n                                    //         ? hexFromArgb(\n                                    //               activeColor.light\n                                    //                   .onColorContainer,\n                                    //           )\n                                    //         : undefined,\n                                }}\n                            >\n                                <ListItemText\n                                    primary={\n                                        <Typography variant=\"h5\">\n                                            {p.name}\n                                        </Typography>\n                                    }\n                                    secondary={`v${p.version}`}\n                                />\n                                <ListItemSecondaryAction>\n                                    <Stack direction=\"row\" spacing={1}>\n                                        {p.warnings ? (\n                                            <Chip\n                                                variant=\"outlined\"\n                                                size=\"medium\"\n                                                icon={\n                                                    <WarningAmberOutlinedIcon />\n                                                }\n                                                label={p.warnings}\n                                                color=\"warning\"\n                                            />\n                                        ) : undefined}\n                                        {p.errors ? (\n                                            <Chip\n                                                variant=\"outlined\"\n                                                size=\"medium\"\n                                                icon={\n                                                    <ErrorOutlineOutlinedIcon />\n                                                }\n                                                label={p.errors}\n                                                color=\"error\"\n                                            />\n                                        ) : undefined}\n                                    </Stack>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        );\n                    })}\n            </List>\n        </Stack>\n    );\n}\n","import {\n    Box,\n    CircularProgress,\n    LinearProgress,\n    Typography,\n} from \"@mui/material\";\nimport React, { useMemo } from \"react\";\n\ninterface ILoading {\n    type: \"circular\" | \"bar\";\n    label?: string;\n    progress?: number;\n}\n\nconst Loading = ({ type, label, progress }: ILoading) => {\n    return useMemo(() => {\n        if (type === \"bar\") {\n            return (\n                <Box\n                    height=\"100vh\"\n                    flexDirection=\"column\"\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n                    <LinearProgress\n                        variant={progress ? \"determinate\" : undefined}\n                        value={progress}\n                    />\n                    <Typography variant=\"body2\">{label}</Typography>\n                </Box>\n            );\n        } else {\n            return (\n                <Box\n                    height=\"100vh\"\n                    flexDirection=\"column\"\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n                    <CircularProgress\n                        variant={progress ? \"determinate\" : undefined}\n                        value={progress}\n                    />\n                    <Typography variant=\"body2\">{label}</Typography>\n                </Box>\n            );\n        }\n    }, [type, label, progress]);\n};\n\nexport default Loading;\n","import React, { useContext, useState } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport { SelectedPackage } from \"../components\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { PackageList } from \"../components/PackageList\";\nimport Loading from \"components/Elements/Loading/Loading\";\nimport { StateContext } from \"stores/Global\";\n\ntype SelectedPackageType = {\n    selected: string;\n    setSelected: (c: string) => void;\n};\n\nexport const SelectedPackageContext = React.createContext<SelectedPackageType>(\n    {} as SelectedPackageType,\n);\n\ninterface IAdviseDetails {\n    graph?: Graph<Node<PackageNodeValue>>;\n}\n\nexport const AdviseDetails = ({ graph }: IAdviseDetails) => {\n    const [selected, setSelected] = useState<string>(\"\");\n    const state = useContext(StateContext);\n\n    if (!graph) {\n        return (\n            <Loading\n                type=\"circular\"\n                label={state?.loading?.[\"graph\"].text}\n                progress={\n                    ((state?.loading?.[\"graph\"].value ?? 0) /\n                        (state?.loading?.[\"graph\"].total ?? 1)) *\n                    100\n                }\n            />\n        );\n    }\n\n    if (graph.nodes.size === 1) {\n        return (\n            <Box\n                height=\"100%\"\n                flexDirection=\"column\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h5\" align=\"center\">\n                    No packages found\n                </Typography>\n                <Typography variant=\"body2\" align=\"center\">\n                    The advise document encountered an error resulting in no\n                    Pipfile.lock\n                </Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <SelectedPackageContext.Provider value={{ selected, setSelected }}>\n            <Box\n                flexDirection=\"column\"\n                display=\"flex\"\n                height=\"100%\"\n                justifyContent=\"center\"\n                alignItems=\"flex-start\"\n            >\n                <Box\n                    flexGrow={1}\n                    display=\"flex\"\n                    sx={{ overflowY: \"hidden\", width: \"100%\" }}\n                >\n                    <Box\n                        overflow=\"auto\"\n                        sx={{ marginRight: 2, minWidth: \"500px\" }}\n                    >\n                        <PackageList graph={graph} />\n                    </Box>\n                    <Box\n                        overflow=\"auto\"\n                        sx={{ minWidth: \"50%\", width: \"100%\" }}\n                    >\n                        {!selected || !graph ? (\n                            <Box\n                                height=\"100%\"\n                                flexDirection=\"column\"\n                                display=\"flex\"\n                                justifyContent=\"center\"\n                                alignItems=\"center\"\n                            >\n                                <Typography variant=\"h5\" align=\"center\">\n                                    Choose a package\n                                </Typography>\n                                <Typography variant=\"body2\" align=\"center\">\n                                    Click on a package from the packages found\n                                    in the Pipfile.lock\n                                </Typography>\n                            </Box>\n                        ) : (\n                            <SelectedPackage graph={graph} />\n                        )}\n                    </Box>\n                </Box>\n            </Box>\n        </SelectedPackageContext.Provider>\n    );\n};\n","// react\nimport React from \"react\";\n\n// material-ui\nimport { Typography } from \"@mui/material\";\n\ninterface ILockfileView {\n    /** The Pipfile.lock json object */\n    file: { default: { [key: string]: unknown } };\n}\n\n/**\n * Renders out a Pipfile.lock file and attaches\n * `<a>` tags to package names, which is used to\n *  scroll to certain spot in the lock file\n */\nexport const LockfileView = ({ file }: ILockfileView) => {\n    return (\n        <Typography variant=\"caption\">\n            <pre>\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: JSON.stringify(file, undefined, 4)?.replaceAll(\n                            new RegExp(\n                                '(\"' +\n                                    Object.keys(file?.default)?.join('\"|\"') +\n                                    '\")',\n                                \"g\",\n                            ),\n                            (match: string) => {\n                                return `<a id=\"${match.slice(\n                                    1,\n                                    -1,\n                                )}\">${match}</a>`;\n                            },\n                        ),\n                    }}\n                />\n            </pre>\n        </Typography>\n    );\n};\n","// react\nimport React from \"react\";\n\nimport { Typography, Grid } from \"@mui/material\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\nimport BookmarkIcon from \"@mui/icons-material/Bookmark\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\ninterface IPopup {\n    node: Node<PackageNodeValue>;\n}\n\n/**\n * Graph hover model appears when you hover over a node on the graph.\n */\nconst Popup = ({ node }: IPopup) => {\n    return (\n        <div>\n            <Grid container alignItems=\"center\">\n                <Grid item xs={6}>\n                    <Typography variant=\"h6\">\n                        <b>{node.value.id}</b>\n                    </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <Typography ml={2} variant=\"body1\">\n                        v{node.value.version ?? \"NaN\"}\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Typography gutterBottom variant=\"body2\">\n                {node.value?.metadata?.Summary ?? \"NaN\"}\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid item>\n                    <IconText\n                        text={node.value?.metadata?.License ?? \"NaN\"}\n                        icon={<GavelIcon />}\n                    />\n                </Grid>\n                <Grid item>\n                    <IconText\n                        ml={2}\n                        text={\n                            node.value?.latestVersion // TODO is not correct\n                                ? \"Latest version is installed\"\n                                : \"Installed version is NOT the latest.\"\n                        }\n                        icon={<BookmarkIcon />}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default Popup;\n","// react\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// utils and configs\nimport { options } from \"config\";\n\n// vis-network\nimport { Network, DataSet, Data } from \"vis-network/standalone\";\n\n// local\nimport Popup from \"../Popup\";\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\ninterface INetworkGraph {\n    graph: Graph<Node<PackageNodeValue>>;\n}\n\n/**\n * Renders a network graph visualization using `vis-network`.\n */\nconst NetworkGraph = ({ graph, ...props }: INetworkGraph) => {\n    const visJsRef = useRef<HTMLDivElement>(null);\n    const { selected } = useContext(SelectedPackageContext);\n\n    // create the graph\n    useEffect(() => {\n        if (!selected || !graph) {\n            return;\n        }\n\n        const selectedNode = graph.nodes.get(selected);\n\n        if (selectedNode) {\n            const nodes = graph.findAllNodesOnAllPaths(selectedNode, \"*App\");\n\n            const app_node = graph.nodes.get(\"*App\");\n            if (app_node) {\n                nodes.set(\"*App\", app_node);\n            }\n\n            // convert to vis graph format\n            const convertedNodes = new DataSet<PackageNodeValue>();\n            nodes.forEach(value => {\n                // popup element\n                const popup = document.createElement(\"div\");\n                ReactDOM.render(<Popup node={value} />, popup);\n\n                // default colors\n                let color = value.value.color ?? options.nodes.color.background;\n                let font = undefined;\n\n                // if node is root\n                if (value.key === \"*App\") {\n                    color = \"#4fc1ea\";\n                    font = { color: \"#4fc1ea\", strokeWidth: 3, size: 20 };\n                }\n                // if selected node\n                else if (value.key === selectedNode.key) {\n                    color = \"#f39200\";\n                }\n\n                convertedNodes.add({\n                    ...value.value,\n                    color: color,\n                    title:\n                        value.key === selectedNode.key || value.key === \"*App\"\n                            ? undefined\n                            : popup,\n                    font: font,\n                });\n            });\n\n            const visData: Data = {\n                nodes: convertedNodes,\n                edges: new DataSet(graph.visEdges),\n            };\n\n            const network =\n                visJsRef.current &&\n                new Network(visJsRef.current, visData, options);\n\n            // change cursor when hovering and grabbing\n            // Get the canvas HTML element\n            const networkCanvas = document\n                ?.getElementById(\"mynetwork\")\n                ?.getElementsByTagName(\"canvas\")[0];\n\n            // changes the cursor graphic depending on where and what the mouse is doing\n            const changeCursor = (newCursorStyle: string) => {\n                if (networkCanvas) {\n                    networkCanvas.style.cursor = newCursorStyle;\n                }\n            };\n\n            if (network) {\n                network.on(\"hoverNode\", function () {\n                    changeCursor(\"grab\");\n                });\n                network.on(\"blurNode\", function () {\n                    changeCursor(\"default\");\n                });\n                network.on(\"dragStart\", function () {\n                    changeCursor(\"grabbing\");\n                });\n                network.on(\"dragging\", function () {\n                    changeCursor(\"grabbing\");\n                });\n                network.on(\"dragEnd\", function () {\n                    changeCursor(\"grab\");\n                });\n            }\n        }\n    }, [selected, graph, visJsRef]);\n\n    return (\n        <div {...props} style={{ display: \"flex\", flexFlow: \"column nowrap\" }}>\n            <div\n                ref={visJsRef}\n                id=\"mynetwork\"\n                style={{ flex: \"1 1 auto\", height: \"50vh\" }}\n            />\n        </div>\n    );\n};\n\nexport default NetworkGraph;\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Collapse,\n    Grid,\n    IconButton,\n    Stack,\n    Typography,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\n\nimport DoneRoundedIcon from \"@mui/icons-material/DoneRounded\";\nimport CloseRoundedIcon from \"@mui/icons-material/CloseRounded\";\nimport { KeyboardArrowDown } from \"@mui/icons-material\";\n\ntype ScoreCardItemProp = {\n    tags: string;\n    name: string;\n    short: string;\n    risk: string;\n    passing?: boolean;\n    justification?: string;\n};\n\nconst ScorecardItem = ({\n    tags,\n    name,\n    short,\n    risk,\n    passing,\n    justification,\n}: ScoreCardItemProp) => {\n    const [selected, setSelected] = useState(false);\n\n    return (\n        <Box>\n            <Grid\n                container\n                alignItems=\"center\"\n                sx={{\n                    backgroundColor: selected ? \"action.selected\" : undefined,\n                    borderRadius: \"16px\",\n                }}\n            >\n                <Grid item xs={11}>\n                    <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <IconButton onClick={() => setSelected(!selected)}>\n                            <KeyboardArrowDown\n                                sx={{\n                                    mr: -1,\n                                    transform: selected\n                                        ? \"rotate(0deg)\"\n                                        : \"rotate(-90deg)\",\n                                    transition: \"0.2s\",\n                                }}\n                            />\n                        </IconButton>\n                        <Typography variant=\"body1\" fontWeight=\"bolder\">\n                            {name}\n                        </Typography>\n                    </Stack>\n                </Grid>\n                <Grid item xs={1}>\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"flex-end\"\n                        sx={{ marginRight: 2 }}\n                    >\n                        {!passing ? (\n                            <CloseRoundedIcon color=\"error\" />\n                        ) : (\n                            <DoneRoundedIcon color=\"success\" />\n                        )}\n                    </Box>\n                </Grid>\n            </Grid>\n            <Collapse in={selected}>\n                <Grid\n                    container\n                    sx={{ marginLeft: 5, marginBottom: 1, paddingRight: 1 }}\n                >\n                    <Grid item xs={12} sx={{ marginBottom: 2 }}>\n                        <Typography variant=\"body2\">{short}</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography fontWeight=\"bolder\" variant=\"body2\">\n                            Reason\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} sx={{ marginBottom: 1 }}>\n                        <Typography variant=\"body2\">{justification}</Typography>\n                    </Grid>\n                    <Grid item xs={12} sx={{ marginBottom: 1 }}>\n                        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n                            <Typography variant=\"body2\">risk: </Typography>\n                            <Chip\n                                size=\"small\"\n                                label={risk}\n                                color={\n                                    risk === \"High\"\n                                        ? \"error\"\n                                        : risk == \"Medium\"\n                                        ? \"warning\"\n                                        : \"info\"\n                                }\n                            />\n                        </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n                            <Typography variant=\"body2\">tags: </Typography>\n                            {tags.split(\", \").map(tag => {\n                                return (\n                                    <Chip size=\"small\" key={tag} label={tag} />\n                                );\n                            })}\n                        </Stack>\n                    </Grid>\n                </Grid>\n            </Collapse>\n        </Box>\n    );\n};\n\nexport const ScorecardMetric = ({\n    metric,\n}: {\n    metric: {\n        tags: string;\n        name: string;\n        short: string;\n        risk: string;\n        passing?: boolean;\n        justification?: string;\n    }[];\n}) => {\n    return (\n        <Card variant=\"outlined\" sx={{ marginTop: 2 }}>\n            <CardHeader\n                title=\"Security Scorecards\"\n                subheader={`Scorecards give consumers of open-source projects an easy way to judge whether their dependencies are safe.`}\n                action={\n                    <IconButton\n                        href={\n                            \"https://github.com/ossf/scorecard/blob/main/docs/checks.md\"\n                        }\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <OpenInNewRoundedIcon />\n                    </IconButton>\n                }\n            />\n            <CardContent>\n                <Stack>\n                    {Object.values(metric).map(value => {\n                        return <ScorecardItem key={value.name} {...value} />;\n                    })}\n                </Stack>\n            </CardContent>\n        </Card>\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { THOTH_URL } from \"config\";\nimport { useQueries, useQuery } from \"react-query\";\nimport { paths } from \"lib/schema\";\nimport { UseQueryResult } from \"react-query/types/react/types\";\n\ntype path = paths[\"/python/package/version/metadata\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type PackageMetadataRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageMetadata = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    os_name?: requestParams[\"os_name\"],\n    os_version?: requestParams[\"os_version\"],\n    python_version?: requestParams[\"python_version\"],\n) => {\n    return axios.get<PackageMetadataRequestResponseSuccess>(\n        THOTH_URL + \"/python/package/version/metadata\",\n        {\n            params: {\n                name: name,\n                version: version,\n                index: index,\n                os_name: os_name,\n                os_version: os_version,\n                python_version: python_version,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageMetadata = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    os_name?: requestParams[\"os_name\"],\n    os_version?: requestParams[\"os_version\"],\n    python_version?: requestParams[\"python_version\"],\n    config?: { [key: string]: any },\n): UseQueryResult<\n    AxiosResponse<PackageMetadataRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n> => {\n    return useQuery<\n        AxiosResponse<PackageMetadataRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled:\n            !!name &&\n            !!version &&\n            !!index &&\n            !!os_name &&\n            !!os_version &&\n            !!python_version,\n        queryKey: [\n            \"packageMetadata\",\n            name,\n            version,\n            index,\n            os_name,\n            os_version,\n            python_version,\n        ],\n        queryFn: () =>\n            getPackageMetadata(\n                name,\n                version,\n                index,\n                os_name,\n                os_version,\n                python_version,\n            ),\n    });\n};\n\nexport const usePackagesMetadata = (\n    packages: requestParams[],\n    config?: { [key: string]: any },\n): UseQueryResult<\n    AxiosResponse<PackageMetadataRequestResponseSuccess>,\n    AxiosError<requestResponseFailure>\n>[] => {\n    return useQueries(\n        packages.map(p => {\n            return {\n                ...config,\n                enabled:\n                    !!p.name &&\n                    !!p.version &&\n                    !!p.index &&\n                    !!p.os_name &&\n                    !!p.os_version &&\n                    !!p.python_version,\n                queryKey: [\n                    \"packageMetadata\",\n                    p.name,\n                    p.version,\n                    p.index,\n                    p.os_name,\n                    p.os_version,\n                    p.python_version,\n                ],\n                queryFn: () =>\n                    getPackageMetadata(\n                        p.name,\n                        p.version,\n                        p.index,\n                        p.os_name,\n                        p.os_version,\n                        p.python_version,\n                    ),\n            };\n        }),\n    ) as UseQueryResult<\n        AxiosResponse<PackageMetadataRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >[];\n};\n","import YAML from \"yaml\";\n\nexport function getFile(url: RequestInfo) {\n    return fetch(url)\n        .then(response => response.text())\n        .then(response => {\n            return response;\n        });\n}\n\nexport function getYamlFile(url: string) {\n    return getFile(url).then(text => YAML.parse(text));\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport { getYamlFile } from \"api\";\nimport { components } from \"lib/schema\";\n\nfunction getMatch(\n    name: string,\n    scorecards: components[\"schemas\"][\"Justification\"],\n) {\n    const matchLookup = {\n        Maintained: \"actively maintained\",\n        \"Dependency-Update-Tool\": \"automatic dependency updates\",\n        \"Binary-Artifacts\": \"binary artifacts\",\n        \"Branch-Protection\": \"branch protection\",\n        \"CI-Tests\": \"CI tests\",\n        \"CII-Best-Practices\": \"CII Best Practices\",\n        \"Code-Review\": \"code review\",\n        Contributors: \"contributors\",\n        Fuzzing: \"fuzzing\",\n        Packaging: \"published as a package\",\n        \"Pinned-Dependencies\": \"pinned dependencies\",\n        SAST: \"static source code analysis\",\n        \"Security-Policy\": \"security policy\",\n        \"Signed-Releases\": \"sign tags\",\n        \"Token-Permissions\": \"least privilege\",\n        Vulnerabilities: \"vulnerabilities\",\n        \"Dangerous-Workflow\": \"dangerous\",\n        License: \"license\",\n    };\n\n    const pattern = matchLookup[name as keyof typeof matchLookup];\n    return scorecards.find(scorecard => scorecard.message.includes(pattern));\n}\n\nexport const useScorecards = (\n    justifications: Map<string, components[\"schemas\"][\"Justification\"][number]>,\n) => {\n    const [scorecard, setScorecard] = useState<\n        {\n            tags: string;\n            name: string;\n            short: string;\n            risk: string;\n            passing?: boolean;\n            justification?: string;\n        }[]\n    >([]);\n\n    const scorecardJustifications = useMemo(() => {\n        if (justifications) {\n            return Array.from(justifications.values()).filter(s => {\n                if (\n                    s.link ===\n                    \"https://github.com/ossf/scorecard/blob/main/docs/checks.md\"\n                ) {\n                    justifications.delete(s.message);\n                    return true;\n                }\n                return false;\n            });\n        }\n    }, [justifications]);\n\n    useEffect(() => {\n        if (!justifications) {\n            return;\n        }\n\n        let active = true;\n        load();\n        return () => {\n            active = false;\n        };\n\n        async function load() {\n            const res = await getYamlFile(\n                \"https://raw.githubusercontent.com/ossf/scorecard/main/docs/checks/internal/checks.yaml\",\n            ).then(yaml => {\n                return Object.entries(yaml?.checks ?? {})\n                    .filter(([key]) =>\n                        getMatch(key, scorecardJustifications ?? []),\n                    )\n                    .map(([name, value]) => {\n                        const info = value as { [k: string]: unknown };\n                        const match = getMatch(\n                            name,\n                            scorecardJustifications ?? [],\n                        );\n                        return {\n                            tags: info?.tags as string,\n                            name: name as string,\n                            short: info?.short as string,\n                            risk: info?.risk as string,\n                            justification: match?.message as string,\n                            passing: match?.type !== \"WARNING\",\n                        };\n                    });\n            });\n            if (!active) {\n                return;\n            }\n            setScorecard(res);\n        }\n    }, [justifications]);\n\n    return scorecard;\n};\n","// React\nimport React, { useContext, useMemo } from \"react\";\n\n// material-ui\nimport {\n    Typography,\n    Grid,\n    Box,\n    Link,\n    Stack,\n    CardHeader,\n    CardContent,\n    Card,\n    Divider,\n    IconButton,\n} from \"@mui/material\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\nimport ErrorRoundedIcon from \"@mui/icons-material/ErrorRounded\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\nimport NetworkGraphView from \"../NetworkGraphView\";\nimport { SelectedPackageContext } from \"../../routes/AdviseDetails\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { components } from \"lib/schema\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { ScorecardMetric } from \"../JustificationMetrics\";\nimport { useScorecards } from \"./hooks/useScorecards\";\nimport { useLinkData } from \"./hooks/useLinkData\";\n\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport InfoRoundedIcon from \"@mui/icons-material/InfoOutlined\";\nimport WarningAmberRoundedIcon from \"@mui/icons-material/WarningAmberOutlined\";\nimport StarRoundedIcon from \"@mui/icons-material/StarRounded\";\n\ninterface ISelectedPackage {\n    graph: Graph<Node<PackageNodeValue>>;\n}\n\n/**\n * Renders the selected package context variable's data. It will preform\n * a search of the list of packages using the selected package variable.\n */\nexport const SelectedPackage = ({ graph }: ISelectedPackage) => {\n    const { selected, setSelected } = useContext(SelectedPackageContext);\n\n    const selectedPackage = useMemo<Node<PackageNodeValue> | undefined>(() => {\n        return graph.nodes.get(selected);\n    }, [selected]);\n\n    const dependents = useMemo<string[]>(() => {\n        const deps: string[] = [];\n\n        if (selectedPackage) {\n            [...selectedPackage.parents]\n                .filter(p => p !== \"*App\")\n                .forEach(node => {\n                    const nodeObj = graph.nodes.get(node);\n                    if (nodeObj) {\n                        deps.push(node);\n                    }\n                });\n        }\n\n        return deps;\n    }, [selectedPackage]);\n\n    const justifications = useMemo(() => {\n        const justs: Map<\n            string,\n            components[\"schemas\"][\"Justification\"][number]\n        > = new Map();\n\n        if (selectedPackage) {\n            selectedPackage?.value?.justifications?.forEach(just => {\n                justs.set(just.message, just);\n            });\n        }\n\n        return justs;\n    }, [selectedPackage]);\n\n    const scorecards = useScorecards(justifications);\n\n    const linkData = useLinkData(justifications);\n\n    const popular = useMemo(() => {\n        if (justifications) {\n            return Array.from(justifications.values()).find(s => {\n                if (s.message.includes(\"popularity on GitHub\")) {\n                    justifications.delete(s.message);\n                    return true;\n                }\n                return false;\n            });\n        }\n    }, [justifications]);\n\n    const browseLink = useMemo(() => {\n        if (justifications) {\n            const just = Array.from(justifications.values()).find(s => {\n                if (s.message.includes(\"Thoth Search UI\")) {\n                    justifications.delete(s.message);\n                    return true;\n                }\n                return false;\n            });\n\n            return just?.link;\n        }\n    }, [justifications]);\n\n    const showError = useMemo(() => {\n        return (\n            <Stack direction=\"row\" alignItems=\"center\" sx={{ marginTop: 2 }}>\n                <ErrorRoundedIcon color=\"error\" sx={{ marginRight: \".5rem\" }} />\n                <Typography mb={0} color=\"error\" gutterBottom variant=\"body2\">\n                    The package metadata could not be fetched.\n                </Typography>\n            </Stack>\n        );\n    }, []);\n\n    return (\n        <Box sx={{ overflow: \"scroll\" }}>\n            <Card variant=\"outlined\" sx={{ padding: 2 }}>\n                <Grid container alignItems=\"center\" mb={1}>\n                    <Grid item>\n                        <Typography variant=\"h3\">\n                            <Link underline=\"none\" href={browseLink}>\n                                <b>{selectedPackage?.value?.name}</b>\n                            </Link>\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography ml={2} variant=\"h6\">\n                            {selectedPackage?.value?.version}\n                        </Typography>\n                    </Grid>\n                </Grid>\n\n                <Grid container spacing={1}>\n                    <Grid item>\n                        <IconText\n                            text={\n                                selectedPackage?.value?.metadata?.License ??\n                                \"NaN\"\n                            }\n                            icon={<GavelIcon />}\n                        />\n                    </Grid>\n                    {Object.values(linkData).map((value, i) => {\n                        return (\n                            <React.Fragment key={value.link ?? \"\" + i}>\n                                <Grid item>\n                                    <Divider orientation=\"vertical\" />\n                                </Grid>\n                                <Grid key={value.label} item>\n                                    <IconText\n                                        text={value.label ?? \"\"}\n                                        icon={value.icon}\n                                        link={value.link}\n                                    />\n                                </Grid>\n                            </React.Fragment>\n                        );\n                    })}\n                </Grid>\n\n                <Typography sx={{ marginTop: 2 }} variant=\"body1\">\n                    {selectedPackage?.value?.metadata?.Summary}\n                </Typography>\n\n                {!selectedPackage?.value?.metadata && showError}\n            </Card>\n\n            {scorecards.length > 0 ? (\n                <ScorecardMetric metric={scorecards} />\n            ) : undefined}\n\n            {popular ? (\n                <Card variant=\"outlined\" sx={{ marginTop: 2 }}>\n                    <CardHeader\n                        title={popular.message}\n                        action={\n                            <IconButton\n                                href={popular.link}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={<StarRoundedIcon />}\n                    />\n                </Card>\n            ) : undefined}\n\n            {browseLink\n                ? Array.from(justifications.values()).map((just, i) => {\n                      return (\n                          <Card\n                              key={just.message + i}\n                              variant=\"outlined\"\n                              sx={{ marginTop: 2 }}\n                          >\n                              <CardHeader\n                                  title={just.message}\n                                  action={\n                                      <IconButton\n                                          href={just.link}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                      >\n                                          <OpenInNewRoundedIcon />\n                                      </IconButton>\n                                  }\n                                  avatar={\n                                      just.type === \"ERROR\" ? (\n                                          <ErrorRoundedIcon color=\"error\" />\n                                      ) : just.type === \"WARNING\" ? (\n                                          <WarningAmberRoundedIcon color=\"warning\" />\n                                      ) : (\n                                          <InfoRoundedIcon color=\"info\" />\n                                      )\n                                  }\n                              />\n                          </Card>\n                      );\n                  })\n                : undefined}\n\n            <Card variant=\"outlined\" sx={{ marginTop: 2 }}>\n                <CardHeader\n                    title=\"Dependency Graph\"\n                    subheader={\n                        <Typography variant=\"body1\" mb={2}>\n                            {[...(selectedPackage?.parents ?? [])].filter(\n                                p => p !== \"*App\",\n                            )?.length === 0\n                                ? selectedPackage?.value?.label +\n                                  \" is not a dependent of any package in this Python environment\"\n                                : \"There are \" +\n                                  [...(selectedPackage?.parents ?? [])].filter(\n                                      p => p !== \"*App\",\n                                  )?.length +\n                                  \" package(s) that have \" +\n                                  selectedPackage?.value?.label +\n                                  \" as a direct dependency: \"}\n                            {dependents.map((dep, i) => {\n                                return (\n                                    <React.Fragment key={dep + i}>\n                                        <Link\n                                            underline=\"hover\"\n                                            onClick={() => setSelected(dep)}\n                                        >\n                                            {dep}\n                                        </Link>{\" \"}\n                                    </React.Fragment>\n                                );\n                            })}\n                        </Typography>\n                    }\n                />\n                <CardContent>\n                    <NetworkGraphView graph={graph} />\n                </CardContent>\n            </Card>\n        </Box>\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { components } from \"lib/schema\";\n\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\nimport ArticleRoundedIcon from \"@mui/icons-material/ArticleRounded\";\nimport NewReleasesRoundedIcon from \"@mui/icons-material/NewReleasesRounded\";\n\nexport const useLinkData = (\n    justifications: Map<string, components[\"schemas\"][\"Justification\"][number]>,\n) => {\n    const [linkData, setLinkData] = useState<{\n        [key: string]: {\n            label?: string;\n            icon?: React.ReactNode;\n            link?: string;\n        };\n    }>({\n        \"libraries.io\": {\n            label: \"libraries.io\",\n            icon: <OpenInNewRoundedIcon />,\n        },\n        \"released on PyPI\": {\n            label: \"PyPI\",\n            icon: <OpenInNewRoundedIcon />,\n        },\n        \"hosted on GitHub\": {\n            label: \"GitHub\",\n            icon: <GitHubIcon />,\n        },\n        \"Release notes\": {\n            label: \"Release\",\n            icon: <NewReleasesRoundedIcon />,\n        },\n        \"StackOverflow tags\": {\n            label: \"StackOverflow\",\n            icon: <OpenInNewRoundedIcon />,\n        },\n        \"project documentation\": {\n            label: \"Documentation\",\n            icon: <ArticleRoundedIcon />,\n        },\n    });\n\n    useEffect(() => {\n        const patterns = Object.keys(linkData);\n        let temp = linkData;\n\n        if (justifications) {\n            Array.from(justifications.values()).forEach(s => {\n                patterns.forEach(pattern => {\n                    if (s.message.includes(pattern)) {\n                        justifications.delete(s.message);\n                        temp = {\n                            ...temp,\n                            [pattern]: {\n                                ...temp[pattern],\n                                link: s?.link ?? \"\",\n                            },\n                        };\n                    }\n                });\n            });\n        }\n\n        Object.entries(temp).forEach(([key, value]) => {\n            if (!value.link) {\n                delete temp[key];\n            }\n        });\n\n        setLinkData(temp);\n    }, [justifications]);\n\n    return linkData;\n};\n","import React from \"react\";\nimport InfoCard from \"components/Elements/InfoCard\";\nimport {\n    AdviseMetric,\n    DependenciesMetric,\n    LicenseMetric,\n} from \"components/Metrics\";\nimport { AllMetrics } from \"../hooks\";\nimport { AdviseHeader } from \"../components\";\nimport { Box, Grid } from \"@mui/material\";\nimport { AdviseDocumentRequestResponseSuccess } from \"../api\";\n\ninterface IAdviseSummary {\n    metrics: AllMetrics;\n    adviseDocument?: AdviseDocumentRequestResponseSuccess;\n    lastLog?: { [key: string]: string };\n}\n\nexport const AdviseSummary = ({\n    metrics,\n    adviseDocument,\n    lastLog,\n}: IAdviseSummary) => {\n    return (\n        <Box>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <AdviseHeader\n                        adviseDocument={adviseDocument}\n                        lastLog={lastLog}\n                    />\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Thoth Advise Summary\",\n                        }}\n                        cardBody={<AdviseMetric metric={metrics?.advise} />}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Dependencies Summary\",\n                        }}\n                        cardBody={\n                            <DependenciesMetric\n                                metric={metrics?.dependencies}\n                            />\n                        }\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Licenses Summary\",\n                        }}\n                        cardBody={<LicenseMetric metric={metrics?.licenses} />}\n                    />\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n","import * as React from \"react\";\nimport useScrollTrigger from \"@mui/material/useScrollTrigger\";\nimport Box from \"@mui/material/Box\";\nimport Fab from \"@mui/material/Fab\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\nimport Zoom from \"@mui/material/Zoom\";\n\ninterface Props {\n    children: React.ReactElement;\n    window?: () => Window;\n}\n\nfunction ScrollTop(props: Props) {\n    const { children, window } = props;\n    const trigger = useScrollTrigger({\n        target: window ? window() : undefined,\n        disableHysteresis: true,\n        threshold: 100,\n    });\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        const anchor = (\n            (event.target as HTMLDivElement).ownerDocument || document\n        ).querySelector(\"#back-to-top-anchor\");\n\n        if (anchor) {\n            anchor.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n            });\n        }\n    };\n\n    return (\n        <Zoom in={trigger}>\n            <Box\n                onClick={handleClick}\n                role=\"presentation\"\n                sx={{ position: \"fixed\", bottom: 16, right: 16 }}\n            >\n                {children}\n            </Box>\n        </Zoom>\n    );\n}\n\nexport function ScrollToTop(props: Props) {\n    return (\n        <React.Fragment>\n            <div id=\"back-to-top-anchor\" />\n            {props.children}\n            <ScrollTop {...props}>\n                <Fab\n                    color=\"secondary\"\n                    size=\"small\"\n                    aria-label=\"scroll back to top\"\n                >\n                    <KeyboardArrowUpIcon />\n                </Fab>\n            </ScrollTop>\n        </React.Fragment>\n    );\n}\n","import React, { useMemo } from \"react\";\n\nimport {\n    Box,\n    Grid,\n    FormControl,\n    Stack,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    Typography,\n    TextField,\n    IconButton,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Paper,\n} from \"@mui/material\";\n\nimport AddRoundedIcon from \"@mui/icons-material/AddRounded\";\n\nimport {\n    AdviseDocumentRequestResponseSuccess,\n    useAdviseDocument,\n} from \"../api\";\nimport { LOCAL_STORAGE_KEY } from \"config\";\nimport { components } from \"lib/schema\";\n\nimport { Requirements } from \"../../../hooks\";\nimport { Variant } from \"@mui/material/styles/createTypography\";\nimport { Lockfile } from \"../../../utils/formatLockfile\";\nimport { ScrollToTop } from \"../../../components/Elements/ScrollToTop\";\n\ninterface IAdviseCompare {\n    adviseDocument?: AdviseDocumentRequestResponseSuccess;\n}\n\nexport const AdviseCompare = ({ adviseDocument }: IAdviseCompare) => {\n    const [comparison, setComparison] = React.useState(\n        adviseDocument?.metadata?.document_id ?? \"\",\n    );\n\n    const compareDoc = useAdviseDocument(comparison);\n\n    const [open, setOpen] = React.useState(false);\n    const [importText, setImportText] = React.useState(\"\");\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event?: any, reason?: string) => {\n        if (reason !== \"backdropClick\") {\n            setOpen(false);\n        }\n    };\n\n    const handleImport = () => {\n        const ids = localStorage.getItem(LOCAL_STORAGE_KEY) ?? \"\";\n\n        const split = ids.split(\",\");\n        if (!split.includes(importText)) {\n            split.push(importText);\n            localStorage.setItem(LOCAL_STORAGE_KEY, split.join(\",\"));\n        }\n\n        setImportText(\"\");\n        setOpen(false);\n    };\n\n    const handleChange = (event: SelectChangeEvent) => {\n        setComparison(event.target.value);\n    };\n\n    const localHistory: string[] = useMemo(() => {\n        const history: string[] = [];\n\n        if (\n            (\n                adviseDocument?.result?.parameters\n                    ?.project as components[\"schemas\"][\"ProjectDef\"]\n            )?.requirements_locked\n        ) {\n            history.push(\"Original Lockfile\");\n        }\n\n        const ids = localStorage.getItem(LOCAL_STORAGE_KEY);\n        if (ids) {\n            history.push(...ids.split(\",\").filter(s => s !== \"\"));\n        }\n\n        return history;\n    }, [importText === \"\"]);\n\n    const COMPARE_COLORS = {\n        old: {\n            text: \"errorContainer.contrastText\",\n            background: \"errorContainer.main\",\n        },\n        new: {\n            text: \"successContainer.contrastText\",\n            background: \"successContainer.main\",\n        },\n        change: {\n            text: \"warningContainer.contrastText\",\n            background: \"warningContainer.main\",\n        },\n        equal: {\n            text: undefined,\n            background: undefined,\n        },\n    };\n\n    const comparePaths = (\n        obj1: any,\n        obj2: any,\n        label?: string,\n        mapping = (obj: typeof obj1) => obj,\n    ) => {\n        // if not null\n        const obj1_mapped = obj1 ? mapping(obj1) : null;\n        const obj2_mapped = obj2 ? mapping(obj2) : null;\n\n        // compare if equal\n        if (obj1_mapped && obj2_mapped) {\n            if (obj1_mapped === obj2_mapped) {\n                return (\n                    <React.Fragment key={label}>\n                        {renderCompareLine(\n                            obj1_mapped as string,\n                            \"equal\",\n                            label,\n                        )}\n                        {renderCompareLine(\n                            obj2_mapped as string,\n                            \"equal\",\n                            label,\n                        )}\n                    </React.Fragment>\n                );\n            } else {\n                return (\n                    <React.Fragment key={label}>\n                        {renderCompareLine(\n                            obj1_mapped as string,\n                            \"change\",\n                            label,\n                        )}\n                        {renderCompareLine(\n                            obj2_mapped as string,\n                            \"change\",\n                            label,\n                        )}\n                    </React.Fragment>\n                );\n            }\n        } else if (obj1_mapped) {\n            return (\n                <React.Fragment key={label}>\n                    {renderCompareLine(obj1_mapped as string, \"old\", label)}\n                    {renderCompareLine(obj2_mapped as string, \"\", label)}\n                </React.Fragment>\n            );\n        } else if (obj2_mapped) {\n            return (\n                <React.Fragment key={label}>\n                    {renderCompareLine(obj1_mapped as string, \"\", label)}\n                    {renderCompareLine(obj2_mapped as string, \"new\", label)}\n                </React.Fragment>\n            );\n        } else {\n            return undefined;\n        }\n    };\n\n    const renderCompareLine = (\n        value: string,\n        compareType: \"old\" | \"new\" | \"equal\" | \"change\" | \"\",\n        label?: string,\n    ) => {\n        const borderStyles = {\n            height: \"100%\",\n            paddingBottom: 0.25,\n            paddingTop: 0.25,\n            borderRadius: 0,\n            borderStyle: \"hidden solid hidden solid\",\n            overflow: \"hidden\",\n        };\n        if (compareType) {\n            return (\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            backgroundColor:\n                                COMPARE_COLORS[compareType].background,\n                            ...borderStyles,\n                        }}\n                    >\n                        <Stack direction=\"row\">\n                            {compareType !== \"equal\" ? (\n                                <Typography\n                                    fontWeight=\"bold\"\n                                    sx={{\n                                        textAlign: \"center\",\n                                        minWidth: \"2rem\",\n                                        color: COMPARE_COLORS[compareType].text,\n                                    }}\n                                    variant=\"body2\"\n                                >\n                                    {compareType === \"old\"\n                                        ? \"-\"\n                                        : compareType === \"new\"\n                                        ? \"+\"\n                                        : \"~\"}\n                                </Typography>\n                            ) : (\n                                <Box sx={{ minWidth: \"2rem\" }} />\n                            )}\n                            {label ? (\n                                <Typography\n                                    sx={{\n                                        marginRight: 1,\n                                        color: COMPARE_COLORS[compareType].text,\n                                    }}\n                                    variant=\"body2\"\n                                    fontWeight=\"bold\"\n                                >\n                                    {label + \":\"}\n                                </Typography>\n                            ) : undefined}\n                            <Typography\n                                sx={{ color: COMPARE_COLORS[compareType].text }}\n                                display=\"inline\"\n                                variant=\"body2\"\n                            >\n                                {value.toString()}\n                            </Typography>\n                        </Stack>\n                    </Paper>\n                </Grid>\n            );\n        } else {\n            return (\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            backgroundColor: COMPARE_COLORS[\"equal\"].background,\n                            ...borderStyles,\n                        }}\n                    >\n                        <Box />\n                    </Paper>\n                </Grid>\n            );\n        }\n    };\n\n    const doubleRenderTypography = (\n        variant: Variant,\n        text: string,\n        styleOverrides: { [key: string]: string | number | undefined } = {},\n    ) => {\n        const headerStyles = {\n            paddingLeft: 4,\n            paddingBottom: 1,\n            paddingTop: 4,\n            borderRadius: 0,\n            borderStyle: \"hidden solid hidden solid\",\n            ...styleOverrides,\n        };\n        return (\n            <>\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            ...headerStyles,\n                        }}\n                    >\n                        <Typography variant={variant}>{text}</Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper\n                        variant=\"outlined\"\n                        sx={{\n                            ...headerStyles,\n                        }}\n                    >\n                        <Typography variant={variant}>{text}</Typography>\n                    </Paper>\n                </Grid>\n            </>\n        );\n    };\n\n    const compareArrays = (\n        array1: any[] = [],\n        array2: any[] = [],\n        mapping = (obj: any) => obj,\n    ) => {\n        const s1 = array1.map(e => JSON.stringify(e));\n        const s2 = array2.map(e => JSON.stringify(e));\n        const set1 = new Set(s1);\n        const set2 = new Set(s2);\n\n        const merged = [...new Set([...s1, ...s2])];\n\n        return merged.sort().map(key => {\n            const value = JSON.parse(key);\n            return comparePaths(\n                set1.has(key) ? value : undefined,\n                set2.has(key) ? value : undefined,\n                undefined,\n                mapping,\n            );\n        });\n    };\n\n    const createProjectCompare = (\n        proj1?: components[\"schemas\"][\"ProjectDef\"],\n        proj2?: components[\"schemas\"][\"ProjectDef\"],\n    ) => {\n        const runtimeEnvironment: (keyof components[\"schemas\"][\"RuntimeEnvironment\"])[] =\n            [\n                \"name\",\n                \"python_version\",\n                \"cuda_version\",\n                \"openblas_version\",\n                \"openmpi_version\",\n                \"cudnn_version\",\n                \"mkl_version\",\n                \"platform\",\n                \"base_image\",\n            ];\n        const dev_packages = [\n            ...new Set([\n                ...Object.keys(\n                    (proj1?.requirements as Requirements)?.[\"dev-packages\"] ??\n                        {},\n                ),\n                ...Object.keys(\n                    (proj2?.requirements as Requirements)?.[\"dev-packages\"] ??\n                        {},\n                ),\n            ]),\n        ];\n        const packages = [\n            ...new Set([\n                ...Object.keys(\n                    (proj1?.requirements as Requirements)?.packages ?? {},\n                ),\n                ...Object.keys(\n                    (proj2?.requirements as Requirements)?.packages ?? {},\n                ),\n            ]),\n        ];\n        const requirements_locked = [\n            ...new Set([\n                ...Object.keys(\n                    (proj1?.requirements_locked as Lockfile)?.default ?? {},\n                ),\n                ...Object.keys(\n                    (proj2?.requirements_locked as Lockfile)?.default ?? {},\n                ),\n            ]),\n        ];\n\n        return (\n            <React.Fragment>\n                {dev_packages.length > 0\n                    ? doubleRenderTypography(\"h6\", \"Pipfile Dev Packages\", {\n                          paddingTop: 0.5,\n                          paddingBottom: 0.5,\n                      })\n                    : undefined}\n                {dev_packages.map(key => {\n                    return comparePaths(\n                        (proj1?.requirements as Requirements)?.[\"dev-packages\"][\n                            key\n                        ],\n                        (proj2?.requirements as Requirements)?.[\"dev-packages\"][\n                            key\n                        ],\n                        key,\n                    );\n                })}\n\n                {packages.length > 0\n                    ? doubleRenderTypography(\"h6\", \"Pipfile Packages\", {\n                          paddingTop: 0.5,\n                          paddingBottom: 0.5,\n                      })\n                    : undefined}\n                {packages.map(key => {\n                    return comparePaths(\n                        (proj1?.requirements as Requirements)?.packages[key],\n                        (proj2?.requirements as Requirements)?.packages[key],\n                        key,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Pipfile.lock Sources\")}\n                {compareArrays(\n                    (proj1?.requirements_locked as Lockfile)?._meta?.sources,\n                    (proj2?.requirements_locked as Lockfile)?._meta?.sources,\n                    obj => {\n                        return `${obj.name} (${obj.url})`;\n                    },\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Pipfile.lock Packages\")}\n                {requirements_locked.map(key => {\n                    return comparePaths(\n                        (proj1?.requirements_locked as Lockfile)?.default[key],\n                        (proj2?.requirements_locked as Lockfile)?.default[key],\n                        key,\n                        obj => {\n                            return obj?.version;\n                        },\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Runtime Environment\")}\n                {runtimeEnvironment.map(field => {\n                    return comparePaths(\n                        proj1?.runtime_environment?.[field],\n                        proj2?.runtime_environment?.[field],\n                        field,\n                    );\n                })}\n\n                {comparePaths(\n                    proj1?.runtime_environment?.operating_system,\n                    proj1?.runtime_environment?.operating_system,\n                    \"operating_system\",\n                    obj => {\n                        return obj.name + \" \" + obj.version;\n                    },\n                )}\n                {comparePaths(\n                    proj1?.runtime_environment?.hardware,\n                    proj1?.runtime_environment?.hardware,\n                    \"hardware\",\n                    obj => {\n                        let text = \"\";\n                        text += obj.cpu_model ?? \" \";\n                        text += obj.cpu_family ?? \" \";\n                        text += obj.gpu_model ?? \" \";\n                        if (text.trim()) {\n                            return text;\n                        }\n                    },\n                )}\n            </React.Fragment>\n        );\n    };\n\n    const createCompare = (\n        doc1: AdviseDocumentRequestResponseSuccess,\n        doc2: AdviseDocumentRequestResponseSuccess,\n    ) => {\n        const metadataFields: (keyof AdviseDocumentRequestResponseSuccess[\"metadata\"])[] =\n            [\n                \"document_id\",\n                \"analyzer\",\n                \"analyzer_version\",\n                \"datetime\",\n                \"thoth_deployment_name\",\n            ];\n        const argumentFields: string[] = [\n            \"beam_width\",\n            \"constraints\",\n            \"count\",\n            \"dev\",\n            \"labels\",\n            \"library_usage\",\n            \"limit\",\n            \"limit_latest_versions\",\n            \"no_pretty\",\n            \"output\",\n            \"pipeline\",\n            \"plot\",\n            \"predictor\",\n            \"recommendation_type\",\n            \"requirements\",\n            \"requirements_format\",\n            \"requirements_locked\",\n            \"runtime_environment\",\n            \"seed\",\n            \"user_stack_scoring\",\n        ];\n        const distributionFields: (keyof AdviseDocumentRequestResponseSuccess[\"metadata\"][\"distribution\"])[] =\n            [\"codename\", \"id\", \"like\", \"version\"];\n        const osReleaseFields: (keyof AdviseDocumentRequestResponseSuccess[\"metadata\"][\"os_release\"])[] =\n            [\"id\", \"name\", \"platform_id\", \"version\"];\n\n        return (\n            <>\n                {doubleRenderTypography(\"h5\", \"Metadata\", { paddingTop: 0 })}\n                {metadataFields.map(field => {\n                    return comparePaths(\n                        doc1?.metadata?.[field],\n                        doc2.metadata?.[field],\n                        field,\n                    );\n                })}\n                {comparePaths(\n                    doc1?.result?.error_msg,\n                    doc2?.result?.error_msg,\n                    \"error_msg\",\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Arguments\")}\n                {argumentFields.map(field => {\n                    return comparePaths(\n                        (\n                            doc1?.metadata?.arguments?.advise as {\n                                [key: string]: any;\n                            }\n                        )?.[field],\n                        (\n                            doc2?.metadata?.arguments?.advise as {\n                                [key: string]: any;\n                            }\n                        )?.[field],\n                        field,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Distribution\")}\n                {distributionFields.map(field => {\n                    return comparePaths(\n                        doc1?.metadata?.distribution?.[field],\n                        doc2?.metadata?.distribution?.[field],\n                        field,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"OS Release\")}\n                {osReleaseFields.map(field => {\n                    return comparePaths(\n                        doc1?.metadata?.os_release?.[field],\n                        doc2?.metadata?.os_release?.[field],\n                        field as string,\n                    );\n                })}\n\n                {doubleRenderTypography(\"h6\", \"Python\")}\n                {comparePaths(\n                    doc1?.metadata?.python,\n                    doc2?.metadata?.python,\n                    \"version\",\n                    obj => {\n                        return `${obj.major}.${obj.minor}.${obj.micro}`;\n                    },\n                )}\n                {comparePaths(\n                    doc1?.metadata?.python?.api_version,\n                    doc2?.metadata?.python?.api_version,\n                    \"api_version\",\n                )}\n                {comparePaths(\n                    doc1?.metadata?.python?.implementation_name,\n                    doc2?.metadata?.python?.implementation_name,\n                    \"implementation_name\",\n                )}\n                {comparePaths(\n                    doc1?.metadata?.python?.releaselevel,\n                    doc2?.metadata?.python?.releaselevel,\n                    \"release level\",\n                )}\n\n                {doubleRenderTypography(\"h5\", \"Result\")}\n                {comparePaths(\n                    doc1?.result?.report?.accepted_final_states_count,\n                    doc2?.result?.report?.accepted_final_states_count,\n                    \"accepted_final_states_count\",\n                )}\n                {comparePaths(\n                    doc1?.result?.report?.discarded_final_states_count,\n                    doc2?.result?.report?.discarded_final_states_count,\n                    \"discarded_final_states_count\",\n                )}\n                {comparePaths(\n                    doc1?.result?.report?.resolver_iterations,\n                    doc2?.result?.report?.resolver_iterations,\n                    \"resolver_iterations\",\n                )}\n                {comparePaths(\n                    doc1?.result?.report?.pipeline,\n                    doc2?.result?.report?.pipeline,\n                    \"pipeline\",\n                )}\n\n                {createProjectCompare(\n                    doc1?.result?.report?.products?.[0]?.project,\n                    doc2?.result?.report?.products?.[0]?.project,\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Advised Manifest Changes\")}\n                {compareArrays(\n                    doc1?.result?.report?.products?.[0]\n                        ?.advised_manifest_changes ?? [],\n                    doc2?.result?.report?.products?.[0]\n                        ?.advised_manifest_changes ?? [],\n                    obj => {\n                        let text = \"\";\n                        obj.forEach(\n                            (change: {\n                                patch: {\n                                    path: any;\n                                    op: any;\n                                    value: { name: any; value: any };\n                                };\n                            }) => {\n                                text += `[ ${change?.patch?.path}; ${change?.patch?.op}; ${change?.patch?.value?.name}: ${change?.patch?.value?.value} ]`;\n                            },\n                        );\n                        return text;\n                    },\n                )}\n\n                {doubleRenderTypography(\"h6\", \"Stack Info\")}\n                {compareArrays(\n                    doc1?.result?.report?.stack_info,\n                    doc2?.result?.report?.stack_info,\n                    obj => {\n                        return obj.message;\n                    },\n                )}\n            </>\n        );\n    };\n\n    const compareJSX = useMemo(() => {\n        if (!adviseDocument || !compareDoc.data?.data) {\n            if (comparison === \"Original Lockfile\") {\n                return (\n                    <React.Fragment>\n                        {createProjectCompare(\n                            adviseDocument?.result?.report?.products?.[0]\n                                ?.project,\n                            (\n                                adviseDocument?.result?.parameters as {\n                                    project: components[\"schemas\"][\"ProjectDef\"];\n                                }\n                            )?.project,\n                        )}\n                        {doubleRenderTypography(\"body1\", \" \", {\n                            borderBottomStyle: \"solid\",\n                            borderRadius: undefined,\n                            borderTopLeftRadius: 0,\n                            borderTopRightRadius: 0,\n                        })}\n                    </React.Fragment>\n                );\n            }\n            return undefined;\n        }\n        return (\n            <>\n                {createCompare(adviseDocument, compareDoc.data?.data)}\n                {doubleRenderTypography(\"body1\", \" \", {\n                    borderBottomStyle: \"solid\",\n                    borderRadius: undefined,\n                    borderTopLeftRadius: 0,\n                    borderTopRightRadius: 0,\n                })}\n            </>\n        );\n    }, [adviseDocument, compareDoc.data?.data]);\n\n    if (!adviseDocument) {\n        return (\n            <Box\n                height=\"100vh\"\n                flexDirection=\"column\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h5\" align=\"center\">\n                    Compare not available\n                </Typography>\n                <Typography variant=\"body2\" align=\"center\">\n                    The adviser has not finished resolving packages\n                </Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <ScrollToTop>\n            <Box>\n                <Dialog disableEscapeKeyDown open={open} onClose={handleClose}>\n                    <DialogTitle>Import another Advise document</DialogTitle>\n                    <DialogContent>\n                        <Box\n                            component=\"form\"\n                            sx={{ display: \"flex\", flexWrap: \"wrap\" }}\n                        >\n                            <TextField\n                                onChange={event =>\n                                    setImportText(event.target.value)\n                                }\n                                label=\"Document ID\"\n                                variant=\"outlined\"\n                                size=\"small\"\n                            />\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => handleClose()}>Cancel</Button>\n                        <Button onClick={() => handleImport()}>Import</Button>\n                    </DialogActions>\n                </Dialog>\n                <Grid container mb={1} columnSpacing={10}>\n                    <Grid item xs={6}>\n                        <Paper\n                            variant=\"outlined\"\n                            sx={{\n                                height: \"100%\",\n                                borderTopStyle: \"solid\",\n                                borderBottomLeftRadius: 0,\n                                borderBottomRightRadius: 0,\n                                paddingBottom: 4,\n                                paddingTop: 4,\n                                borderStyle: \"solid solid hidden solid\",\n                            }}\n                        >\n                            <Typography\n                                sx={{\n                                    textAlign: \"center\",\n                                    textOverflow: \"ellipsis\",\n                                    whiteSpace: \"nowrap\",\n                                    overflow: \"hidden\",\n                                }}\n                                fontWeight=\"bold\"\n                                variant=\"h6\"\n                            >\n                                Current Advise Document\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Paper\n                            variant=\"outlined\"\n                            sx={{\n                                height: \"100%\",\n                                borderTopStyle: \"solid\",\n                                borderBottomLeftRadius: 0,\n                                borderBottomRightRadius: 0,\n                                paddingBottom: 4,\n                                paddingTop: 4,\n                                borderStyle: \"solid solid hidden solid\",\n                            }}\n                        >\n                            <Stack\n                                direction=\"row\"\n                                spacing={1}\n                                sx={{ marginX: \"10%\" }}\n                            >\n                                <FormControl fullWidth>\n                                    <Select\n                                        value={comparison}\n                                        displayEmpty\n                                        onChange={handleChange}\n                                        size=\"small\"\n                                    >\n                                        <MenuItem disabled value=\"\">\n                                            <em>Select a comparison</em>\n                                        </MenuItem>\n                                        {localHistory.map((item, i) => {\n                                            return (\n                                                <MenuItem\n                                                    key={item + i}\n                                                    value={item}\n                                                >\n                                                    {item}\n                                                </MenuItem>\n                                            );\n                                        })}\n                                    </Select>\n                                </FormControl>\n                                <IconButton onClick={handleClickOpen}>\n                                    <AddRoundedIcon />\n                                </IconButton>\n                            </Stack>\n                        </Paper>\n                    </Grid>\n                    {compareJSX}\n                </Grid>\n            </Box>\n        </ScrollToTop>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { components } from \"lib/schema\";\nimport { PackageNodeValue } from \"../../lib/interfaces/PackageNodeValue\";\n\nexport type AdviseMetricType = {\n    justification: Record<string, number>;\n    /** which build is being displayed (new or old) */\n    build: string;\n};\n\nexport const useAdviseMetric = (\n    graph?: Graph<Node<PackageNodeValue>>,\n    adviseDocument?: components[\"schemas\"][\"AdviserResultResponse\"],\n) => {\n    const [metric, setMetric] = useState<AdviseMetricType>();\n\n    useEffect(() => {\n        if (!graph || !adviseDocument?.metadata) {\n            return;\n        }\n\n        const base: AdviseMetricType = {\n            justification: {},\n            build: \"\",\n        };\n\n        //build environment\n        base.build = `We have analysed an application stack running on ${adviseDocument.metadata.os_release.name} ${adviseDocument.metadata.os_release.version}, running Python (${adviseDocument.metadata.python.implementation_name}) ${adviseDocument.metadata.python.major}.${adviseDocument.metadata.python.minor}.${adviseDocument.metadata.python.micro}. It was Adviser Job ID ${adviseDocument.metadata.document_id}, by ${adviseDocument.metadata.analyzer} v${adviseDocument.metadata.analyzer_version}.`;\n\n        //justification counts\n        adviseDocument?.result?.report?.products?.[0]?.justification.forEach(\n            justification => {\n                if (base.justification[justification.type]) {\n                    base.justification[justification.type] =\n                        base.justification[justification.type] + 1;\n                } else {\n                    base.justification[justification.type] = 1;\n                }\n            },\n        );\n        setMetric(base);\n    }, [graph, adviseDocument]);\n\n    return metric;\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type DependencyMetricType = {\n    /** summary object of all roots aggregated */\n    all: {\n        /** number of dependencies directly related to root packages */\n        direct?: number;\n        /** number of dependencies directly or indirectly related to the direct packages*/\n        indirect?: number;\n        /** number of dependencies that have no dependents*/\n        roots?: number;\n    };\n    /** an object of key (package name) value pairs of specific roots with direct and indirect parameters for each value */\n    roots: {\n        [key: string]: {\n            /** roots own direct packages */\n            direct?: number;\n            /** roots own indirect packages */\n            indirect?: number;\n        };\n    };\n};\n\nexport const useDependencyMetric = (graph?: Graph<Node<PackageNodeValue>>) => {\n    const [metric, setMetric] = useState<DependencyMetricType>();\n\n    useEffect(() => {\n        if (!graph) {\n            return;\n        }\n\n        const base: DependencyMetricType = {\n            all: {},\n            roots: {},\n        };\n\n        const roots: string[] = [];\n        graph.nodes.forEach(value => {\n            if (value.value.depth === 0) {\n                roots.push(value.key);\n            }\n        });\n\n        const visited = new Set();\n\n        // for each starting node\n        roots.forEach(root => {\n            const rootObj = graph.nodes.get(root);\n            if (!rootObj) {\n                return;\n            }\n\n            const bfs = graph.graphSearch(rootObj);\n            const visitedOrder = Array.from(bfs);\n\n            visitedOrder.forEach(node => {\n                if (node.key === \"*App\") {\n                    return;\n                }\n\n                if (visited.has(node.value.id)) {\n                    return;\n                } else {\n                    visited.add(node.value.id);\n                }\n\n                const depth =\n                    node.value.depth === 0\n                        ? \"roots\"\n                        : node.value.depth === 1\n                        ? \"direct\"\n                        : \"indirect\";\n\n                base.all[depth] = (base.all[depth] ?? 0) + 1;\n\n                if (depth !== \"roots\") {\n                    if (!base.roots[root]) {\n                        base.roots[root] = {};\n                    }\n                    base.roots[root][depth] =\n                        (base.roots?.[root]?.[depth] ?? 0) + 1;\n                }\n            });\n        });\n\n        setMetric(base);\n    }, [graph]);\n\n    return metric;\n};\n","import { useEffect, useState } from \"react\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type LicenseMetricType = {\n    /** The license name */\n    [key: string]: {\n        /** The packages that use this license as an object */\n        packages: {\n            [key: string]: {\n                depth: number;\n                specific?: string;\n            };\n        };\n        /** License specific information */\n        metadata: {\n            /** If license is approved by OSI standards */\n            isOsiApproved: boolean | null;\n        };\n    };\n};\n\nexport const useLicenseMetric = (graph?: Graph<Node<PackageNodeValue>>) => {\n    const [metric, setMetric] = useState<LicenseMetricType>();\n\n    useEffect(() => {\n        if (!graph) {\n            return;\n        }\n\n        let base: LicenseMetricType = {};\n\n        const roots: string[] = [];\n        graph.nodes.forEach(value => {\n            if (value.value.depth === 0) {\n                roots.push(value.key);\n            }\n        });\n\n        const visited = new Set();\n\n        // for each starting node\n        roots.forEach(root => {\n            const rootObj = graph.nodes.get(root);\n            if (!rootObj) {\n                return;\n            }\n\n            const bfs = graph.graphSearch(rootObj);\n            const visitedOrder = Array.from(bfs);\n\n            visitedOrder.forEach(node => {\n                if (node.key === \"*App\") {\n                    return;\n                }\n\n                if (visited.has(node.value.id)) {\n                    return;\n                } else {\n                    visited.add(node.value.id);\n                }\n\n                // licence metric\n                type PackageLicenses = {\n                    generalLicense: string;\n                    specificLicense?: string;\n                    isOsiApproved: boolean | null;\n                }[];\n                const packageLicenses: PackageLicenses = [];\n\n                // get general classification\n                node?.value?.metadata?.Classifier?.forEach(classifier => {\n                    const parsed = classifier.split(\" :: \");\n\n                    if (parsed[0] === \"License\") {\n                        if (parsed[1] === \"OSI Approved\") {\n                            packageLicenses.push({\n                                generalLicense:\n                                    parsed?.[2] ?? node.value.metadata?.License,\n                                specificLicense: node.value.metadata?.License,\n                                isOsiApproved: true,\n                            });\n                        } else {\n                            packageLicenses.push({\n                                generalLicense:\n                                    parsed?.[1] ?? node.value.metadata?.License,\n                                specificLicense: node.value.metadata?.License,\n                                isOsiApproved: false,\n                            });\n                        }\n                    }\n                });\n\n                if (packageLicenses.length === 0) {\n                    packageLicenses.push({\n                        generalLicense: node?.value?.metadata?.License ?? \"N/A\",\n                        specificLicense:\n                            node?.value?.metadata?.License ?? \"N/A\",\n                        isOsiApproved: null,\n                    });\n                }\n\n                // get specific classification\n                packageLicenses.forEach(license => {\n                    if (!base[license.generalLicense]) {\n                        base[license.generalLicense] = {\n                            packages: {},\n                            metadata: {\n                                isOsiApproved: license.isOsiApproved,\n                            },\n                        };\n                    }\n\n                    base = {\n                        ...base,\n                        [license.generalLicense]: {\n                            ...base[license.generalLicense],\n                            packages: {\n                                ...(base[license.generalLicense].packages ??\n                                    null),\n                                [node.value.id]: {\n                                    depth: node.value?.depth ?? 0,\n                                    specific: license.specificLicense,\n                                },\n                            },\n                        },\n                    };\n                });\n            });\n        });\n\n        setMetric(base);\n    }, [graph]);\n\n    return metric;\n};\n","import { useMemo } from \"react\";\nimport {\n    useLicenseMetric,\n    useDependencyMetric,\n    useAdviseMetric,\n    DependencyMetricType,\n    LicenseMetricType,\n    AdviseMetricType,\n} from \"hooks/metrics\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { AdviseDocumentRequestResponseSuccess } from \"../api\";\n\nexport type AllMetrics = {\n    advise: AdviseMetricType | null;\n    dependencies: DependencyMetricType | null;\n    licenses: LicenseMetricType | null;\n};\n\nexport function useMetrics(\n    graph?: Graph<Node<PackageNodeValue>>,\n    adviseDocument?: AdviseDocumentRequestResponseSuccess,\n) {\n    const adviseMetric = useAdviseMetric(graph, adviseDocument);\n    const dependencyMetric = useDependencyMetric(graph);\n    const licenseMetric = useLicenseMetric(graph);\n\n    return useMemo(() => {\n        const base: AllMetrics = {\n            advise: null,\n            dependencies: null,\n            licenses: null,\n        };\n\n        if (adviseMetric) {\n            base.advise = adviseMetric;\n        }\n        if (dependencyMetric) {\n            base.dependencies = dependencyMetric;\n        }\n        if (licenseMetric) {\n            base.licenses = licenseMetric;\n        }\n\n        return base;\n    }, [adviseMetric, dependencyMetric, licenseMetric]);\n}\n","import { useEffect, useRef } from \"react\";\n\nexport const useInterval = (\n    callback: undefined | (() => void),\n    delay: number | null,\n) => {\n    const savedCallback = useRef<undefined | (() => void)>();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n        function tick() {\n            if (savedCallback.current) {\n                savedCallback.current();\n            }\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n};\n","import { Node, NodeValue } from \"lib/interfaces/Node\";\n\n/**\n * Graph data structure implemented with an adjacent list\n */\nexport class Graph<NodeType extends Node<NodeValue>> {\n    nodes: Map<NodeType[\"key\"], NodeType>;\n    visEdges: {\n        id: number | string;\n        to: string;\n        from: string;\n    }[];\n\n    constructor() {\n        this.nodes = new Map();\n        this.visEdges = [];\n    }\n\n    /**\n     * Add a node to the graph.\n     */\n    addVertex(\n        key: NodeType[\"key\"],\n        value: NodeType[\"value\"],\n        Node: new (key: string, value: NodeType[\"value\"]) => NodeType,\n    ): NodeType {\n        let node = this.nodes.get(key);\n        if (node) {\n            return node;\n        }\n\n        node = new Node(key, value);\n        this.nodes.set(key, node);\n        return node;\n    }\n\n    /**\n     * Create a connection between the source node and the destination node.\n     * If the nodes don't exist, then it will make them on the fly.\n     */\n    addEdge(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n    ): [NodeType | undefined, NodeType | undefined] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n\n        if (sourceNode && destinationNode) {\n            sourceNode.addAdjacent(destinationNode);\n        }\n\n        return [sourceNode, destinationNode];\n    }\n\n    /**\n     * Generic graph search where we can pass a bfs or dfs\n     */\n    *graphSearch(first: NodeType, type = \"bfs\"): Generator<NodeType> {\n        const visited = new Set();\n        const visitList = [];\n\n        visitList.push(first);\n\n        while (visitList.length !== 0) {\n            const node = type === \"dfs\" ? visitList.pop() : visitList.shift();\n            if (node && !visited.has(node)) {\n                yield node;\n                visited.add(node);\n                node.getAdjacents().forEach(adj => visitList.push(adj));\n            }\n        }\n    }\n\n    /**\n     * Find a path between source and destination\n     * It might not be the optimal path\n     */\n    findPath(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n        path: Set<NodeType> = new Set(),\n    ): NodeType[] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n        const newPath = new Set(path);\n\n        if (!destinationNode || !sourceNode) return [];\n\n        newPath.add(sourceNode);\n\n        if (source === destination) {\n            return Array.from(newPath);\n        }\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const node of sourceNode.getAdjacents()) {\n            if (!newPath.has(node)) {\n                const nextPath = this.findPath(\n                    node.key, // TODO might still be node.value\n                    destination,\n                    newPath,\n                );\n                if (nextPath.length) {\n                    return nextPath;\n                }\n            }\n        }\n\n        return [];\n    }\n\n    findAllNodesOnAllPaths(\n        source: NodeType,\n        destinationKey: NodeType[\"key\"],\n        visited: Map<NodeType[\"key\"], NodeType> = new Map(),\n    ): Map<NodeType[\"key\"], NodeType> {\n        const visitList: (NodeType | undefined)[] = [];\n\n        visitList.push(source);\n\n        while (visitList.length !== 0) {\n            const node = visitList.pop();\n            if (node && node.key === destinationKey) {\n                continue;\n            }\n            if (node && !visited.has(node.key)) {\n                visited.set(node.key, node);\n                node.parents.forEach(parent =>\n                    visitList.push(this.nodes.get(parent)),\n                );\n            }\n        }\n\n        return visited;\n    }\n\n    /**\n     * Find all paths from source to destination\n     */\n    findAllPaths(\n        source: NodeType[\"key\"],\n        destination: NodeType[\"key\"],\n        path: Set<NodeType> = new Set(),\n    ): NodeType[][] {\n        const sourceNode = this.nodes.get(source);\n        const destinationNode = this.nodes.get(destination);\n        const newPath = new Set(path);\n\n        if (!destinationNode || !sourceNode) return [];\n\n        newPath.add(sourceNode);\n\n        if (source === destination) {\n            return [Array.from(newPath)];\n        }\n\n        const paths: NodeType[][] = [];\n        sourceNode.getAdjacents().forEach(node => {\n            if (!newPath.has(node)) {\n                const nextPaths = this.findAllPaths(\n                    node.key, // TODO might need to use node.value.id\n                    destination,\n                    newPath,\n                );\n                nextPaths.forEach(nextPath => {\n                    paths.push(nextPath);\n                });\n            }\n        });\n        return paths;\n    }\n}\n","export interface NodeValue {\n    [key: string]: unknown;\n}\n\n/**\n * Graph node/vertex that hold adjacency nodes\n * For performance, uses a HashSet instead of array for adjacent.\n */\nexport class Node<GenericNodeValue extends NodeValue> {\n    /** Nodes connected (children) to this node **/\n    adjacents: Set<this>;\n    /** the unique identifier **/\n    key: string;\n    value: GenericNodeValue;\n    /** Nodes connected (parents) to this node **/\n    parents: Set<string>;\n\n    constructor(key: string, value: GenericNodeValue) {\n        this.adjacents = new Set(); // adjacency list\n        this.key = key; // key\n        this.value = value;\n        this.parents = new Set<string>();\n    }\n\n    /**\n     * Add node to adjacency list\n     * Runtime: O(1)\n     * @param {this} node\n     */\n    addAdjacent(node: this) {\n        this.adjacents.add(node);\n    }\n\n    /**\n     * Check if a Node is adjacent to other\n     * Runtime: O(1)\n     * @param {this} node\n     */\n    isAdjacent(node: this) {\n        return this.adjacents.has(node);\n    }\n\n    /**\n     * Get all adjacent nodes\n     */\n    getAdjacents() {\n        return Array.from(this.adjacents);\n    }\n}\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { usePackagesMetadata } from \"api\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { components, operations } from \"../lib/schema\";\nimport { PackageMetadata } from \"../lib/types/PackageMetadata\";\nimport { DispatchContext } from \"../stores/Global\";\n\nexport type Requirements = {\n    \"dev-packages\": { [key: string]: string };\n    packages: { [key: string]: string };\n    requires: {\n        python_version: string;\n    };\n    source: {\n        name: string;\n        url: string;\n        verify_ssl: boolean;\n    }[];\n};\n\n/**\n * Given a list of packages, create a graph using metadata information.\n */\nexport function useGraph(\n    data: operations[\"get_python_package_version_metadata\"][\"parameters\"][\"query\"][] = [],\n    knownRoots?: Requirements[\"packages\"],\n    justifications?: components[\"schemas\"][\"Justification\"],\n) {\n    const { updateLoading } = useContext(DispatchContext);\n    const allMetadata = usePackagesMetadata(data);\n\n    const [loading, setLoading] = useState(true);\n    const [graph, setGraph] = useState<Graph<Node<PackageNodeValue>>>();\n\n    useEffect(() => {\n        if (!allMetadata || allMetadata.length === 0) {\n            return;\n        }\n\n        updateLoading(\n            \"graph\",\n            \"Loading package metadata\",\n            allMetadata.filter(query => !query.isLoading).length,\n            allMetadata.length,\n        );\n\n        if (allMetadata.every(query => !query.isLoading)) {\n            setLoading(false);\n        }\n    }, [allMetadata]);\n\n    useEffect(() => {\n        if (loading) {\n            return;\n        } else {\n            updateLoading(\"graph\");\n        }\n\n        // create graph\n        const tempGraph = new Graph<Node<PackageNodeValue>>();\n        const notRoot: unknown[] = [];\n\n        // add data to graph\n        allMetadata.forEach(query => {\n            // if could not find metadata\n            if (query.error) {\n                const error = query.error;\n                const params =\n                    error.response?.data?.parameters ??\n                    error.response?.config?.params;\n\n                const value: PackageNodeValue = {\n                    id: params.name.toLowerCase(),\n                    label: params.name + \" \" + params.version,\n                    name: params.name,\n                    version: params.version,\n                    metadata: null,\n                    depth: 0,\n                };\n\n                // add package to graph\n                tempGraph.addVertex(value.id, value, Node);\n            }\n            // metadata was found\n            else if (query.isSuccess) {\n                const metadata = query.data.data.metadata;\n                const value = {\n                    id: metadata.package_name.toLowerCase(),\n                    label:\n                        metadata.package_name + \" \" + metadata.package_version,\n                    name: metadata.package_name,\n                    version: metadata.package_version,\n                    metadata: metadata.importlib_metadata\n                        .metadata as PackageMetadata,\n                };\n\n                // add package to graph\n                tempGraph.addVertex(value.id, value, Node);\n            }\n        });\n\n        // set edges\n        allMetadata.forEach(query => {\n            if (query.status === \"error\" || !query.data?.data) {\n                return;\n            }\n\n            const currentNode = tempGraph.nodes.get(\n                query.data.data.metadata.package_name.toLowerCase(),\n            );\n\n            if (currentNode) {\n                Object.keys(query.data.data.metadata.dependencies).forEach(\n                    dep => {\n                        const adjacentNode = tempGraph.nodes.get(dep);\n\n                        // if package exists in lockfile\n                        if (adjacentNode) {\n                            // add edge connecting parent and dependency\n                            tempGraph.addEdge(\n                                currentNode.value.id,\n                                adjacentNode.value.id,\n                            );\n                            // set parent\n                            adjacentNode.parents.add(currentNode.value.id);\n                            notRoot.push(adjacentNode.value.id);\n                        }\n                    },\n                );\n            }\n        });\n\n        // add app node to graph\n        const app = tempGraph.addVertex(\n            \"*App\",\n            {\n                id: \"*App\",\n                label: \"App\",\n                depth: -1,\n            },\n            Node,\n        );\n\n        notRoot.push(\"*App\");\n\n        const visited = new Set();\n        const visitList: Node<PackageNodeValue>[] = [];\n\n        // get roots and connect to app\n        tempGraph.nodes.forEach((value, key) => {\n            if (\n                !notRoot.includes(key) ||\n                Object.keys(knownRoots ?? {}).includes(key)\n            ) {\n                value.value.depth = 0;\n                value.parents.add(\"*App\");\n                visitList.push(value);\n                tempGraph.addEdge(app.key, value.key);\n            }\n        });\n\n        const justifiedPackages = new Map();\n\n        if (justifications) {\n            justifications.forEach(\n                (\n                    justification: components[\"schemas\"][\"Justification\"][number] & {\n                        package_name?: string;\n                    },\n                ) => {\n                    const key = justification.package_name ?? \"*App\";\n                    if (justifiedPackages.has(key)) {\n                        justifiedPackages.set(key, [\n                            ...justifiedPackages.get(key),\n                            justification,\n                        ]);\n                    } else {\n                        justifiedPackages.set(key, [justification]);\n                    }\n                },\n            );\n        }\n\n        // set depth and parent packages using dfs\n        while (visitList.length !== 0) {\n            const node = visitList.pop();\n            if (node && !visited.has(node)) {\n                visited.add(node);\n\n                // check if there is a justification for change\n                if (justifiedPackages.has(node.key)) {\n                    node.value.justifications = justifiedPackages.get(node.key);\n                }\n\n                const adjs = node.getAdjacents();\n\n                for (let i = 0; i < adjs.length; i++) {\n                    // update depth\n                    adjs[i].value.depth = Math.min(\n                        (node.value?.depth ?? 0) + 1,\n                        adjs[i].value.depth ?? (node.value?.depth ?? 0) + 2,\n                    );\n                    visitList.push(adjs[i]);\n                }\n            }\n        }\n\n        const visGraphEdges = new Map();\n\n        // add edges from old graph\n        tempGraph.nodes.forEach(value => {\n            // set package edges\n            value.adjacents.forEach(adj => {\n                visGraphEdges.set(value.value.id + adj.value.id, {\n                    id: value.value.id + adj.value.id,\n                    to: value.value.id,\n                    from: adj.value.id,\n                });\n            });\n        });\n\n        // add edges to merged graph Object\n        tempGraph[\"visEdges\"] = Array.from(visGraphEdges.values());\n\n        setGraph(tempGraph);\n    }, [loading, knownRoots]);\n\n    return graph;\n}\n","import React from \"react\";\n\ninterface IAdviseNotFound {\n    analysis_id: string;\n}\n\nexport const AdviseNotFound = ({ analysis_id }: IAdviseNotFound) => {\n    return <div>`&quot;{analysis_id}&quot;` not found</div>;\n};\n","import * as React from \"react\";\nimport { Box } from \"@mui/material\";\n\ninterface IProps {\n    children: NonNullable<React.ReactNode>;\n}\n\n/**\n * Main layout adds margins and spacing to the whole app.\n */\nexport const MainLayout = ({ children }: IProps) => {\n    return (\n        <Box sx={{ marginY: 2, marginRight: 2, height: \"calc(100vh - 32px)\" }}>\n            {children}\n        </Box>\n    );\n};\n","import * as React from \"react\";\nimport {\n    Box,\n    Button,\n    Chip,\n    CSSObject,\n    IconButton,\n    Stack,\n    styled,\n    Theme,\n    Typography,\n} from \"@mui/material\";\nimport MuiDrawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport Divider from \"@mui/material/Divider\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport AutoAwesomeMosaicRoundedIcon from \"@mui/icons-material/AutoAwesomeMosaicRounded\";\nimport ArticleRoundedIcon from \"@mui/icons-material/ArticleRounded\";\nimport CompareArrowsRoundedIcon from \"@mui/icons-material/CompareArrowsRounded\";\nimport TerminalRoundedIcon from \"@mui/icons-material/TerminalRounded\";\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\nimport CircleRoundedIcon from \"@mui/icons-material/CircleRounded\";\nimport { useMemo } from \"react\";\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\nimport WarningAmberOutlinedIcon from \"@mui/icons-material/WarningAmberOutlined\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\nimport MenuRoundedIcon from \"@mui/icons-material/MenuRounded\";\nimport MenuOpenRoundedIcon from \"@mui/icons-material/MenuOpenRounded\";\nimport { hexFromArgb } from \"@material/material-color-utilities\";\n\nimport { activeColor } from \"styles/Theme\";\n\nconst drawerWidth = 360;\n\ninterface IProps {\n    children: React.ReactNode;\n    chipData: {\n        [key: string]: {\n            info: number;\n            warning: number;\n            error: number;\n        };\n    };\n}\n\ninterface ICustomListItem {\n    label: string;\n    to: string;\n    icon?: React.ReactNode;\n    selected: boolean;\n    chipData?: {\n        info: number;\n        warning: number;\n        error: number;\n    };\n    disabled?: boolean;\n    open: boolean;\n    hideOnClosed?: boolean;\n}\n\nconst openedMixin = (theme: Theme): CSSObject => ({\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n    }),\n    overflowX: \"hidden\",\n});\n\nconst closedMixin = (theme: Theme): CSSObject => ({\n    transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: \"80px\",\n});\n\nconst Drawer = styled(MuiDrawer, {\n    shouldForwardProp: prop => prop !== \"open\",\n})(({ theme, open }) => ({\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n    boxSizing: \"border-box\",\n    ...(open && {\n        ...openedMixin(theme),\n        \"& .MuiDrawer-paper\": openedMixin(theme),\n    }),\n    ...(!open && {\n        ...closedMixin(theme),\n        \"& .MuiDrawer-paper\": closedMixin(theme),\n    }),\n}));\n\nconst CustomListItem = ({\n    label,\n    to,\n    selected = false,\n    icon,\n    chipData,\n    disabled,\n    open,\n    hideOnClosed,\n}: ICustomListItem) => {\n    if (!open && hideOnClosed) {\n        return null;\n    }\n\n    return (\n        <ListItem\n            sx={{\n                borderRadius: 100,\n                height: 48,\n                paddingLeft: 3,\n                paddingRight: 3,\n                marginRight: 1.5,\n                marginY: 0.5,\n                justifyContent: !open ? \"center\" : undefined,\n                backgroundColor: selected\n                    ? hexFromArgb(activeColor.light.colorContainer)\n                    : undefined,\n                color: selected\n                    ? hexFromArgb(activeColor.light.onColorContainer)\n                    : undefined,\n            }}\n            button\n            disabled={disabled}\n            component={RouterLink}\n            to={to}\n            secondaryAction={\n                chipData && open ? (\n                    <Stack direction=\"row\" spacing={1}>\n                        {chipData.info ? (\n                            <Chip\n                                variant=\"outlined\"\n                                size=\"small\"\n                                icon={<InfoOutlinedIcon />}\n                                label={chipData.info}\n                                color=\"info\"\n                            />\n                        ) : undefined}\n                        {chipData.warning ? (\n                            <Chip\n                                variant=\"outlined\"\n                                size=\"small\"\n                                icon={<WarningAmberOutlinedIcon />}\n                                label={chipData.warning}\n                                color=\"warning\"\n                            />\n                        ) : undefined}\n                        {chipData.error ? (\n                            <Chip\n                                variant=\"outlined\"\n                                size=\"small\"\n                                icon={<ErrorOutlineOutlinedIcon />}\n                                label={chipData.error}\n                                color=\"error\"\n                            />\n                        ) : undefined}\n                    </Stack>\n                ) : undefined\n            }\n        >\n            {icon ? (\n                <ListItemIcon\n                    sx={{\n                        minWidth: 3,\n                        marginRight: open ? 1.5 : 0,\n                        color: selected\n                            ? hexFromArgb(activeColor.light.onColorContainer)\n                            : undefined,\n                    }}\n                >\n                    {icon}\n                </ListItemIcon>\n            ) : undefined}\n            {open ? (\n                <ListItemText\n                    disableTypography\n                    sx={{ marginLeft: icon ? undefined : 4.5 }}\n                >\n                    <Typography fontWeight=\"600\" variant=\"body2\">\n                        {label}\n                    </Typography>\n                </ListItemText>\n            ) : undefined}\n        </ListItem>\n    );\n};\n\nexport const AdviserLayout = ({ children, chipData }: IProps) => {\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const [open, setOpen] = React.useState(false);\n\n    const currentTab = useMemo(() => {\n        return location.pathname.split(\"/\").at(-1);\n    }, [location.pathname]);\n\n    return (\n        <Box sx={{ display: \"flex\" }}>\n            <Drawer open={open} variant=\"permanent\">\n                {open ? (\n                    <Stack\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        justifyContent=\"space-between\"\n                        sx={{\n                            marginBottom: 1,\n                            marginTop: 3,\n                            paddingRight: 1.5,\n                        }}\n                    >\n                        <Typography\n                            component={Button}\n                            onClick={() => navigate(\"/\")}\n                            variant=\"h5\"\n                            sx={{\n                                textAlign: \"center\",\n                                color: \"primary.main\",\n                                marginLeft: 3,\n                                width: \"fit-content\",\n                            }}\n                        >\n                            SEARCH UI\n                        </Typography>\n                        <IconButton onClick={() => setOpen(false)}>\n                            <MenuOpenRoundedIcon />\n                        </IconButton>\n                    </Stack>\n                ) : (\n                    <Box\n                        sx={{\n                            marginBottom: 1,\n                            marginTop: 3,\n                            textAlign: \"center\",\n                        }}\n                    >\n                        <IconButton onClick={() => setOpen(true)}>\n                            <MenuRoundedIcon />\n                        </IconButton>\n                    </Box>\n                )}\n                <List sx={{ paddingLeft: 1.5, paddingRight: 1.5 }}>\n                    <CustomListItem\n                        selected={currentTab === \"summary\"}\n                        label=\"Summary\"\n                        to=\"summary\"\n                        icon={<AutoAwesomeMosaicRoundedIcon />}\n                        open={open}\n                    />\n                    <CustomListItem\n                        label=\"Packages\"\n                        to=\"packages\"\n                        selected={currentTab === \"packages\"}\n                        icon={<ArticleRoundedIcon />}\n                        open={open}\n                    />\n                    <CustomListItem\n                        label=\"Compare\"\n                        to=\"compare\"\n                        selected={currentTab === \"compare\"}\n                        icon={<CompareArrowsRoundedIcon />}\n                        open={open}\n                    />\n                    <CustomListItem\n                        label=\"Logs\"\n                        to=\"logs\"\n                        selected={currentTab === \"logs\"}\n                        icon={<TerminalRoundedIcon />}\n                        open={open}\n                    />\n                </List>\n                {open ? <Divider /> : undefined}\n                <List sx={{ paddingLeft: 1, paddingRight: 1.5 }}>\n                    <CustomListItem\n                        label=\"Environment\"\n                        to=\"environment\"\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"environment\"}\n                        open={open}\n                        hideOnClosed\n                    />\n                    <CustomListItem\n                        label=\"Licenses\"\n                        to=\"licenses\"\n                        chipData={chipData[\"licenses\"]}\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"licenses\"}\n                        open={open}\n                        hideOnClosed\n                    />\n                    <CustomListItem\n                        disabled\n                        label=\"Dependency Tree\"\n                        to=\"dependency-tree\"\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"dependency-tree\"}\n                        open={open}\n                        hideOnClosed\n                    />\n                    <CustomListItem\n                        label=\"Stack Info\"\n                        to=\"stack-info\"\n                        icon={<CircleRoundedIcon />}\n                        selected={currentTab === \"stack-info\"}\n                        chipData={chipData[\"stack-info\"]}\n                        open={open}\n                        hideOnClosed\n                    />\n                </List>\n            </Drawer>\n            <Box sx={{ width: \"100%\", overflowX: \"hidden\" }}>{children}</Box>\n        </Box>\n    );\n};\n","import * as React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@mui/material\";\n\ninterface IProps {\n    children: React.ReactNode;\n    goHome?: boolean;\n}\n\n/**\n * Layout is used in most of the app and allows for backwards navigation.\n */\nexport const NavigationLayout = ({ children, goHome = false }: IProps) => {\n    const navigate = useNavigate();\n\n    return (\n        <>\n            <Button\n                onClick={() => {\n                    if (goHome) {\n                        navigate(\"/\");\n                    } else {\n                        navigate(-1);\n                    }\n                }}\n            >\n                {goHome ? \"go home\" : \"go back\"}\n            </Button>\n            <div>{children}</div>\n        </>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { Chip } from \"@mui/material\";\nimport { ScrollToTop } from \"components/Elements/ScrollToTop\";\n\ninterface IAdviseLogs {\n    logs?: string | null;\n}\n\nexport function AdviseLogs({ logs }: IAdviseLogs) {\n    const rows = useMemo(() => {\n        return logs\n            ?.split(\"\\n\")\n            .slice(0, 20)\n            .map(line => {\n                let log;\n                try {\n                    log = JSON.parse(line);\n                } catch (e) {\n                    return {};\n                }\n\n                if (log) {\n                    return {\n                        name: log.name,\n                        levelname: log.levelname,\n                        module: log.module,\n                        lineno: log.lineno,\n                        funcname: log.funcname,\n                        created: log.created,\n                        asctime: log.asctime,\n                        msecs: log.msecs,\n                        relative_created: log.relative_created,\n                        process: log.process,\n                        message: log.message,\n                    };\n                } else {\n                    return {};\n                }\n            });\n    }, [logs]);\n    return (\n        <ScrollToTop>\n            <TableContainer component={Paper} variant=\"outlined\">\n                <Table size=\"small\" aria-label=\"a dense table\" stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Level</TableCell>\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"left\">Function</TableCell>\n                            <TableCell align=\"right\">Line Number</TableCell>\n                            <TableCell align=\"right\">Process</TableCell>\n                            <TableCell align=\"left\">Message</TableCell>\n                            <TableCell align=\"right\">Time</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows?.map(row => (\n                            <TableRow\n                                key={row.created}\n                                sx={{\n                                    \"&:last-child td, &:last-child th\": {\n                                        border: 0,\n                                    },\n                                }}\n                            >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.levelname ? (\n                                        <Chip\n                                            color={\n                                                row?.levelname?.toLowerCase() ??\n                                                \"default\"\n                                            }\n                                            label={row.levelname}\n                                        />\n                                    ) : undefined}\n                                </TableCell>\n                                <TableCell align=\"left\">{row.name}</TableCell>\n                                <TableCell align=\"left\">\n                                    {row.funcname}\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    {row.lineno}\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    {row.process}\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {row.message}\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    {row.asctime}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </ScrollToTop>\n    );\n}\n","import React, { useState } from \"react\";\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Collapse,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\nimport { KeyboardArrowDown } from \"@mui/icons-material\";\n\nexport const StackInfoInstallErrorMetric = ({\n    url,\n    metric,\n}: {\n    url: string;\n    metric: (\n        | { package: string; index: string; versions: string[] }\n        | undefined\n    )[];\n}) => {\n    const [selected, setSelected] = useState<number | undefined>();\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    return (\n        <>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Installation Errors\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={\n                            <Chip\n                                icon={<ErrorOutlineOutlinedIcon />}\n                                label={metric.reduce(\n                                    (prev, cur) =>\n                                        prev + (cur?.versions?.length ?? 0),\n                                    0,\n                                )}\n                                color=\"error\"\n                            />\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Installation Errors\"\n                        subheader=\"The given package & version combinations were removed from the resolution process as they produced errors during installation in the given environment\"\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                    />\n                    <CardContent>\n                        <List dense>\n                            {metric.map((pkg, i) => {\n                                return (\n                                    <React.Fragment\n                                        key={\n                                            (pkg?.package ?? \"\") +\n                                            (pkg?.index ?? \"\") +\n                                            i\n                                        }\n                                    >\n                                        <ListItem\n                                            selected={selected === i}\n                                            secondaryAction={\n                                                <KeyboardArrowDown\n                                                    sx={{\n                                                        mr: -1,\n                                                        transform:\n                                                            selected === i\n                                                                ? \"rotate(0deg)\"\n                                                                : \"rotate(-90deg)\",\n                                                        transition: \"0.2s\",\n                                                    }}\n                                                />\n                                            }\n                                            key={\n                                                (pkg?.package ?? \"\") +\n                                                (pkg?.index ?? \"\")\n                                            }\n                                            button\n                                            sx={{ borderRadius: \"16px\" }}\n                                            onClick={() =>\n                                                setSelected(\n                                                    selected === i\n                                                        ? undefined\n                                                        : i,\n                                                )\n                                            }\n                                        >\n                                            <ListItemIcon>\n                                                <Chip\n                                                    label={pkg?.versions.length}\n                                                    color=\"error\"\n                                                />\n                                            </ListItemIcon>\n                                            <ListItemText\n                                                primary={pkg?.package}\n                                                secondary={pkg?.index}\n                                            />\n                                        </ListItem>\n                                        <Collapse in={selected === i}>\n                                            <ListItem>\n                                                <ListItemText\n                                                    inset\n                                                    secondary={metric[\n                                                        i\n                                                    ]?.versions.join(\", \")}\n                                                />\n                                            </ListItem>\n                                        </Collapse>\n                                    </React.Fragment>\n                                );\n                            })}\n                        </List>\n                    </CardContent>\n                </Card>\n            )}\n        </>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Collapse,\n    Divider,\n    Grid,\n    IconButton,\n    Stack,\n    Typography,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { KeyboardArrowDown } from \"@mui/icons-material\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\n\ninterface IStackInfoRulesMetric {\n    url: string;\n    metric: {\n        [key: string]: { package: string; constraint: string; index: string }[];\n    };\n}\n\nexport const StackInfoRulesMetric = ({\n    url,\n    metric,\n}: IStackInfoRulesMetric) => {\n    const [selected, setSelected] = useState<number | undefined>(0);\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    return (\n        <>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Solver Rules\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={\n                            <Chip\n                                icon={<ErrorOutlineOutlinedIcon />}\n                                label={Object.keys(metric).length}\n                                color=\"error\"\n                            />\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Solver Rules\"\n                        subheader=\"One or multiple packages were removed based on Python solver rules configured\"\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                    />\n                    <CardContent>\n                        <Stack spacing={2}>\n                            {Object.entries(metric).map(([rule, value], i) => {\n                                return (\n                                    <Box key={rule}>\n                                        <Button\n                                            sx={{ marginBottom: 1 }}\n                                            onClick={() =>\n                                                setSelected(\n                                                    selected === i\n                                                        ? undefined\n                                                        : i,\n                                                )\n                                            }\n                                        >\n                                            <Stack direction=\"row\" spacing={2}>\n                                                <Typography\n                                                    variant=\"body1\"\n                                                    fontWeight=\"bolder\"\n                                                >\n                                                    {rule}\n                                                </Typography>\n                                                <KeyboardArrowDown\n                                                    sx={{\n                                                        mr: -1,\n                                                        transform:\n                                                            selected === i\n                                                                ? \"rotate(0deg)\"\n                                                                : \"rotate(-90deg)\",\n                                                        transition: \"0.2s\",\n                                                    }}\n                                                />\n                                            </Stack>\n                                        </Button>\n                                        <Collapse in={selected === i}>\n                                            <Grid\n                                                container\n                                                sx={{\n                                                    marginLeft: 1,\n                                                    paddingRight: 1,\n                                                }}\n                                            >\n                                                <Grid item xs={5}>\n                                                    <Typography variant=\"body2\">\n                                                        Package\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    item\n                                                    xs={2}\n                                                    textAlign=\"center\"\n                                                >\n                                                    <Typography variant=\"body2\">\n                                                        Constraint\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    item\n                                                    xs={5}\n                                                    textAlign=\"right\"\n                                                >\n                                                    <Typography variant=\"body2\">\n                                                        Index\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid\n                                                    item\n                                                    xs={12}\n                                                    sx={{ marginBottom: 1 }}\n                                                >\n                                                    <Divider flexItem />\n                                                </Grid>\n                                                {value.map(pkg => {\n                                                    return (\n                                                        <React.Fragment\n                                                            key={\n                                                                pkg.package +\n                                                                pkg.index\n                                                            }\n                                                        >\n                                                            <Grid item xs={5}>\n                                                                {pkg.package}\n                                                            </Grid>\n                                                            <Grid\n                                                                item\n                                                                xs={2}\n                                                                textAlign=\"center\"\n                                                            >\n                                                                {pkg.constraint}\n                                                            </Grid>\n                                                            <Grid\n                                                                item\n                                                                xs={5}\n                                                                textAlign=\"right\"\n                                                            >\n                                                                {pkg.index}\n                                                            </Grid>\n                                                        </React.Fragment>\n                                                    );\n                                                })}\n                                            </Grid>\n                                        </Collapse>\n                                    </Box>\n                                );\n                            })}\n                        </Stack>\n                    </CardContent>\n                </Card>\n            )}\n        </>\n    );\n};\n","import React from \"react\";\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Grid,\n    IconButton,\n    Typography,\n} from \"@mui/material\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport DoneRoundedIcon from \"@mui/icons-material/DoneRounded\";\nimport CloseRoundedIcon from \"@mui/icons-material/CloseRounded\";\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\n\nexport const StackInfoEnvMetric = ({\n    url,\n    metric,\n}: {\n    url: string;\n    metric: { provided: boolean; message: string }[];\n}) => {\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    return (\n        <React.Fragment key={url}>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Environment Parameters\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                        avatar={\n                            <Chip\n                                icon={<InfoOutlinedIcon />}\n                                label={\n                                    metric.filter(env => env.provided).length\n                                }\n                                color=\"info\"\n                            />\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Environment Parameters\"\n                        subheader={`The advisor input was provided with ${\n                            metric.filter(env => env.provided).length\n                        } environment parameters`}\n                        action={\n                            <IconButton\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <OpenInNewRoundedIcon />\n                            </IconButton>\n                        }\n                    />\n                    <CardContent>\n                        <Grid container>\n                            {metric.map((env, i) => (\n                                <React.Fragment key={env.message + i}>\n                                    <Grid item xs={1}>\n                                        {env.provided ? (\n                                            <CloseRoundedIcon color=\"error\" />\n                                        ) : (\n                                            <DoneRoundedIcon color=\"success\" />\n                                        )}\n                                    </Grid>\n                                    <Grid item xs={11}>\n                                        <Typography variant=\"body2\">\n                                            {env.message}\n                                        </Typography>\n                                    </Grid>\n                                </React.Fragment>\n                            ))}\n                        </Grid>\n                    </CardContent>\n                </Card>\n            )}\n        </React.Fragment>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport {\n    Box,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Divider,\n    Grid,\n    IconButton,\n    Stack,\n    Typography,\n} from \"@mui/material\";\nimport WarningAmberOutlinedIcon from \"@mui/icons-material/WarningAmberOutlined\";\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\nimport OpenInNewRoundedIcon from \"@mui/icons-material/OpenInNewRounded\";\nimport ErrorOutlineOutlinedIcon from \"@mui/icons-material/ErrorOutlineOutlined\";\n\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { components } from \"lib/schema\";\n\nexport const StackInfoMetric = ({\n    metrics,\n}: {\n    metrics: Map<string, components[\"schemas\"][\"StackInfo\"]>;\n}) => {\n    const theme = useTheme();\n    const compact = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n    const typeTotals = useMemo(() => {\n        return {\n            info: Array.from(metrics.values()).reduce(\n                (p, c) => p + (c[0].type === \"INFO\" ? 1 : 0),\n                0,\n            ),\n            warning: Array.from(metrics.values()).reduce(\n                (p, c) => p + (c[0].type === \"WARNING\" ? 1 : 0),\n                0,\n            ),\n            error: Array.from(metrics.values()).reduce(\n                (p, c) => p + (c[0].type === \"ERROR\" ? 1 : 0),\n                0,\n            ),\n        };\n    }, [metrics]);\n\n    const renderRow = (\n        key: string,\n        value: components[\"schemas\"][\"StackInfo\"],\n    ) => {\n        return (\n            <React.Fragment key={key}>\n                <Grid item xs={12} sx={{ marginY: 1 }}>\n                    <Divider flexItem />\n                </Grid>\n                <Grid item xs={1}>\n                    <Box display=\"flex\" alignContent=\"center\">\n                        {value[0].type === \"ERROR\" ? (\n                            <ErrorOutlineOutlinedIcon color=\"error\" />\n                        ) : value[0].type === \"WARNING\" ? (\n                            <WarningAmberOutlinedIcon color=\"warning\" />\n                        ) : (\n                            <InfoOutlinedIcon color=\"info\" />\n                        )}\n                    </Box>\n                </Grid>\n                <Grid item xs={10}>\n                    <Stack spacing={1}>\n                        {value.map((v: { message: string }) => (\n                            <Typography key={v.message} variant=\"body2\">\n                                {v.message}\n                            </Typography>\n                        ))}\n                    </Stack>\n                </Grid>\n                <Grid item xs={1}>\n                    <IconButton\n                        href={value[0].link}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <OpenInNewRoundedIcon />\n                    </IconButton>\n                </Grid>\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <>\n            {compact ? (\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Other Stack Info\"\n                        titleTypographyProps={{\n                            variant: \"h6\",\n                        }}\n                        avatar={\n                            <Stack direction=\"row\" spacing={1}>\n                                {typeTotals.info ? (\n                                    <Chip\n                                        icon={<InfoOutlinedIcon />}\n                                        label={typeTotals.info}\n                                        color=\"info\"\n                                    />\n                                ) : undefined}\n                                {typeTotals.warning ? (\n                                    <Chip\n                                        icon={<WarningAmberOutlinedIcon />}\n                                        label={typeTotals.warning}\n                                        color=\"warning\"\n                                    />\n                                ) : undefined}\n                                {typeTotals.error ? (\n                                    <Chip\n                                        icon={<ErrorOutlineOutlinedIcon />}\n                                        label={typeTotals.error}\n                                        color=\"error\"\n                                    />\n                                ) : undefined}\n                            </Stack>\n                        }\n                    />\n                </Card>\n            ) : (\n                <Card variant=\"outlined\">\n                    <CardHeader title=\"Other Stack Info\" />\n                    <CardContent>\n                        <Grid container alignItems=\"center\">\n                            <Grid item xs={12}>\n                                <Typography variant=\"body1\" fontWeight=\"bolder\">\n                                    Recommended Actions\n                                </Typography>\n                            </Grid>\n                            {Array.from(metrics.entries())\n                                .filter(([, value]) =>\n                                    value.some(\n                                        (v: { message: string }) =>\n                                            v.message.includes(\"use\") ||\n                                            v.message.includes(\"Use\"),\n                                    ),\n                                )\n                                .map(([key, value]) => renderRow(key, value))}\n                            <Grid item xs={12} sx={{ marginTop: 2 }}>\n                                <Typography variant=\"body1\" fontWeight=\"bolder\">\n                                    Other Information\n                                </Typography>\n                            </Grid>\n                            {Array.from(metrics.entries())\n                                .filter(([, value]) =>\n                                    value.some(\n                                        (v: { message: string }) =>\n                                            !v.message.includes(\"use\") ||\n                                            v.message.includes(\"Use\"),\n                                    ),\n                                )\n                                .map(([key, value]) => renderRow(key, value))}\n                        </Grid>\n                    </CardContent>\n                </Card>\n            )}\n        </>\n    );\n};\n","import React, { useMemo } from \"react\";\nimport { components } from \"lib/schema\";\nimport {\n    StackInfoEnvMetric,\n    StackInfoInstallErrorMetric,\n    StackInfoMetric,\n    StackInfoRulesMetric,\n} from \"../components/StackInfoMetrics\";\nimport { Box, Typography } from \"@mui/material\";\nimport { Masonry } from \"@mui/lab\";\n\ninterface IAdviseStackInfo {\n    stack_info?: components[\"schemas\"][\"StackInfo\"];\n}\nconst stackInfoHandler = (\n    stack_info: components[\"schemas\"][\"StackInfo\"],\n    link: string,\n) => {\n    switch (link) {\n        case \"https://thoth-station.ninja/j/install_error\": {\n            const metric = stack_info\n                .filter(info => info.link === link)\n                .map(pkg => {\n                    const name_index_pattern = /(?<=').*?(?=')/g;\n                    const versions_pattern = /(?<=environment: ).*/;\n                    const name_index = pkg.message.match(name_index_pattern);\n                    const versions = pkg.message.match(versions_pattern);\n                    if (name_index && versions) {\n                        return {\n                            package: name_index?.[0],\n                            index: name_index?.[2],\n                            versions: versions?.[0].split(\", \"),\n                        };\n                    }\n                });\n            return <StackInfoInstallErrorMetric url={link} metric={metric} />;\n        }\n        case \"https://thoth-station.ninja/j/env\": {\n            const metric = stack_info\n                .filter(info => info.link === link)\n                .map(info => {\n                    return {\n                        provided: info.message.startsWith(\"No\"),\n                        message: info.message,\n                    };\n                });\n            return <StackInfoEnvMetric metric={metric} url={link} />;\n        }\n\n        case \"https://thoth-station.ninja/j/rules\": {\n            const rules = new Map<\n                string,\n                { package: string; constraint: string; index: string }[]\n            >();\n            stack_info\n                .filter(info => info.link === link)\n                .forEach(pkg => {\n                    const name_constraint_index_pattern = /(?<=').*?(?=')/g;\n                    const rule_pattern = /(?<=rule: ).*/;\n                    const name_constraint_index = pkg.message.match(\n                        name_constraint_index_pattern,\n                    );\n                    const rule = pkg.message.match(rule_pattern);\n                    if (name_constraint_index && rule) {\n                        rules.set(\n                            rule[0],\n                            (rules.get(rule[0]) ?? []).concat({\n                                package: name_constraint_index?.[0],\n                                constraint: name_constraint_index?.[2],\n                                index: name_constraint_index?.[4],\n                            }),\n                        );\n                    }\n                });\n            return (\n                <StackInfoRulesMetric\n                    metric={Object.fromEntries(rules)}\n                    url={link}\n                />\n            );\n        }\n    }\n};\n\nexport const AdviseStackInfo = ({ stack_info = [] }: IAdviseStackInfo) => {\n    const metrics = useMemo(() => {\n        if (!stack_info) {\n            return <></>;\n        }\n\n        const types = new Set<string>();\n        stack_info.forEach(i => types.add(i.link));\n\n        const cards = [];\n        Array.from(types.values()).forEach(type => {\n            const element = stackInfoHandler(stack_info, type);\n            if (element) {\n                cards.push(element);\n                types.delete(type);\n            }\n        });\n\n        // all others\n        const others = new Map<string, components[\"schemas\"][\"StackInfo\"]>();\n        stack_info\n            .filter(info => types.has(info.link))\n            .forEach(info => {\n                others.set(\n                    info.link,\n                    (others.get(info.link) ?? []).concat(info),\n                );\n            });\n        cards.push(<StackInfoMetric metrics={others} />);\n\n        return cards;\n    }, [stack_info]);\n\n    if (!metrics) {\n        return (\n            <Box\n                height=\"100vh\"\n                flexDirection=\"column\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h5\" align=\"center\">\n                    Stack info not available\n                </Typography>\n                <Typography variant=\"body2\" align=\"center\">\n                    The adviser has not finished resolving packages\n                </Typography>\n            </Box>\n        );\n    }\n\n    return <Masonry columns={{ sm: 1, lg: 2, xl: 4 }}>{metrics}</Masonry>;\n};\n","import React, { useMemo, useState } from \"react\";\nimport { components } from \"lib/schema\";\nimport {\n    Box,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    Stack,\n    Button,\n    Typography,\n    IconButton,\n    TextField,\n    Alert,\n} from \"@mui/material\";\nimport CloseRoundedIcon from \"@mui/icons-material/CloseRounded\";\nimport DoneRoundedIcon from \"@mui/icons-material/DoneRounded\";\nimport EditRoundedIcon from \"@mui/icons-material/EditRounded\";\nimport ChangeHistoryRoundedIcon from \"@mui/icons-material/ChangeHistoryRounded\";\nimport { postAdvise } from \"../../home/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport { LoadingButton } from \"@mui/lab\";\nimport yaml from \"js-yaml\";\n\ninterface IAdviseEnvironmentInfo {\n    runtime_environment?: components[\"schemas\"][\"RuntimeEnvironment\"] | null;\n    pipfile: string;\n    pipfileLock: string;\n}\n\ntype ListData = {\n    label: string;\n    key: string;\n    value?: string | number | null;\n    original?: string | number | null;\n    group?: {\n        label: string;\n        original?: string | number | null;\n        value?: string | number | null;\n        key: string;\n    }[];\n    detail: string;\n};\n\nexport const EditableLabel = ({\n    itemKey,\n    itemSubKey,\n    value,\n    handleSubmit,\n    label,\n    editMode,\n}: {\n    itemKey: string;\n    itemSubKey?: string;\n    value: any;\n    handleSubmit: (key: string, value: any, subKey?: string) => void;\n    label?: string;\n    editMode: boolean;\n}) => {\n    return (\n        <>\n            {editMode ? (\n                <TextField\n                    value={value}\n                    label={label}\n                    onChange={event =>\n                        handleSubmit(itemKey, event.target.value, itemSubKey)\n                    }\n                    size=\"small\"\n                    variant=\"outlined\"\n                />\n            ) : (\n                <Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    justifyContent=\"flex-end\"\n                >\n                    {itemSubKey ? (\n                        <Typography\n                            sx={{ marginRight: 1 }}\n                            variant=\"body1\"\n                            fontStyle={!value ? \"italic\" : undefined}\n                            fontWeight={value ? \"bold\" : undefined}\n                        >\n                            {label}\n                        </Typography>\n                    ) : undefined}\n                    <Typography\n                        variant=\"body1\"\n                        fontWeight={!itemSubKey ? \"bold\" : undefined}\n                    >\n                        {value}\n                    </Typography>\n                </Stack>\n            )}\n        </>\n    );\n};\n\nexport const AdviseEnvironmentInfo = ({\n    runtime_environment,\n    pipfile,\n    pipfileLock,\n}: IAdviseEnvironmentInfo) => {\n    const [currentRuntimeEnvironment, setCurrentRuntimeEnvironment] =\n        useState(runtime_environment);\n    const [errorMessage, setErrorMessage] = useState();\n    const [loading, setLoading] = useState(false);\n    const [editMode, setEditMode] = useState(false);\n    const navigate = useNavigate();\n\n    if (!runtime_environment) {\n        return (\n            <Box\n                height=\"100vh\"\n                flexDirection=\"column\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h5\" align=\"center\">\n                    Environment data not available\n                </Typography>\n                <Typography variant=\"body2\" align=\"center\">\n                    The advise document did not contain information regarding\n                    the runtime environment\n                </Typography>\n            </Box>\n        );\n    }\n\n    const handleSubmit = (key: any, value: any, subKey?: any) => {\n        setErrorMessage(undefined);\n        if (currentRuntimeEnvironment) {\n            if (subKey) {\n                setCurrentRuntimeEnvironment({\n                    ...currentRuntimeEnvironment,\n                    [key]: {\n                        ...(currentRuntimeEnvironment[\n                            key as keyof typeof currentRuntimeEnvironment\n                        ] as { [key: string]: any }),\n                        [subKey]: value === \"\" ? null : value,\n                    },\n                });\n            } else {\n                setCurrentRuntimeEnvironment({\n                    ...currentRuntimeEnvironment,\n                    [key]: value === \"\" ? null : value,\n                });\n            }\n        }\n    };\n\n    const data: ListData[] = useMemo(() => {\n        return [\n            {\n                label: \"Name\",\n                key: \"name\",\n                original: runtime_environment.name,\n                value: currentRuntimeEnvironment?.name,\n                detail: \"User defined name of the runtime environment\",\n            },\n            {\n                label: \"CUDA Version\",\n                original: runtime_environment.cuda_version,\n                value: currentRuntimeEnvironment?.cuda_version,\n                key: \"cuda_version\",\n                detail: \"Nvidia CUDA version which the application uses\",\n            },\n            {\n                label: \"cuDNN Version\",\n                original: runtime_environment.cudnn_version,\n                value: currentRuntimeEnvironment?.cudnn_version,\n                key: \"cudnn_version\",\n                detail: \"NVIDIA cuDNN version used, if any\",\n            },\n            {\n                label: \"Hardware\",\n                key: \"hardware\",\n                group: [\n                    {\n                        label: \"CPU Family\",\n                        original: runtime_environment.hardware?.cpu_family,\n                        value: currentRuntimeEnvironment?.hardware?.cpu_family,\n                        key: \"cpu_family\",\n                    },\n                    {\n                        label: \"CPU Model\",\n                        original: runtime_environment.hardware?.cpu_model,\n                        value: currentRuntimeEnvironment?.hardware?.cpu_model,\n                        key: \"cpu_model\",\n                    },\n                    {\n                        label: \"GPU Model\",\n                        original: runtime_environment.hardware?.gpu_model,\n                        value: currentRuntimeEnvironment?.hardware?.gpu_model,\n                        key: \"gpu_model\",\n                    },\n                ],\n                detail: \"Hardware configuration used\",\n            },\n            {\n                label: \"Math Kernel Library\",\n                original: runtime_environment.mkl_version,\n                value: currentRuntimeEnvironment?.mkl_version,\n                key: \"mkl_version\",\n                detail: \"Intel® Math Kernel Library version used, if any\",\n            },\n            {\n                label: \"Base Image\",\n                original: runtime_environment.base_image,\n                value: currentRuntimeEnvironment?.base_image,\n                key: \"base_image\",\n                detail: \"A base container image used to run the application\",\n            },\n            {\n                label: \"Open BLAS Version\",\n                original: runtime_environment.openblas_version,\n                value: currentRuntimeEnvironment?.openblas_version,\n                key: \"openblas_version\",\n                detail: \"Open BLAS version used, if any\",\n            },\n            {\n                label: \"Open MPI Version\",\n                original: runtime_environment.openmpi_version,\n                value: currentRuntimeEnvironment?.openmpi_version,\n                key: \"openmpi_version\",\n                detail: \"Open MPI version used, if any\",\n            },\n            {\n                label: \"Operating System\",\n                key: \"operating_system\",\n                group: [\n                    {\n                        label: \"OS Name\",\n                        original: runtime_environment.operating_system?.name,\n                        value: currentRuntimeEnvironment?.operating_system\n                            ?.name,\n                        key: \"name\",\n                    },\n                    {\n                        label: \"OS Version\",\n                        original: runtime_environment.operating_system?.version,\n                        value: currentRuntimeEnvironment?.operating_system\n                            ?.version,\n                        key: \"version\",\n                    },\n                ],\n                detail: \"Operating system used\",\n            },\n            {\n                label: \"Platform\",\n                original: runtime_environment.platform,\n                value: currentRuntimeEnvironment?.platform,\n                key: \"platform\",\n                detail: \"Platform used - corresponds to sysconfig.get_platform() call\",\n            },\n            {\n                label: \"Python Version\",\n                original: runtime_environment.python_version,\n                value: currentRuntimeEnvironment?.python_version,\n                key: \"python_version\",\n                detail: \"Python version on which the application runs on\",\n            },\n        ];\n    }, [runtime_environment, currentRuntimeEnvironment]);\n\n    const formatted_json = useMemo(() => {\n        const format: { [key: string]: any } = {};\n\n        Object.entries(currentRuntimeEnvironment ?? {}).forEach(\n            ([key, value]) => {\n                if (value) {\n                    if (typeof value === \"object\") {\n                        const formatObj: { [key: string]: any } = {};\n\n                        if (currentRuntimeEnvironment) {\n                            Object.entries(value).forEach(\n                                ([subKey, subValue]) => {\n                                    if (subValue) {\n                                        formatObj[subKey] = subValue;\n                                    }\n                                },\n                            );\n                        }\n\n                        if (Object.keys(formatObj).length > 0) {\n                            format[key] = formatObj;\n                        }\n                    } else {\n                        format[key] = value;\n                    }\n                }\n            },\n        );\n\n        return yaml.dump(format).toString();\n    }, [currentRuntimeEnvironment]);\n\n    const handleNewAdvise = () => {\n        setErrorMessage(undefined);\n        setLoading(true);\n        postAdvise(\n            pipfile,\n            pipfileLock,\n            currentRuntimeEnvironment as components[\"schemas\"][\"RuntimeEnvironment\"],\n        )\n            .then(response => {\n                setLoading(false);\n                navigate(\"/advise/\" + response.data.analysis_id + \"/summary\");\n            })\n            .catch(error => {\n                setLoading(false);\n                setErrorMessage(\n                    error?.response?.data?.error ?? \"An error occurred.\",\n                );\n            });\n    };\n\n    const getIcon = (item: ListData) => {\n        let mode: string;\n        if (item.group) {\n            if (\n                item.group.some(subItem => subItem.original !== subItem.value)\n            ) {\n                mode = \"warning\";\n            } else if (item.group.every(subItem => !subItem.original)) {\n                mode = \"error\";\n            } else {\n                mode = \"success\";\n            }\n        } else {\n            if (item.original !== item.value) {\n                mode = \"warning\";\n            } else if (!item.original) {\n                mode = \"error\";\n            } else {\n                mode = \"success\";\n            }\n        }\n\n        switch (mode) {\n            case \"warning\":\n                return <ChangeHistoryRoundedIcon color=\"warning\" />;\n            case \"error\":\n                return <CloseRoundedIcon color=\"error\" />;\n            case \"success\":\n                return <DoneRoundedIcon color=\"success\" />;\n        }\n    };\n\n    return (\n        <Box>\n            <Typography variant=\"h4\">Project Runtime Environment</Typography>\n            <Typography variant=\"body1\">\n                Thoth performs recommendations based on your hardware and\n                software environment.\n            </Typography>\n\n            <Grid\n                container\n                alignItems=\"center\"\n                sx={{ marginLeft: 2, marginTop: 1, marginBottom: 2 }}\n            >\n                <Grid item>\n                    <DoneRoundedIcon\n                        color=\"success\"\n                        sx={{ marginRight: 2, verticalAlign: \"middle\" }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        <i>Value provided</i>\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} />\n\n                <Grid item>\n                    <CloseRoundedIcon\n                        color=\"error\"\n                        sx={{ marginRight: 2, verticalAlign: \"middle\" }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        <i>Value not provided</i>\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} />\n\n                <Grid item>\n                    {\" \"}\n                    <ChangeHistoryRoundedIcon\n                        color=\"warning\"\n                        sx={{ marginRight: 2, verticalAlign: \"middle\" }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        <i>Value edited</i>\n                    </Typography>\n                </Grid>\n            </Grid>\n\n            <Divider />\n\n            {data.some(item => {\n                if (item.group) {\n                    return item.group.some(\n                        subItem => subItem.original !== subItem.value,\n                    );\n                } else {\n                    return item.original !== item.value;\n                }\n            }) ? (\n                <Alert\n                    action={\n                        <Stack direction=\"row\" spacing={1}>\n                            <Button\n                                disabled={loading}\n                                size=\"small\"\n                                variant=\"outlined\"\n                                onClick={() => {\n                                    setCurrentRuntimeEnvironment(\n                                        runtime_environment,\n                                    );\n                                    setErrorMessage(undefined);\n                                }}\n                            >\n                                RESET PARAMETERS\n                            </Button>\n                            <LoadingButton\n                                loading={loading}\n                                size=\"small\"\n                                variant=\"contained\"\n                                onClick={() => handleNewAdvise()}\n                            >\n                                NEW ADVISE\n                            </LoadingButton>\n                        </Stack>\n                    }\n                    sx={{ marginTop: 2 }}\n                    variant=\"outlined\"\n                    severity=\"warning\"\n                >\n                    The environment parameters are edited and are not equal to\n                    the parameters set in the adviser report. You can use the\n                    new environment parameters to run a new adviser report, or\n                    you can reset them back to the original values.\n                </Alert>\n            ) : undefined}\n\n            {errorMessage ? (\n                <Alert\n                    sx={{ marginTop: 2 }}\n                    variant=\"outlined\"\n                    severity=\"error\"\n                >\n                    {errorMessage}\n                </Alert>\n            ) : undefined}\n\n            <Grid container spacing={4}>\n                <Grid item xs={8}>\n                    <List dense>\n                        <ListItem>\n                            <ListItemAvatar />\n                            <ListItemText>\n                                <Typography variant=\"body1\" fontWeight=\"bold\">\n                                    Environment Parameters\n                                </Typography>\n                            </ListItemText>\n                            <Typography variant=\"body1\" fontWeight=\"bold\">\n                                Value\n                            </Typography>\n                            {editMode ? (\n                                <IconButton\n                                    sx={{ marginLeft: 1 }}\n                                    onClick={() => setEditMode(false)}\n                                >\n                                    <DoneRoundedIcon fontSize=\"small\" />\n                                </IconButton>\n                            ) : (\n                                <IconButton\n                                    sx={{ marginLeft: 1 }}\n                                    onClick={() => setEditMode(true)}\n                                >\n                                    <EditRoundedIcon fontSize=\"small\" />\n                                </IconButton>\n                            )}\n                        </ListItem>\n                        {data.map((item, i) => {\n                            return (\n                                <React.Fragment key={item.key + i}>\n                                    <ListItem>\n                                        <ListItemAvatar>\n                                            {getIcon(item)}\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={item.label}\n                                            secondary={item.detail}\n                                        />\n                                        {item.group ? (\n                                            <Stack spacing={1}>\n                                                {item.group.map(subItem => {\n                                                    return (\n                                                        <EditableLabel\n                                                            key={\n                                                                item.key +\n                                                                subItem.key\n                                                            }\n                                                            itemKey={item.key}\n                                                            itemSubKey={\n                                                                subItem.key\n                                                            }\n                                                            label={\n                                                                subItem.label\n                                                            }\n                                                            value={\n                                                                (\n                                                                    currentRuntimeEnvironment?.[\n                                                                        item.key as keyof typeof currentRuntimeEnvironment\n                                                                    ] as {\n                                                                        [\n                                                                            key: string\n                                                                        ]: any;\n                                                                    }\n                                                                )?.[\n                                                                    subItem.key\n                                                                ] ?? \"\"\n                                                            }\n                                                            handleSubmit={\n                                                                handleSubmit\n                                                            }\n                                                            editMode={editMode}\n                                                        />\n                                                    );\n                                                })}\n                                            </Stack>\n                                        ) : (\n                                            <EditableLabel\n                                                label={item.label}\n                                                itemKey={item.key}\n                                                value={\n                                                    currentRuntimeEnvironment?.[\n                                                        item.key as keyof typeof currentRuntimeEnvironment\n                                                    ] ?? \"\"\n                                                }\n                                                handleSubmit={handleSubmit}\n                                                editMode={editMode}\n                                            />\n                                        )}\n                                    </ListItem>\n                                    <Divider variant=\"inset\" />\n                                </React.Fragment>\n                            );\n                        })}\n                    </List>\n                </Grid>\n                <Grid item xs={4}>\n                    <Card sx={{ marginTop: 2 }} variant=\"outlined\">\n                        <CardHeader\n                            title={currentRuntimeEnvironment?.name}\n                            action={\n                                <Button\n                                    size=\"small\"\n                                    variant=\"outlined\"\n                                    onClick={() =>\n                                        navigator.clipboard.writeText(\n                                            formatted_json,\n                                        )\n                                    }\n                                >\n                                    COPY\n                                </Button>\n                            }\n                        />\n                        <CardContent>\n                            <pre>{formatted_json}</pre>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n","import React, { useContext, useState } from \"react\";\n\nimport { LicenseMetricType } from \"hooks/metrics\";\nimport {\n    Box,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Divider,\n    Grid,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemButton,\n    ListItemText,\n    Typography,\n} from \"@mui/material\";\nimport CheckRoundedIcon from \"@mui/icons-material/CheckRounded\";\nimport Loading from \"components/Elements/Loading/Loading\";\nimport { StateContext } from \"stores/Global\";\nimport DoneRoundedIcon from \"@mui/icons-material/DoneRounded\";\nimport CloseRoundedIcon from \"@mui/icons-material/CloseRounded\";\nimport WarningAmberOutlinedIcon from \"@mui/icons-material/WarningAmberOutlined\";\n\ninterface IAdviseLicenses {\n    metric: LicenseMetricType | null;\n}\n\nexport function AdviseLicenses({ metric }: IAdviseLicenses) {\n    const state = useContext(StateContext);\n    const [selected, setSelected] = useState<string | undefined>();\n\n    if (metric === null || Object.keys(metric).length === 0) {\n        return (\n            <Loading\n                type=\"circular\"\n                label={state?.loading?.[\"graph\"].text}\n                progress={\n                    ((state?.loading?.[\"graph\"].value ?? 0) /\n                        (state?.loading?.[\"graph\"].total ?? 1)) *\n                    100\n                }\n            />\n        );\n    }\n\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                <Typography variant=\"h4\">Package Licenses</Typography>\n                <Typography variant=\"body1\">\n                    The Open Source Initiative (OSI) approves open source\n                    licenses that allow software to be freely used, modified,\n                    and shared.\n                </Typography>\n            </Grid>\n            <Grid\n                container\n                item\n                xs={12}\n                alignItems=\"center\"\n                sx={{ marginLeft: 2, marginTop: 2, marginBottom: 2 }}\n            >\n                <Grid item>\n                    <DoneRoundedIcon\n                        color=\"success\"\n                        sx={{ marginRight: 2, verticalAlign: \"middle\" }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        <i>OSI Approved</i>\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} />\n\n                <Grid item>\n                    <CloseRoundedIcon\n                        color=\"error\"\n                        sx={{ marginRight: 2, verticalAlign: \"middle\" }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        <i>Not OSI Approved</i>\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12} />\n\n                <Grid item>\n                    <WarningAmberOutlinedIcon\n                        color=\"warning\"\n                        sx={{ marginRight: 2, verticalAlign: \"middle\" }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        <i>Unknown Approval</i>\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Divider />\n            </Grid>\n            <Grid item xs={6}>\n                <List>\n                    <ListItem>\n                        <ListItemAvatar>\n                            <Typography fontWeight=\"bold\" variant=\"body1\">\n                                OSI\n                            </Typography>\n                        </ListItemAvatar>\n                        <ListItemText>\n                            <Typography fontWeight=\"bold\" variant=\"body1\">\n                                License\n                            </Typography>\n                        </ListItemText>\n                        <Typography fontWeight=\"bold\" variant=\"body1\">\n                            Count\n                        </Typography>\n                    </ListItem>\n                    {Object.entries(metric).map(([name, data]) => {\n                        return (\n                            <ListItem\n                                key={name}\n                                selected={selected === name}\n                                disablePadding\n                                sx={{ borderRadius: 100 }}\n                            >\n                                <ListItemButton\n                                    onClick={() => setSelected(name)}\n                                    sx={{ borderRadius: 100 }}\n                                >\n                                    <ListItemAvatar>\n                                        {data.metadata?.isOsiApproved ===\n                                        null ? (\n                                            <WarningAmberOutlinedIcon color=\"warning\" />\n                                        ) : data.metadata?.isOsiApproved ? (\n                                            <CheckRoundedIcon color=\"success\" />\n                                        ) : (\n                                            <CloseRoundedIcon color=\"error\" />\n                                        )}\n                                    </ListItemAvatar>\n                                    <ListItemText>\n                                        <Typography variant=\"body1\">\n                                            {name}\n                                        </Typography>\n                                    </ListItemText>\n                                    <Chip\n                                        label={\n                                            Object.keys(data.packages).length\n                                        }\n                                    />\n                                </ListItemButton>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </Grid>\n            <Grid item xs={6}>\n                {selected ? (\n                    <Card sx={{ marginTop: 2 }} variant=\"outlined\">\n                        <CardHeader\n                            title={selected}\n                            subheader={`Packages that use the ${selected}`}\n                        />\n                        <CardContent>\n                            <Grid container>\n                                <Grid item xs={6}>\n                                    <Typography\n                                        variant=\"body1\"\n                                        fontWeight=\"bold\"\n                                    >\n                                        Package\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Typography\n                                        variant=\"body1\"\n                                        fontWeight=\"bold\"\n                                    >\n                                        PyPI License\n                                    </Typography>\n                                </Grid>\n                                {Object.entries(metric[selected].packages).map(\n                                    ([pkgName, pkgData]) => {\n                                        return (\n                                            <React.Fragment key={pkgName}>\n                                                <Grid item xs={6}>\n                                                    <Typography variant=\"body1\">\n                                                        {pkgName}\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid item xs={6}>\n                                                    <Typography variant=\"body1\">\n                                                        {pkgData.specific}\n                                                    </Typography>\n                                                </Grid>\n                                            </React.Fragment>\n                                        );\n                                    },\n                                )}\n                            </Grid>\n                        </CardContent>\n                    </Card>\n                ) : (\n                    <Box\n                        height=\"100%\"\n                        flexDirection=\"column\"\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <Typography variant=\"h5\" align=\"center\">\n                            Choose a license\n                        </Typography>\n                        <Typography variant=\"body2\" align=\"center\">\n                            Click on a license from the list of licenses to view\n                            which packages use that license\n                        </Typography>\n                    </Box>\n                )}\n            </Grid>\n        </Grid>\n    );\n}\n","import React, { useEffect, useMemo } from \"react\";\nimport { Route, Routes, useParams, Navigate } from \"react-router-dom\";\n\n// sub-routes\nimport { AdviseSummary } from \"./AdviseSummary\";\nimport { AdviseDetails } from \"./AdviseDetails\";\nimport { AdviseCompare } from \"./AdviseCompare\";\n\n// feature specific imports\nimport { useAdviseDocument, useAdviseLogs } from \"../api\";\nimport { formatLockfile } from \"utils/formatLockfile\";\nimport { useMetrics } from \"../hooks\";\nimport { Requirements, useGraph } from \"hooks\";\n\n// misc\nimport { AdviseNotFound } from \"./AdviseNotFound\";\nimport { AxiosResponse } from \"axios\";\nimport { components } from \"lib/schema\";\nimport { LOCAL_STORAGE_KEY } from \"config\";\nimport { AdviserLayout, MainLayout, NavigationLayout } from \"components/Layout\";\nimport Loading from \"../../../components/Elements/Loading/Loading\";\nimport { AdviseLogs } from \"./AdviseLogs\";\nimport { AdviseStackInfo } from \"./AdviseStackInfo\";\nimport { AdviseEnvironmentInfo } from \"./AdviseEnvironmentInfo\";\nimport { AdviseLicenses } from \"./AdviseLicenses\";\n\ntype statusResponse = components[\"schemas\"][\"AnalysisStatusResponse\"];\n\nexport const AdviseRoutes = () => {\n    // get document id\n    const { analysis_id } = useParams();\n\n    // api get thoth advise document\n    const adviseDocument = useAdviseDocument(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: (data: AxiosResponse<statusResponse>) => {\n            if (data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    useEffect(() => {\n        if (adviseDocument.isSuccess && analysis_id) {\n            const ids = localStorage.getItem(LOCAL_STORAGE_KEY) ?? \"\";\n\n            const split = ids.split(\",\");\n            if (!split.includes(analysis_id)) {\n                split.push(analysis_id);\n                localStorage.setItem(LOCAL_STORAGE_KEY, split.join(\",\"));\n            }\n        }\n    }, [adviseDocument.status]);\n\n    const logs = useAdviseLogs(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: () => {\n            if (adviseDocument.data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    // format advise graph data\n    const graphData = useMemo(() => {\n        if (\n            adviseDocument.isSuccess &&\n            adviseDocument.data.data?.result?.report?.products?.[0]?.project\n        ) {\n            const lockfile = adviseDocument.data.data?.result?.report\n                ?.products?.[0]?.project as components[\"schemas\"][\"ProjectDef\"];\n            return formatLockfile(lockfile);\n        }\n    }, [adviseDocument]);\n\n    const graph = useGraph(\n        graphData,\n        (\n            (\n                adviseDocument?.data?.data?.result?.report?.products?.[0]\n                    ?.project as components[\"schemas\"][\"ProjectDef\"]\n            )?.requirements as Requirements\n        )?.packages,\n        adviseDocument?.data?.data?.result?.report?.products?.[0]\n            ?.justification,\n    );\n\n    // compute metric data\n    const metrics = useMetrics(graph, adviseDocument.data?.data);\n\n    const loading = useMemo(() => {\n        if (adviseDocument.isLoading) {\n            return <Loading type=\"circular\" label=\"Fetching Advise Document\" />;\n        }\n\n        if (!adviseDocument.data) {\n            return (\n                <NavigationLayout>\n                    <AdviseNotFound analysis_id={analysis_id ?? \"no id\"} />\n                </NavigationLayout>\n            );\n        }\n    }, [adviseDocument.data, adviseDocument.status]);\n\n    const lastLog = useMemo(() => {\n        try {\n            return JSON.parse(\n                logs.data?.data?.log?.split(\"\\n\")?.at(-2) ?? \"{}\",\n            );\n        } catch (e) {\n            return {};\n        }\n    }, [logs.data]);\n\n    const stackInfoTotals = useMemo(() => {\n        if (!adviseDocument.data?.data?.result?.report?.stack_info) {\n            return {\n                info: 0,\n                warning: 0,\n                error: 0,\n            };\n        }\n        return {\n            info:\n                adviseDocument.data?.data.result.report?.stack_info.filter(\n                    t => t.type === \"INFO\",\n                ).length ?? 0,\n            warning:\n                adviseDocument.data?.data.result.report?.stack_info.filter(\n                    t => t.type === \"WARNING\",\n                ).length ?? 0,\n            error:\n                adviseDocument.data?.data.result.report?.stack_info.filter(\n                    t => t.type === \"ERROR\",\n                ).length ?? 0,\n        };\n    }, [adviseDocument.data?.data]);\n\n    const licenseTotals = useMemo(() => {\n        const data = {\n            info: 0,\n            warning: 0,\n            error: 0,\n        };\n\n        if (!metrics.licenses) {\n            return data;\n        }\n\n        Object.values(metrics.licenses).forEach(license => {\n            switch (license.metadata.isOsiApproved) {\n                case null:\n                    data.warning += Object.keys(license.packages).length;\n                    break;\n                case false:\n                    data.error += Object.keys(license.packages).length;\n                    break;\n            }\n        });\n\n        return data;\n    }, [metrics.licenses]);\n\n    return (\n        <AdviserLayout\n            chipData={{\n                \"stack-info\": stackInfoTotals,\n                licenses: licenseTotals,\n            }}\n        >\n            <MainLayout>\n                {loading ?? (\n                    <Routes>\n                        <Route\n                            path=\"summary\"\n                            element={\n                                <AdviseSummary\n                                    adviseDocument={adviseDocument?.data?.data}\n                                    metrics={metrics}\n                                    lastLog={lastLog}\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"packages\"\n                            element={<AdviseDetails graph={graph} />}\n                        />\n                        <Route\n                            path=\"logs\"\n                            element={<AdviseLogs logs={logs.data?.data?.log} />}\n                        />\n                        <Route\n                            path=\"compare\"\n                            element={\n                                <AdviseCompare\n                                    adviseDocument={adviseDocument?.data?.data}\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"stack-info\"\n                            element={\n                                <AdviseStackInfo\n                                    stack_info={\n                                        adviseDocument.data?.data?.result\n                                            ?.report?.stack_info\n                                    }\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"environment\"\n                            element={\n                                <AdviseEnvironmentInfo\n                                    runtime_environment={\n                                        adviseDocument.data?.data?.result\n                                            ?.report?.products?.[0]?.project\n                                            ?.runtime_environment\n                                    }\n                                    pipfileLock={JSON.stringify(\n                                        (\n                                            adviseDocument.data?.data?.result\n                                                ?.parameters as {\n                                                project: components[\"schemas\"][\"ProjectDef\"];\n                                            }\n                                        )?.project.requirements_locked ?? {},\n                                    )}\n                                    pipfile={JSON.stringify(\n                                        (\n                                            adviseDocument.data?.data?.result\n                                                ?.parameters as {\n                                                project: components[\"schemas\"][\"ProjectDef\"];\n                                            }\n                                        )?.project.requirements ?? {},\n                                    )}\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"licenses\"\n                            element={\n                                <AdviseLicenses metric={metrics.licenses} />\n                            }\n                        />\n                        <Route path=\"*\" element={<Navigate to=\"summary\" />} />\n                    </Routes>\n                )}\n            </MainLayout>\n        </AdviserLayout>\n    );\n};\n","import { components, operations } from \"lib/schema\";\n\nexport type Lockfile = {\n    default: {\n        [key: string]: {\n            version: string;\n            markers: string;\n            hashes: string[];\n        };\n    };\n    _meta: {\n        sources: {\n            name: string;\n            url: string;\n            verify_ssl: boolean;\n        }[];\n    };\n};\n\nexport function formatLockfile(\n    lockfile: components[\"schemas\"][\"ProjectDef\"],\n): operations[\"get_python_package_version_metadata\"][\"parameters\"][\"query\"][] {\n    return Object.entries(\n        (lockfile.requirements_locked as Lockfile).default,\n    ).map(([key, value]) => {\n        return {\n            name: key,\n            version: value.version.replace(\"==\", \"\"),\n            index: \"https://pypi.org/simple\", //TODO no hard code\n            os_name:\n                lockfile?.runtime_environment?.operating_system?.name ?? \"\",\n            os_version:\n                lockfile?.runtime_environment?.operating_system?.version ?? \"\",\n            python_version: lockfile?.runtime_environment?.python_version ?? \"\",\n        };\n    });\n}\n","import React, { useContext } from \"react\";\nimport Select from \"@mui/material/Select\";\nimport { Box, MenuItem, Typography } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SpecContext } from \"features/package/routes/PackageOverview\";\nimport { BoxTypeMap } from \"@mui/material/Box/Box\";\n\ninterface IParamDropdown {\n    options: { value: string }[];\n    type: string;\n    label?: string;\n    disabled?: boolean;\n    props?: BoxTypeMap;\n}\n\nexport const ParamDropdown = ({\n    options,\n    type,\n    label,\n    disabled,\n    ...props\n}: IParamDropdown) => {\n    const navigate = useNavigate();\n    const { specs, defaultSpecs } = useContext(SpecContext);\n\n    const handleChange = (event: { target: { value: string } }) => {\n        switch (type) {\n            case \"package_version\":\n                navigate(\n                    `/package/${specs.package_name}/${event.target.value}`,\n                );\n                break;\n            case \"index_url\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(event.target.value)}`,\n                );\n                break;\n            case \"os_name\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${event.target.value}`,\n                );\n\n                break;\n            case \"os_version\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${specs.os_name ?? defaultSpecs.os_name}/${\n                        event.target.value\n                    }`,\n                );\n                break;\n            case \"python_version\":\n                navigate(\n                    `/package/${specs.package_name}/${\n                        specs.package_version ?? defaultSpecs.package_version\n                    }/${encodeURIComponent(\n                        specs.index_url ?? defaultSpecs.index_url ?? \"\",\n                    )}/${specs.os_name ?? defaultSpecs.os_name}/${\n                        specs.os_version ?? defaultSpecs.os_version\n                    }/${event.target.value}`,\n                );\n                break;\n        }\n    };\n\n    return (\n        <Box {...props}>\n            <Typography variant=\"body2\">{label}</Typography>\n            <Select\n                displayEmpty\n                fullWidth\n                value={specs[type as keyof typeof specs] ?? \"\"}\n                onChange={handleChange}\n                size=\"small\"\n                variant=\"outlined\"\n                disabled={disabled}\n                renderValue={value => {\n                    if (!value) {\n                        return (\n                            <em style={{ color: \"grey\" }}>\n                                {defaultSpecs?.[type as keyof typeof specs] ??\n                                    label}\n                            </em>\n                        );\n                    } else {\n                        return value;\n                    }\n                }}\n            >\n                <MenuItem disabled value=\"\">\n                    <em>{label}</em>\n                </MenuItem>\n                {options.map(option => {\n                    return (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.value}\n                        </MenuItem>\n                    );\n                })}\n            </Select>\n        </Box>\n    );\n};\n","import React, { useContext, useMemo, useState } from \"react\";\n\n// material-ui\nimport { Box, Grid, IconButton, Skeleton, Typography } from \"@mui/material\";\nimport ArrowLeftIcon from \"@mui/icons-material/ArrowLeft\";\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\n\n// utils\nimport { ParamDropdown } from \"../ParamDropdown\";\nimport { SpecContext } from \"../../routes/PackageOverview\";\nimport { components } from \"lib/schema\";\n\nexport interface IPackageHeader {\n    /** Package metadata object.*/\n    metadata?: {\n        /** Name of package. */\n        Name: string;\n        /** Description of package. */\n        Summary?: string;\n        /** License of package */\n        License?: string;\n    };\n    /** list of all versions of a package **/\n    allVersions?: components[\"schemas\"][\"PythonPackageVersionsResponse\"][\"versions\"];\n    /** list of all environments of a package, version, index **/\n    allEnvironments?: components[\"schemas\"][\"PythonPackageVersionEnvironmentsResponse\"][\"environments\"];\n}\n\n/**\n * A header for package metadata.\n */\nexport const PackageHeader = ({\n    metadata,\n    allVersions = [],\n    allEnvironments = [],\n}: IPackageHeader) => {\n    const { defaultSpecs, specs } = useContext(SpecContext);\n    const [showEnvParams, setShowEnvParams] = useState(false);\n\n    const versionOptions = useMemo(() => {\n        const dups = new Set();\n        return allVersions\n            .filter(version => {\n                if (!dups.has(version.package_version)) {\n                    dups.add(version.package_version);\n                    return true;\n                }\n                return false;\n            })\n            .map(version => {\n                return {\n                    value: version.package_version,\n                };\n            })\n            .sort((a, b) => (a.value.split(\".\") > b.value.split(\".\") ? 1 : -1));\n    }, [allVersions]);\n\n    const indexUrlOptions = useMemo(() => {\n        const dups = new Set();\n        return allVersions\n            .filter(version => {\n                if (specs.package_version) {\n                    return specs.package_version === version.package_version;\n                } else {\n                    return (\n                        defaultSpecs.package_version === version.package_version\n                    );\n                }\n            })\n            .filter(version => {\n                if (!dups.has(version.index_url)) {\n                    dups.add(version.index_url);\n                    return true;\n                }\n                return false;\n            })\n            .map(version => {\n                return {\n                    value: version.index_url,\n                };\n            });\n    }, [allVersions]);\n\n    const [osNameOptions, osVersionOptions, pythonVersionOptions] =\n        useMemo(() => {\n            const name = allEnvironments.map(env => {\n                return {\n                    value: env.os_name,\n                };\n            });\n            const version = allEnvironments\n                .filter(env => !specs.os_name || specs.os_name === env.os_name)\n                .map(env => {\n                    return {\n                        value: env.os_version,\n                    };\n                });\n            const pyVersion = allEnvironments\n                .filter(\n                    env =>\n                        (!specs.os_name || specs.os_name === env.os_name) &&\n                        (!specs.os_version ||\n                            specs.os_version === env.os_version),\n                )\n                .map(env => {\n                    return {\n                        value: env.python_version,\n                    };\n                });\n            return [name, version, pyVersion];\n        }, [allEnvironments, specs]);\n\n    if (!metadata) {\n        return (\n            <Box data-testid=\"package-header-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div>\n            <Grid container alignItems=\"flex-end\" spacing={1}>\n                <Grid item>\n                    <Typography variant=\"h4\" mr={2}>\n                        <b>{metadata?.Name}</b>\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <ParamDropdown\n                        options={versionOptions ?? []}\n                        type=\"package_version\"\n                        label={\"Version\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <ParamDropdown\n                        options={indexUrlOptions ?? []}\n                        type=\"index_url\"\n                        label={\"Index URL\"}\n                        disabled={specs.package_version === undefined}\n                    />\n                </Grid>\n                {showEnvParams ? (\n                    <React.Fragment>\n                        <Grid item>\n                            <ParamDropdown\n                                options={osNameOptions ?? []}\n                                type=\"os_name\"\n                                label={\"OS Name\"}\n                                disabled={specs.index_url === undefined}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <ParamDropdown\n                                options={osVersionOptions ?? []}\n                                type=\"os_version\"\n                                label={\"OS Version\"}\n                                disabled={specs.os_name === undefined}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <ParamDropdown\n                                options={pythonVersionOptions ?? []}\n                                type=\"python_version\"\n                                label={\"Python Version\"}\n                                disabled={specs.os_version === undefined}\n                            />\n                        </Grid>\n                    </React.Fragment>\n                ) : null}\n                <Grid item xs={1}>\n                    <IconButton\n                        onClick={() => setShowEnvParams(!showEnvParams)}\n                        data-testid=\"package-header-expand-button\"\n                    >\n                        {showEnvParams ? (\n                            <ArrowLeftIcon fontSize=\"large\" />\n                        ) : (\n                            <ArrowRightIcon fontSize=\"large\" />\n                        )}\n                    </IconButton>\n                </Grid>\n            </Grid>\n\n            <Typography gutterBottom variant=\"body1\" mt={2}>\n                {metadata?.Summary ?? \"NaN\"}\n            </Typography>\n            <div>\n                <IconText\n                    text={metadata?.License ?? \"NaN\"}\n                    icon={<GavelIcon />}\n                />\n            </div>\n        </div>\n    );\n};\n","import { Button, Grid, Menu, MenuItem, Typography } from \"@mui/material\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport React, { useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface IVersionDropdown {\n    node: {\n        name: string;\n        versions: string[];\n        specifier: string;\n    };\n}\n\nexport const VersionDropdown = ({ node }: IVersionDropdown) => {\n    const [open, setOpen] = React.useState<string | null | undefined>(null);\n    const [anchorEl, setAnchorEl] = React.useState<Element | null>(null);\n    const navigate = useNavigate();\n\n    const versionOptions = useMemo(() => {\n        const options: { [key: string]: string[] } = {};\n        const distribution = [0, 0];\n        const noDup = new Set();\n        node.versions.forEach(version => {\n            const split = version.split(\".\");\n            const key = split[0] + \".\" + (split[1] ?? \"\");\n\n            if (options[key] === undefined) {\n                options[key] = [];\n                distribution[0] += 1;\n            }\n            if (!noDup.has(version)) {\n                options[key].push(version);\n                distribution[1] += 1;\n                noDup.add(version);\n            }\n        });\n\n        // check if there are too many buckets\n        if (distribution[0] / distribution[1] > 0.25) {\n            // merge buckets\n            const buckets = Math.ceil(distribution[0] * 0.25);\n            const fixedOptions: { [key: string]: string[] } = {};\n            let currentKey: string;\n            Object.keys(options).forEach((key, index, array) => {\n                if (index % buckets === 0) {\n                    currentKey = `${key} - ${\n                        array[index + buckets - 1] ?? array.at(-1)\n                    }`;\n                    fixedOptions[currentKey] = [];\n                }\n                fixedOptions[currentKey].push(...options[array[index]]);\n            });\n            return fixedOptions;\n        }\n\n        return options;\n    }, [node]);\n\n    return (\n        <div>\n            <Button\n                onClick={event => {\n                    setOpen(node.name);\n                    setAnchorEl(event.currentTarget);\n                }}\n                variant=\"outlined\"\n                endIcon={<KeyboardArrowDownIcon />}\n            >\n                {node.specifier ?? \"ANY\"}\n            </Button>\n            <Menu\n                open={open === node.name}\n                anchorEl={anchorEl}\n                onClose={() => {\n                    setOpen(undefined);\n                    setAnchorEl(null);\n                }}\n                PaperProps={{\n                    style: {\n                        maxHeight: \"40%\",\n                        maxWidth: \"50%\",\n                    },\n                }}\n            >\n                <MenuItem disabled={true}>\n                    Select a version to navigate to:\n                </MenuItem>\n                <Grid container alignContent=\"flex-start\">\n                    {Object.entries(versionOptions).map(([key, value]) => {\n                        return (\n                            <Grid item xs key={key}>\n                                <MenuItem sx={{ mt: 2 }} disabled divider>\n                                    {key}\n                                </MenuItem>\n                                {value.map(version => {\n                                    return (\n                                        <MenuItem\n                                            key={version}\n                                            onClick={() =>\n                                                navigate(\n                                                    `/package/${node.name}/${version}`,\n                                                )\n                                            }\n                                        >\n                                            <Typography variant={\"body2\"}>\n                                                {version}\n                                            </Typography>\n                                        </MenuItem>\n                                    );\n                                })}\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </Menu>\n        </div>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport InfoCard from \"components/Elements/InfoCard\";\nimport { Box, Divider, Grid, Skeleton, Typography } from \"@mui/material\";\nimport { VersionDropdown } from \"./VersionDropdown\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { SimplePackageNodeValue } from \"lib/interfaces/SimplePackageNodeValue\";\n\ninterface IPackageDependencies {\n    graph?: Graph<Node<SimplePackageNodeValue>>;\n}\n\ntype PackageDependenciesMetric = {\n    name: string;\n    versions: string[];\n    specifier: string;\n    extra: string[];\n};\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const PackageDependencies = ({ graph }: IPackageDependencies) => {\n    const metric = useMemo(() => {\n        if (!graph?.nodes) {\n            return;\n        }\n\n        const root = graph.nodes.get(\"*App\");\n\n        if (root) {\n            const bfs = graph.graphSearch(root);\n            const visitedOrder = Array.from(bfs);\n\n            const metric: PackageDependenciesMetric[] = [];\n\n            visitedOrder.forEach(node => {\n                if (node.key !== \"*App\" && !node.value.metadata) {\n                    metric.push({\n                        name: node.value.label ?? node.key,\n                        versions: node.value.versions ?? [],\n                        specifier: node.value.specifier ?? \"*\",\n                        extra: node.value.extra ?? [],\n                    });\n                }\n            });\n\n            return metric;\n        }\n    }, [graph]);\n\n    if (!metric) {\n        return (\n            <Box data-testid=\"package-dependencies-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <InfoCard\n            cardMeta={{\n                title: \"Dependencies\",\n            }}\n            cardBody={\n                <div data-testid=\"package-dependencies-loaded\">\n                    <Grid container>\n                        <Grid item xs>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Package\n                            </Typography>\n                        </Grid>\n                        <Grid item xs>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Versions\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Extra\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                    <Divider />\n                    <Grid container rowSpacing={2} mt={1}>\n                        {metric.map(node => {\n                            return (\n                                <Grid container item xs={12} key={node.name}>\n                                    <Grid item xs>\n                                        <Typography\n                                            variant=\"body1\"\n                                            gutterBottom\n                                        >\n                                            {node.name}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs>\n                                        <VersionDropdown node={node} />\n                                    </Grid>\n                                    <Grid item xs={2}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            gutterBottom\n                                        >\n                                            {node.extra?.join(\", \")}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n            }\n        />\n    );\n};\n","import React from \"react\";\n\ninterface IPackageNotFound {\n    package_name: string;\n    package_version: string;\n}\n\nexport const PackageNotFound = ({\n    package_name,\n    package_version,\n}: IPackageNotFound) => {\n    return (\n        <div>\n            `&quot;{package_name}\n            {package_version ? \" \" + package_version : \"\"}&quot;` not found\n        </div>\n    );\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/versions\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type PackageVersionsRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\nexport const getPackageVersions = async (name: requestParams[\"name\"]) => {\n    return axios.get<PackageVersionsRequestResponseSuccess>(\n        THOTH_URL + \"/python/package/versions\",\n        {\n            params: {\n                name: name,\n            },\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const usePackageVersions = (\n    name: requestParams[\"name\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<PackageVersionsRequestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!name,\n        queryKey: [\"packageVersions\", name],\n        queryFn: () => getPackageVersions(name),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/python/package/version/environments\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"query\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport const getPackageEnvironments = async (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n) => {\n    return axios.get(THOTH_URL + \"/python/package/version/environments\", {\n        params: {\n            name: name,\n            version: version,\n            index: index,\n        },\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const usePackageEnvironments = (\n    name?: requestParams[\"name\"],\n    version?: requestParams[\"version\"],\n    index?: requestParams[\"index\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<AxiosResponse<requestResponseSuccess>, AxiosError>({\n        ...config,\n        enabled: !!name && !!version && !!index,\n        queryKey: [\"packageEnvironments\", name, version, index],\n        queryFn: () => getPackageEnvironments(name, version, index),\n    });\n};\n","import React from \"react\";\n\ninterface IErrorPage {\n    message: string;\n    type: string | number;\n    reason: string;\n}\n\nexport const ErrorPage = ({ message, type, reason }: IErrorPage) => {\n    return (\n        <div>\n            <p>\n                {type}\n                {\": \"}\n                {message}\n            </p>\n            <p>{reason}</p>\n        </div>\n    );\n};\n","// React\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// local\nimport { PackageDependencies, PackageHeader } from \"../components\";\n\n// material-ui\nimport { CircularProgress, Grid } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { usePackageMetadata } from \"api\";\nimport { PackageNotFound } from \"./PackageNotFound\";\nimport { useSimpleGraph } from \"../hooks\";\nimport { usePackageEnvironments, usePackageVersions } from \"../api\";\nimport { ErrorPage } from \"routes/ErrorPage\";\nimport { PackageMetadata } from \"lib/types/PackageMetadata\";\n\ntype SpecDetails = {\n    package_name: string;\n    package_version?: string;\n    index_url?: string;\n    os_name?: string;\n    os_version?: string;\n    python_version?: string;\n};\n\nexport const SpecContext = React.createContext<{\n    specs: SpecDetails;\n    defaultSpecs: SpecDetails;\n}>({ specs: { package_name: \"\" }, defaultSpecs: { package_name: \"\" } });\n\n// The page that displays all analysis data\nexport const PackageOverview = () => {\n    const params = useParams<SpecDetails>();\n    const [defaultSpecs, setDefaultSpecs] = useState<SpecDetails>({\n        package_name: params.package_name ?? \"\",\n        package_version: undefined,\n        index_url: undefined,\n        os_name: undefined,\n        os_version: undefined,\n        python_version: undefined,\n    });\n\n    // what is on the url params\n    const specs = useMemo<SpecDetails>(() => {\n        return {\n            package_name: params.package_name ?? \"\",\n            package_version: params?.package_version,\n            index_url: params?.index_url\n                ? decodeURIComponent(params.index_url)\n                : undefined,\n            os_name: params?.os_name,\n            os_version: params?.os_version,\n            python_version: params?.python_version,\n        };\n    }, [params]);\n\n    // get all pages of versions/indexes and merge them together\n    const allVersions = usePackageVersions(specs.package_name);\n\n    // get environments for specific package, version, index\n    const allEnvironments = usePackageEnvironments(\n        specs.package_name,\n        specs.package_version ?? defaultSpecs.package_version,\n        specs.index_url ?? defaultSpecs.index_url,\n        { useErrorBoundary: false },\n    );\n\n    // some params are optional but still need a default value\n    useEffect(() => {\n        const d: SpecDetails = {\n            package_name: params.package_name ?? \"\",\n            package_version: undefined,\n            index_url: undefined,\n            os_name: undefined,\n            os_version: undefined,\n            python_version: undefined,\n        };\n\n        // get default package version and index\n        // needs package name and versions list\n        if (specs.package_name) {\n            if (\n                allVersions.data?.data &&\n                allVersions.data.data.versions.length > 0\n            ) {\n                d.package_version =\n                    allVersions.data.data.versions.at(-1)?.package_version;\n                d.index_url = allVersions.data.data.versions.at(-1)?.index_url;\n            }\n        }\n\n        // get default environment\n        // needs list of environments\n        if (\n            allEnvironments.data &&\n            allEnvironments.data.data.environments.length > 0\n        ) {\n            const filtered = allEnvironments.data.data.environments.filter(\n                env =>\n                    (!specs.os_name || specs.os_name === env.os_name) &&\n                    (!specs.os_version || specs.os_version === env.os_version),\n            );\n            if (filtered.length > 0) {\n                d.os_name = filtered.at(0)?.os_name;\n                d.os_version = filtered.at(0)?.os_version;\n                d.python_version = filtered.at(0)?.python_version;\n            }\n        }\n\n        if (\n            Object.entries(defaultSpecs).some(\n                ([key, val]) => d[key as keyof typeof d] !== val,\n            )\n        ) {\n            setDefaultSpecs(d);\n        }\n    }, [allVersions.data, allEnvironments, specs]);\n\n    // get package metadata\n    const metadata = usePackageMetadata(\n        specs.package_name,\n        specs.package_version ?? defaultSpecs.package_version,\n        specs.index_url ?? defaultSpecs.index_url,\n        specs.os_name ?? defaultSpecs.os_name,\n        specs.os_version ?? defaultSpecs.os_version,\n        specs.python_version ?? defaultSpecs.python_version,\n        { useErrorBoundary: false },\n    );\n\n    const graph = useSimpleGraph(metadata);\n\n    if (metadata.isLoading || allVersions?.data?.data?.versions?.length === 0) {\n        return (\n            <div\n                className=\"w-full h-48 flex justify-center items-center\"\n                data-testid=\"loading\"\n            >\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (!metadata.data) {\n        if (metadata?.error?.response?.data?.error) {\n            return (\n                <ErrorPage\n                    message={metadata.error.response.data.error}\n                    type={metadata.error.response.status}\n                    reason={`${\n                        metadata?.error?.config?.url\n                    } failed with params ${JSON.stringify(\n                        metadata?.error?.config?.params,\n                    )}`}\n                />\n            );\n        }\n        return (\n            <PackageNotFound\n                package_name={params.package_name ?? \"\"}\n                package_version={params.package_version ?? \"\"}\n            />\n        );\n    }\n\n    return (\n        <SpecContext.Provider value={{ specs, defaultSpecs }}>\n            <Grid container>\n                <Grid item xs={12} mb={3}>\n                    <PackageHeader\n                        metadata={\n                            metadata.data.data.metadata.importlib_metadata\n                                .metadata as PackageMetadata\n                        }\n                        allVersions={allVersions?.data?.data?.versions}\n                        allEnvironments={\n                            allEnvironments?.data?.data?.environments\n                        }\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <PackageDependencies graph={graph} />\n                </Grid>\n            </Grid>\n        </SpecContext.Provider>\n    );\n};\n","import { useEffect, useState } from \"react\";\n\n// utils\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\n\nimport { usePackageMetadata } from \"api\";\nimport { PackageMetadata } from \"lib/types/PackageMetadata\";\nimport { SimplePackageNodeValue } from \"lib/interfaces/SimplePackageNodeValue\";\n\nexport type PackageDependencyMetric = {\n    extra: string[];\n    extras: string[];\n    marker: string;\n    marker_evaluated: string;\n    marker_evaluation_error: string | null;\n    marker_evaluation_result: boolean;\n    specifier: string;\n    versions: string[];\n};\n\n/**\n * Given a list of packages, create a graph using metadata information.\n */\nexport function useSimpleGraph(\n    metadata: ReturnType<typeof usePackageMetadata>,\n) {\n    const [graph, setGraph] = useState<Graph<Node<SimplePackageNodeValue>>>();\n\n    useEffect(() => {\n        if (metadata.status !== \"success\") {\n            return;\n        }\n\n        // create graph\n        const tempGraph: Graph<Node<SimplePackageNodeValue>> = new Graph();\n\n        // add app node to graph\n        const app = tempGraph.addVertex(\n            \"*App\",\n            {\n                id: \"*App\",\n                label: \"App\",\n                depth: -1,\n            },\n            Node,\n        );\n\n        const root = tempGraph.addVertex(\n            metadata.data.data.metadata.package_name.toLowerCase(),\n            {\n                id: metadata.data.data.metadata.package_name.toLowerCase(),\n                label: metadata.data.data.metadata.package_name,\n                metadata: metadata.data.data.metadata.importlib_metadata\n                    .metadata as PackageMetadata,\n                depth: 0,\n            },\n            Node,\n        );\n\n        root.parents = new Set();\n        root.parents.add(\"*App\");\n        tempGraph.addEdge(app.key, root.key);\n\n        // add deps to graph\n        Object.entries(\n            metadata.data.data.metadata.dependencies as {\n                [key: string]: PackageDependencyMetric;\n            },\n        ).forEach(([name, value]) => {\n            // add package to graph\n            const node = tempGraph.addVertex(\n                name.toLowerCase(),\n                {\n                    id: name.toLowerCase(),\n                    label: name,\n                    metadata: null,\n                    versions: value.versions,\n                    specifier: value.specifier,\n                    extra: value.extra,\n                    depth: 1,\n                },\n                Node,\n            );\n            node.parents = new Set();\n\n            tempGraph.addEdge(root.key, node.key);\n\n            // set parent\n            node.parents.add(root.key);\n        });\n\n        setGraph(tempGraph);\n    }, [metadata.data]);\n\n    return graph;\n}\n","// React\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport { PackageOverview } from \"./PackageOverview\";\nimport { NotFound } from \"routes/NotFound\";\nimport { NavigationLayout } from \"components/Layout/NavigationLayout\";\n\n// The page that displays all analysis data\nexport const PackageRoutes = () => {\n    return (\n        <NavigationLayout>\n            <Routes>\n                <Route\n                    path=\"/:package_version/:index_url/:os_name/:os_version/:python_version\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url/:os_name\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url/:os_name/:os_version\"\n                    element={<PackageOverview />}\n                />\n                <Route\n                    path=\"/:package_version/:index_url\"\n                    element={<PackageOverview />}\n                />\n                <Route path=\"/:package_version\" element={<PackageOverview />} />\n                <Route path=\"/\" element={<PackageOverview />} />\n                <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n        </NavigationLayout>\n    );\n};\n","// React\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Typography, Chip, Button, Collapse, Stack } from \"@mui/material\";\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\nimport FeedRoundedIcon from \"@mui/icons-material/FeedRounded\";\n\n// local\nimport IconText from \"components/Elements/IconText\";\n\n// utils\nimport { calcTime } from \"utils/calcTime\";\nimport { components } from \"lib/schema\";\nimport { ChipProps } from \"@mui/material/Chip/Chip\";\n\ninterface IImageHeader {\n    imageDocument: components[\"schemas\"][\"AnalysisResultResponse\"] &\n        components[\"schemas\"][\"AnalysisStatusResponse\"];\n    logs?: components[\"schemas\"][\"AnalysisLogResponse\"][\"log\"];\n}\n\n/**\n * Displays basic Advise document information and\n * displays any errors, info, or warnings that came up\n * in the document generation.\n */\nexport const ImageHeader = ({ imageDocument, logs }: IImageHeader) => {\n    const [showLogs, setShowLogs] = React.useState(false);\n    const [selectedLine, setSelectedLine] = React.useState<\n        number | undefined\n    >();\n\n    // get status of the report\n    const [statusText, statusColor]: [string, ChipProps[\"color\"] | undefined] =\n        useMemo(() => {\n            if (imageDocument?.result) {\n                return [\"COMPLETE\", \"success\"];\n            }\n            // if report is not done\n            else if (imageDocument?.status?.state) {\n                return [imageDocument.status.state.toUpperCase(), \"info\"];\n            } else {\n                return [\"UNKNOWN\", undefined];\n            }\n        }, [imageDocument]);\n\n    return (\n        <div>\n            <Typography variant=\"h4\" mb={2}>\n                <b>\n                    {imageDocument?.metadata?.document_id ??\n                        imageDocument.parameters.analysis_id}\n                </b>\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n                <Chip label={statusText} color={statusColor} />\n                <IconText\n                    text={calcTime(\n                        imageDocument?.status?.finished_at,\n                        imageDocument?.status?.started_at,\n                        imageDocument?.metadata?.datetime,\n                    )}\n                    icon={<AccessTimeIcon />}\n                />\n                <Button\n                    sx={{ marginLeft: 2 }}\n                    onClick={() => setShowLogs(!showLogs)}\n                >\n                    <IconText text=\"Logs\" icon={<FeedRoundedIcon />} />\n                </Button>\n            </Stack>\n            <Collapse in={showLogs}>\n                {logs?.split(\"\\n\").map((line, i) => {\n                    return (\n                        <Typography\n                            key={i}\n                            noWrap={selectedLine !== i}\n                            onClick={() =>\n                                setSelectedLine(\n                                    selectedLine === i ? undefined : i,\n                                )\n                            }\n                            variant=\"body2\"\n                            sx={{\n                                backgroundColor:\n                                    selectedLine === i\n                                        ? \"lightyellow\"\n                                        : i % 2 === 0\n                                        ? \"lightgray\"\n                                        : \"unset\",\n                            }}\n                        >\n                            {line}\n                        </Typography>\n                    );\n                }) ?? \"Image log is not available.\"}\n            </Collapse>\n        </div>\n    );\n};\n","// react\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n// material-ui\nimport { Box, Skeleton } from \"@mui/material\";\nimport { components } from \"lib/schema\";\n\ninterface IDebInfo {\n    /** An object holding metric info. */\n    imageDocument: components[\"schemas\"][\"AnalysisResultResponse\"];\n}\n\nconst columns = [\n    { field: \"name\", headerName: \"Package Name\", flex: 1 },\n    { field: \"version\", headerName: \"Version\", flex: 0.5 },\n    { field: \"arch\", headerName: \"Architecture\", flex: 0.5 },\n];\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const DebInfo = ({ imageDocument }: IDebInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box>\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div style={{ height: 400, width: \"100%\" }}>\n            <DataGrid\n                disableSelectionOnClick\n                disableColumnSelector\n                hideFooterSelectedRowCount\n                getRowId={row => row.package_identifier}\n                density=\"compact\"\n                rows={imageDocument?.result?.[\"deb\"]}\n                columns={columns}\n                pageSize={50}\n                rowsPerPageOptions={[25, 50, 100]}\n            />\n        </div>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Box, Grid, Skeleton, Stack, Typography } from \"@mui/material\";\nimport { Chip } from \"@mui/material\";\nimport { ImageDocumentRequestResponseSuccess } from \"../../api\";\n\ninterface IPythonInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n}\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const PythonInfo = ({ imageDocument }: IPythonInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box data-testid=\"python-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    const files = useMemo(() => {\n        if (!imageDocument?.result?.[\"python-files\"]) {\n            return [];\n        }\n\n        const paths = new Map();\n        imageDocument.result[\"python-files\"].forEach(file => {\n            const split = file.filepath.split(\"/\", 4);\n            const key = split[1] + \"/\" + split[2] + \"/\" + split[3];\n            if (paths.has(key)) {\n                paths.set(key, paths.get(key) + 1);\n            } else {\n                paths.set(key, 1);\n            }\n        });\n        return Array.from(paths.entries()).map(([key, value]) => {\n            return {\n                path: key,\n                count: value,\n            };\n        });\n    }, [imageDocument]);\n\n    const interpreters = useMemo(() => {\n        return imageDocument.result[\"python-interpreters\"].filter(\n            interpreter => !!interpreter.version,\n        );\n    }, [imageDocument]);\n\n    return (\n        <Stack direction=\"column\" spacing={3}>\n            {interpreters?.length > 0 ? (\n                <Stack direction=\"row\" spacing={1} alignItems={\"center\"}>\n                    <Typography variant={\"h6\"}>\n                        Python interpreters:{\" \"}\n                    </Typography>\n                    {interpreters.map((interpreter, i) => {\n                        return (\n                            <Chip\n                                data-testid=\"python-info-chip\"\n                                key={(interpreter?.version ?? \"\") + i}\n                                label={interpreter.version}\n                            />\n                        );\n                    })}\n                </Stack>\n            ) : undefined}\n            <div data-testid=\"python-info-loaded\">\n                <Stack direction=\"row\" spacing={1} mb={1} alignItems={\"center\"}>\n                    <Typography variant={\"h6\"}>\n                        Total number of Python files:{\" \"}\n                    </Typography>\n                    <Typography variant={\"body1\"}>\n                        {files.reduce((prev, cur) => prev + cur.count, 0)}\n                    </Typography>\n                </Stack>\n                <Grid container>\n                    {files\n                        .sort((a, b) => b.count - a.count)\n                        .map(file => {\n                            return (\n                                <Grid\n                                    key={file.path}\n                                    item\n                                    xs={12}\n                                    lg={6}\n                                    xl={4}\n                                >\n                                    <Stack\n                                        ml={3}\n                                        direction=\"row\"\n                                        spacing={1}\n                                        alignItems={\"center\"}\n                                        justifyContent={\"space-between\"}\n                                    >\n                                        <Typography variant={\"body2\"}>\n                                            {file.path}:\n                                        </Typography>\n                                        <Typography variant={\"body2\"}>\n                                            <b>{file.count}</b>\n                                        </Typography>\n                                    </Stack>\n                                </Grid>\n                            );\n                        })}\n                </Grid>\n            </div>\n        </Stack>\n    );\n};\n","// react\nimport React, { useMemo } from \"react\";\n\n// material-ui\nimport { Box, Grid, Skeleton, Stack, Typography } from \"@mui/material\";\nimport { Chip } from \"@mui/material\";\nimport {\n    ImageDocumentRequestResponseSuccess,\n    ImageMetadataRequestResponseSuccess,\n} from \"../../api\";\n\nexport interface IImageInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n    imageMetadata?: ImageMetadataRequestResponseSuccess;\n}\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const ImageInfo = ({ imageDocument, imageMetadata }: IImageInfo) => {\n    const params = useMemo(() => {\n        if (imageMetadata) {\n            return imageMetadata as ImageMetadataRequestResponseSuccess & {\n                labels: { [key: string]: string };\n            };\n        } else if (imageDocument?.result?.[\"skopeo-inspect\"]) {\n            return {\n                architecture:\n                    imageDocument.result[\"skopeo-inspect\"].Architecture,\n                created: imageDocument.result[\"skopeo-inspect\"].Created,\n                digest: imageDocument.result[\"skopeo-inspect\"].Digest,\n                docker_version:\n                    imageDocument.result[\"skopeo-inspect\"].DockerVersion,\n                labels: imageDocument.result[\"skopeo-inspect\"].Labels as {\n                    [key: string]: string;\n                },\n                layers: imageDocument.result[\"skopeo-inspect\"].Layers,\n                os: imageDocument.result[\"skopeo-inspect\"].Os,\n                repo_tags: imageDocument.result[\"skopeo-inspect\"].RepoTags,\n            };\n        }\n    }, [imageDocument, imageMetadata]);\n\n    if (!params) {\n        return (\n            <Box data-testid=\"image-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                    <Typography variant={\"body1\"}>\n                        <b>{params.labels?.[\"io.k8s.display-name\"]}</b>\n                    </Typography>\n                    <Chip label={params.labels?.name.split(\":\").at(-1)} />\n                </Stack>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant={\"h6\"} mb={1}>\n                    General information\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Summary\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.summary}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Description\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.description}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Provider\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.vendor}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Maintainer\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.maintainer}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Build date\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {new Date(\n                        params.labels?.[\"build-date\"] as string,\n                    ).toLocaleDateString()}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={12}>\n                <Typography variant={\"h6\"} mb={1}>\n                    Technical information\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Image name\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>{params.labels?.name}</Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Image version\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.version}\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Architecture\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>{params.architecture}</Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Usage\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    <code>{params.labels?.usage}</code>\n                </Typography>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Typography variant={\"body2\"} mr={3} ml={2} mb={1}>\n                    Exposed Ports\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <Typography variant={\"body2\"}>\n                    {params.labels?.[\"io.openshift.expose-services\"]}\n                </Typography>\n            </Grid>\n        </Grid>\n    );\n};\n","// react\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n// material-ui\nimport { Box, Skeleton } from \"@mui/material\";\nimport { ImageDocumentRequestResponseSuccess } from \"../../api\";\n\ninterface IRPMInfo {\n    imageDocument?: ImageDocumentRequestResponseSuccess;\n}\n\ntype RPMDependency = {\n    arch: string;\n    dependencies: string[];\n    epoch: string | null;\n    name: string;\n    package_identifier: string;\n    release: string;\n    src: boolean;\n    version: string;\n};\n\nconst columns = [\n    { field: \"name\", headerName: \"Package Name\", flex: 1 },\n    { field: \"version\", headerName: \"Version\", flex: 0.5 },\n    { field: \"release\", headerName: \"Release\", flex: 0.25 },\n    {\n        field: \"dependencies\",\n        headerName: \"Dependencies\",\n        flex: 0.5,\n        valueGetter: (params: { row: RPMDependency }) =>\n            params.row?.dependencies?.length ?? 0,\n        sortable: false,\n    },\n    { field: \"epoch\", headerName: \"Epoch\", flex: 0.5 },\n    { field: \"arch\", headerName: \"Architecture\", flex: 0.5 },\n];\n\n/**\n * A metric card displaying dependency information of a single package.\n */\nexport const RPMInfo = ({ imageDocument }: IRPMInfo) => {\n    if (!imageDocument) {\n        return (\n            <Box data-testid=\"rpm-info-not-loaded\">\n                <Skeleton />\n                <Skeleton />\n                <Skeleton width={\"60%\"} />\n            </Box>\n        );\n    }\n\n    return (\n        <div\n            style={{ height: 400, width: \"100%\" }}\n            data-testid=\"rpm-info-loaded\"\n        >\n            <DataGrid\n                disableSelectionOnClick\n                disableColumnSelector\n                hideFooterSelectedRowCount\n                getRowId={row => row.package_identifier}\n                density=\"compact\"\n                rows={\n                    imageDocument?.result?.[\n                        \"rpm-dependencies\"\n                    ] as RPMDependency[]\n                }\n                columns={columns}\n                pageSize={50}\n                rowsPerPageOptions={[25, 50, 100]}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport InfoCard from \"components/Elements/InfoCard\";\nimport { DependenciesMetric, LicenseMetric } from \"components/Metrics\";\nimport { Masonry } from \"@mui/lab\";\nimport { DebInfo, PythonInfo, ImageInfo, RPMInfo } from \"../components\";\nimport {\n    ImageDocumentRequestResponseSuccess,\n    ImageMetadataRequestResponseSuccess,\n} from \"../api\";\nimport { ImageMetrics } from \"../hooks\";\n\ninterface IImageSummary {\n    imageDocument: ImageDocumentRequestResponseSuccess;\n    imageMetadata?: ImageMetadataRequestResponseSuccess;\n    metrics: ImageMetrics;\n}\n\nexport const ImageSummary = ({\n    metrics,\n    imageDocument,\n    imageMetadata,\n}: IImageSummary) => {\n    return (\n        <Masonry columns={{ xs: 1, md: 2 }} spacing={3} sx={{ mb: 3, mt: 1 }}>\n            {imageDocument || imageMetadata ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Image Details\",\n                        }}\n                        cardBody={\n                            <ImageInfo\n                                imageDocument={imageDocument}\n                                imageMetadata={imageMetadata}\n                            />\n                        }\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument?.result?.[\"python-interpreters\"]?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Details\",\n                        }}\n                        cardBody={<PythonInfo imageDocument={imageDocument} />}\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument?.result?.[\"rpm-dependencies\"]?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"RPM Details\",\n                        }}\n                        cardBody={<RPMInfo imageDocument={imageDocument} />}\n                    />\n                </div>\n            ) : undefined}\n\n            {imageDocument.result?.deb?.length > 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Debian Details\",\n                        }}\n                        cardBody={<DebInfo imageDocument={imageDocument} />}\n                    />{\" \"}\n                </div>\n            ) : undefined}\n\n            {Object.keys(metrics?.dependencies?.all ?? {}).length !== 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Packages Dependencies\",\n                        }}\n                        cardBody={\n                            <DependenciesMetric\n                                metric={metrics?.dependencies}\n                            />\n                        }\n                    />\n                </div>\n            ) : undefined}\n\n            {Object.keys(metrics?.licenses ?? {}).length !== 0 ? (\n                <div>\n                    <InfoCard\n                        cardMeta={{\n                            title: \"Python Packages Licenses\",\n                        }}\n                        cardBody={<LicenseMetric metric={metrics?.licenses} />}\n                    />{\" \"}\n                </div>\n            ) : undefined}\n        </Masonry>\n    );\n};\n","import axios, { AxiosResponse, AxiosError } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { paths } from \"lib/schema\";\nimport { THOTH_URL } from \"config\";\n\ntype path = paths[\"/analyze/{analysis_id}\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\nexport type ImageDocumentRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"202\"][\"content\"][\"application/json\"];\nexport type ImageDocumentRequestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/analyze`\n *\n * @param analysis_id - the image document id (ex: `package-extract-211112223258-38af1a4746733b53`)\n */\nexport const getImageDocument = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get<ImageDocumentRequestResponseSuccess>(\n        THOTH_URL + \"/analyze/\" + analysis_id,\n        {\n            headers: {\n                accept: \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useImageDocument = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<ImageDocumentRequestResponseSuccess>,\n        AxiosError<ImageDocumentRequestResponseFailure>\n    >({\n        ...config,\n        enabled: !!analysis_id,\n        queryKey: [\"ImageDocument\", analysis_id],\n        queryFn: () => getImageDocument(analysis_id),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/analyze/{analysis_id}/log\"][\"get\"];\ntype requestParams = path[\"parameters\"][\"path\"];\ntype requestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\ntype requestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"404\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/image/logs`\n *\n * @param analysis_id - the image document id (ex: `package-extract-211112223258-38af1a4746733b53`)\n */\nexport const getImageLogs = async (\n    analysis_id?: requestParams[\"analysis_id\"],\n) => {\n    return axios.get(THOTH_URL + \"/analyze/\" + analysis_id + \"/log\", {\n        headers: {\n            accept: \"application/json\",\n        },\n    });\n};\n\nexport const useImageLogs = (\n    analysis_id?: requestParams[\"analysis_id\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<requestResponseSuccess>,\n        AxiosError<requestResponseFailure>\n    >({\n        ...config,\n        enabled: !!analysis_id,\n        queryKey: [\"ImageLogs\", analysis_id],\n        queryFn: () => getImageLogs(analysis_id),\n    });\n};\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useQuery } from \"react-query\";\n\nimport { THOTH_URL } from \"config\";\nimport { paths } from \"lib/schema\";\n\ntype path = paths[\"/image/metadata\"][\"post\"];\ntype requestParams = path[\"parameters\"][\"query\"];\nexport type ImageMetadataRequestResponseSuccess =\n    path[\"responses\"][\"200\"][\"content\"][\"application/json\"];\nexport type ImageMetadataRequestResponseFailure =\n    path[\"responses\"][\"400\"][\"content\"][\"application/json\"] &\n        path[\"responses\"][\"403\"][\"content\"][\"application/json\"];\n\n/**\n * An async function that returns a promise for `{base_url}/analyze`\n *\n * @param image the name of the image\n */\nexport const getImageMetadata = async (image: requestParams[\"image\"]) => {\n    return axios.post(\n        THOTH_URL + \"/image/metadata\",\n        {},\n        {\n            params: {\n                image: image,\n            },\n            headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        },\n    );\n};\n\nexport const useImageMetadata = (\n    image_name: requestParams[\"image\"],\n    config?: { [key: string]: unknown },\n) => {\n    return useQuery<\n        AxiosResponse<ImageMetadataRequestResponseSuccess>,\n        AxiosError<ImageMetadataRequestResponseFailure>\n    >({\n        ...config,\n        enabled: !!image_name,\n        queryKey: [\"ImageMetadata\", image_name],\n        queryFn: () => getImageMetadata(image_name),\n    });\n};\n","import React from \"react\";\n\ninterface IImageNotFound {\n    analysis_id?: string;\n}\n\nexport const ImageNotFound = ({ analysis_id }: IImageNotFound) => {\n    return <div> &quot;{analysis_id}&quot; not found</div>;\n};\n","import React, { useMemo } from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\n\n// sub-routes\nimport { ImageSummary } from \"./ImageSummary\";\n\n// feature specific imports\nimport { useImageDocument, useImageLogs, useImageMetadata } from \"../api\";\n\n// misc\nimport { CircularProgress } from \"@mui/material\";\nimport { ImageNotFound } from \"./ImageNotFound\";\nimport { NavigationLayout } from \"components/Layout/NavigationLayout\";\nimport { useGraph } from \"hooks\";\nimport { useMetrics } from \"../hooks\";\nimport { ImageHeader } from \"../components\";\nimport { formatImagePackages } from \"../utils\";\nimport { components } from \"lib/schema\";\nimport { AxiosResponse } from \"axios\";\nimport { postImageAnalyze } from \"../../home/api\";\n\nexport const ImageRoutes = () => {\n    // get document id\n    const { analysis_id } = useParams();\n    const { state } = useLocation();\n    const navigate = useNavigate();\n\n    // api get thoth image analysis document\n    const imageDocument = useImageDocument(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: (\n            data: AxiosResponse<\n                components[\"schemas\"][\"AnalysisStatusResponse\"]\n            >,\n        ) => {\n            if (data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    const imageMetadata = useImageMetadata(\n        (state as { image_name?: string })?.image_name ??\n            (\n                imageDocument.data?.data?.metadata?.arguments as {\n                    \"extract-image\": { image: string };\n                }\n            )?.[\"extract-image\"]?.image,\n    );\n\n    const logs = useImageLogs(analysis_id, {\n        useErrorBoundary: false,\n        refetchInterval: () => {\n            if (imageDocument.data?.data?.status) {\n                return 10000;\n            }\n            return false;\n        },\n    });\n\n    // format init graph data\n    const graphData = useMemo(() => {\n        if (imageDocument.data?.data?.metadata) {\n            const os = {\n                name:\n                    (imageDocument.data.data.result?.[\"operating-system\"]\n                        ?.id as string) ?? \"rhel\",\n                version:\n                    (\n                        imageDocument.data.data.result?.[\"operating-system\"]\n                            ?.version_id as string\n                    )?.split(\".\")[0] ?? \"8\",\n                python_version:\n                    imageDocument.data.data.metadata.python.major +\n                    \".\" +\n                    imageDocument.data.data.metadata.python.minor,\n            };\n            return formatImagePackages(\n                imageDocument.data.data.result[\"python-packages\"],\n                os,\n            );\n        }\n    }, [imageDocument.data]);\n\n    // create init graph\n    const graph = useGraph(graphData);\n\n    // compute metric data\n    const metrics = useMetrics(graph);\n\n    if (imageDocument?.isLoading) {\n        return (\n            <div className=\"w-full h-48 flex justify-center items-center\">\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    if (!imageDocument?.data) {\n        const name = (state as { image_name?: string })?.image_name;\n        if (name) {\n            postImageAnalyze(name).then(response => {\n                navigate(\"/image/\" + response.data.analysis_id, {\n                    state: { image_name: name },\n                });\n            });\n            return (\n                <div className=\"w-full h-48 flex justify-center items-center\">\n                    <CircularProgress />\n                </div>\n            );\n        }\n        return (\n            <div data-testid=\"image-not-loaded\">\n                <NavigationLayout>\n                    <ImageNotFound analysis_id={analysis_id} />\n                </NavigationLayout>\n            </div>\n        );\n    }\n\n    return (\n        <div data-testid=\"image-loaded\">\n            <NavigationLayout goHome={true}>\n                <ImageHeader\n                    imageDocument={imageDocument.data?.data}\n                    logs={logs.data?.data?.log}\n                />\n                <ImageSummary\n                    imageMetadata={imageMetadata.data?.data}\n                    metrics={metrics}\n                    imageDocument={imageDocument.data?.data}\n                />\n            </NavigationLayout>\n        </div>\n    );\n};\n","import { useMemo } from \"react\";\nimport {\n    useLicenseMetric,\n    useDependencyMetric,\n    DependencyMetricType,\n    LicenseMetricType,\n} from \"hooks/metrics\";\nimport { Graph } from \"lib/interfaces/Graph\";\nimport { Node } from \"lib/interfaces/Node\";\nimport { PackageNodeValue } from \"lib/interfaces/PackageNodeValue\";\n\nexport type ImageMetrics = {\n    dependencies: DependencyMetricType | null;\n    licenses: LicenseMetricType | null;\n};\n\nexport function useMetrics(graph?: Graph<Node<PackageNodeValue>>) {\n    const dependencyMetric = useDependencyMetric(graph);\n    const licenseMetric = useLicenseMetric(graph);\n\n    return useMemo(() => {\n        const base: ImageMetrics = {\n            dependencies: null,\n            licenses: null,\n        };\n\n        if (dependencyMetric) {\n            base.dependencies = dependencyMetric;\n        }\n        if (licenseMetric) {\n            base.licenses = licenseMetric;\n        }\n\n        return base;\n    }, [dependencyMetric, licenseMetric]);\n}\n","type ImagePackages = {\n    package_name: string;\n    package_version: string;\n};\n\ntype OS = { name: string; version: string; python_version: string };\n\nexport function formatImagePackages(image_packages: ImagePackages[], os: OS) {\n    return image_packages.map(p => {\n        return {\n            name: p.package_name,\n            version: p.package_version,\n            index: \"https://pypi.org/simple\",\n            os_name: os.name,\n            os_version: os.version,\n            python_version: os.python_version,\n        };\n    });\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { Home } from \"features/home\";\nimport { NotFound } from \"routes/NotFound\";\nimport { AdviseRoutes } from \"features/advise\";\nimport { PackageRoutes } from \"features/package\";\nimport { ImageRoutes } from \"features/image\";\n\nexport const RouterConfig = () => {\n    return (\n        <BrowserRouter\n            basename={\n                process.env.REACT_APP_DEPLOYMENT === \"STAGE\"\n                    ? \"/search-stage\"\n                    : \"/search\"\n            }\n        >\n            <Routes>\n                <Route path={\"/\"} element={<Home />} />\n                <Route\n                    path={\"advise/:analysis_id/*\"}\n                    element={<AdviseRoutes />}\n                />\n                <Route\n                    path={\"package/:package_name/*\"}\n                    element={<PackageRoutes />}\n                />\n                <Route\n                    path={\"image/:analysis_id/*\"}\n                    element={<ImageRoutes />}\n                />\n                <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n        </BrowserRouter>\n    );\n};\n\nexport default RouterConfig;\n","import React from \"react\";\nimport { AppProvider } from \"providers/app\";\nimport RouterConfig from \"routes/RouterConfig\";\n\nfunction App() {\n    return (\n        <AppProvider>\n            <RouterConfig />\n        </AppProvider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}